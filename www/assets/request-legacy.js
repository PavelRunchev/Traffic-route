System.register(["./index-legacy.js"],(function(e,t){"use strict";var s;return{setters:[e=>{s=e.s}],execute:function(){e("execute",(function(e,t){let a=t.responseType;a?"array-buffer"!==a&&"blob"!==a&&"json"!==a&&"native"!==a&&"native-request-init"!==a&&"text"!==a&&(a="text"):a="json",t.responseType=a;const r=t.signal;return delete t.signal,globalThis.invokeStaticMessage("request",{url:e,options:t},{signal:r}).then((async n=>{let i,o,u,l,c;if(n.data)if(n.data instanceof ArrayBuffer){if(!("json"!==a&&"text"!==a&&"blob"!==a||(i=new Blob([n.data]),"json"!==a&&"text"!==a||(l=await i.text(),"json"!==a)))){try{o=JSON.parse(l||null)}catch(f){const a={...f,url:e,requestOptions:t};throw new s("request:server",f.message,a)}if(o.error){const a={...o.error,url:e,requestOptions:t};throw new s("request:server",o.error.message,a)}}}else"native"===a&&(n.data.signal=r,u=await fetch(n.data.url,n.data),n.httpStatus=u.status);switch(a){case"blob":c=i;break;case"json":c=o;break;case"native":c=u;break;case"text":c=l;break;default:c=n.data}return{data:c,httpStatus:n.httpStatus,requestOptions:t,ssl:n.ssl,url:e}}))}))}}}));
