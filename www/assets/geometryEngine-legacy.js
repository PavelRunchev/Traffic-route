System.register(["./geometryEngineBase-legacy.js","./hydrated-legacy.js","./index-legacy.js"],(function(e,n){"use strict";var t,r;return{setters:[e=>{t=e.G},e=>{r=e.hydratedAdapter},null],execute:function(){function n(e){return Array.isArray(e)?e[0].spatialReference:e&&e.spatialReference}function i(e){return"xmin"in e?"center"in e?e.center:null:"x"in e?e:"extent"in e?e.extent?.center??null:null}e({buffer:function(e,i,c,u=!1){return t.buffer(r,n(e),e,i,c,u)},changeDefaultSpatialReferenceTolerance:function(e,n){t.changeDefaultSpatialReferenceTolerance(e,n)},clearDefaultSpatialReferenceTolerance:function(e){t.clearDefaultSpatialReferenceTolerance(e)},clip:function(e,i){return t.clip(r,n(e),e,i)},contains:function(e,i){return t.contains(r,n(e),e,i)},convexHull:function(e,i=!1){return t.convexHull(r,n(e),e,i)},crosses:function(e,i){return t.crosses(r,n(e),e,i)},cut:function(e,i){return t.cut(r,n(e),e,i)},densify:function(e,i,c){return t.densify(r,n(e),e,i,c)},difference:function(e,i){return t.difference(r,n(e),e,i)},disjoint:function(e,i){return t.disjoint(r,n(e),e,i)},distance:function(e,i,c){return t.distance(r,n(e),e,i,c)},equals:function(e,i){return t.equals(r,n(e),e,i)},extendedSpatialReferenceInfo:function(e){return t.extendedSpatialReferenceInfo(e)},flipHorizontal:function(e,n){if(null==e)throw new c;const r=e.spatialReference;if(null==(n=n??i(e)))throw new c;const u=e.constructor.fromJSON(t.flipHorizontal(e,n));return u.spatialReference=r,u},flipVertical:function(e,n){if(null==e)throw new c;const r=e.spatialReference;if(null==(n=n??i(e)))throw new c;const u=e.constructor.fromJSON(t.flipVertical(e,n));return u.spatialReference=r,u},generalize:function(e,i,c,u){return t.generalize(r,n(e),e,i,c,u)},geodesicArea:function(e,i,c){return t.geodesicArea(r,n(e),e,i,c)},geodesicBuffer:function(e,i,c,u,o,f){return t.geodesicBuffer(r,n(e),e,i,c,u,o,f)},geodesicDensify:function(e,i,c,u=0){return t.geodesicDensify(r,n(e),e,i,c,u)},geodesicLength:function(e,i,c){return t.geodesicLength(r,n(e),e,i,c)},intersect:function(e,i){return t.intersect(r,n(e),e,i)},intersectLinesToPoints:function(e,i){return t.intersectLinesToPoints(r,n(e),e,i)},intersects:function(e,i){return t.intersects(r,n(e),e,i)},isSimple:function(e){return t.isSimple(r,n(e),e)},nearestCoordinate:function(e,i,c=!0){return t.nearestCoordinate(r,n(e),e,i,c)},nearestVertex:function(e,i){return t.nearestVertex(r,n(e),e,i)},nearestVertices:function(e,i,c,u){return t.nearestVertices(r,n(e),e,i,c,u)},offset:function(e,i,c,u,o,f){return t.offset(r,n(e),e,i,c,u,o,f)},overlaps:function(e,i){return t.overlaps(r,n(e),e,i)},planarArea:function(e,i){return t.planarArea(r,n(e),e,i)},planarLength:function(e,i){return t.planarLength(r,n(e),e,i)},relate:function(e,i,c){return t.relate(r,n(e),e,i,c)},rotate:function(e,n,r){if(null==e)throw new c;const u=e.spatialReference;if(null==(r=r??i(e)))throw new c;const o=e.constructor.fromJSON(t.rotate(e,n,r));return o.spatialReference=u,o},simplify:function(e){return t.simplify(r,n(e),e)},symmetricDifference:function(e,i){return t.symmetricDifference(r,n(e),e,i)},touches:function(e,i){return t.touches(r,n(e),e,i)},union:function(e,i=null){return t.union(r,n(e),e,i)},within:function(e,i){return t.within(r,n(e),e,i)}});class c extends Error{constructor(){super("Illegal Argument Exception")}}}}}));
