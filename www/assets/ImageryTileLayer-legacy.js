System.register(["./index-legacy.js","./ImageHistogramParameters-legacy.js","./multidimensionalUtils-legacy.js","./RasterSymbolizer-legacy.js","./RawBlockCache-legacy.js","./dataUtils-legacy.js","./rasterProjectionHelper-legacy.js","./utils-legacy6.js","./TilemapCache-legacy.js","./utils-legacy7.js","./ClassBreaksDefinition-legacy.js","./ByteSizeUnit-legacy.js"],(function(e,t){"use strict";var i,n,s,r,a,o,l,c,u,h,f,d,m,p,y,g,x,w,I,b,S,R,v,T,_,F,k,C,M,P,O,D,N,B,E,J,z,A,H,L,W,G,j,q,U,V,$,X,Y,K,Q,Z,ee,te,ie,ne,se,re,ae,oe,le,ce,ue,he,fe,de,me,pe,ye,ge,xe,we,Ie,be,Se,Re,ve,Te,_e,Fe,ke,Ce,Me,Pe,Oe,De,Ne,Be,Ee,Je,ze,Ae,He,Le,We,Ge,je,qe,Ue,Ve,$e,Xe,Ye,Ke,Qe,Ze,et,tt,it,nt,st,rt,at,ot,lt,ct,ut,ht,ft,dt,mt,pt,yt,gt,xt,wt,It,bt,St,Rt,vt,Tt,_t;return{setters:[e=>{i=e.io,n=e.kq,s=e.bE,r=e.hp,a=e.w,o=e.s,l=e.bY,c=e.ar,u=e.aQ,h=e.X,f=e.dX,d=e.bc,m=e.gr,p=e.x,y=e.y,g=e.dj,x=e.z,w=e.bX,I=e._,b=e.b5,S=e.E,R=e.aN,v=e.bD,T=e.kr,_=e.aa,F=e.$,k=e.ks,C=e.d9,M=e.kt,P=e.q,O=e.ai,D=e.gu,N=e.a7,B=e.ao,E=e.bs,J=e.bt,z=e.de,A=e.df,H=e.dG,L=e.dD,W=e.dE,G=e.dd,j=e.dg,q=e.db,U=e.A,V=e.bx,$=e.d2,X=e.fa,Y=e.fp,K=e.C,Q=e.dO,Z=e.c6,ee=e.di,te=e.F,ie=e.bw},e=>{ne=e.c,se=e.N,re=e.l,ae=e.d,oe=e.a,le=e.h,ce=e.K,ue=e.B,he=e.S,fe=e.E,de=e.V,me=e.t,pe=e.p,ye=e.m,ge=e.b},e=>{xe=e.h,we=e.D,Ie=e.i,be=e.a,Se=e.p,Re=e.d,ve=e.o,Te=e.f,_e=e.g},e=>{Fe=e.S,ke=e.n,Ce=e.m,Me=e.L,Pe=e.r,Oe=e.a,De=e.h,Ne=e.g,Be=e.P,Ee=e.b,Je=e.F,ze=e.U,Ae=e.N,He=e.R,Le=e.c,We=e.B,Ge=e.d,je=e.D},e=>{qe=e.i,Ue=e.m,Ve=e.x,$e=e.h,Xe=e.s},e=>{Ye=e.U,Ke=e.D,Qe=e.R,Ze=e.a,et=e.l,tt=e.c,it=e.u,nt=e.f,st=e.s,rt=e.d,at=e.E,ot=e.W,lt=e.T},e=>{ct=e.T,ut=e.D,ht=e.j,ft=e.r,dt=e.o,mt=e.V,pt=e.J,yt=e.e,gt=e.Z,xt=e.C,wt=e.U},e=>{It=e.R,bt=e.f,St=e.i,Rt=e.y,vt=e.c,Tt=e.N},e=>{_t=e.T},null,null,null],execute:function(){let Ft=0,kt=class extends(i(w)){constructor(){super(...arguments),this._tileFetchQueue=new n({concurrency:32,process:(e,t)=>this._fetchRawTile(e.pyramidLevel,e.row,e.col,{...e.options,signal:t})}),this.datasetName=null,this.datasetFormat=null,this.hasUniqueSourceStorageInfo=!0,this.rasterInfo=null,this.ioConfig={sampling:"closest"}}async init(){const e=ct();this.addResolvingPromise(e),await this.when()}normalizeCtorArgs(e){return e?.ioConfig&&(e={...e,ioConfig:{resolution:null,bandIds:null,sampling:"closest",tileInfo:s.create(),...e.ioConfig}}),e}get _isGlobalWrappableSource(){const{rasterInfo:e}=this,t=ut(e.spatialReference);return null!=t&&e.extent.width>=t/2}get _hasNoneOrGCSShiftTransform(){const{transform:e}=this.rasterInfo;return null==e||"gcs-shift"===e.type}set rasterJobHandler(e){this._set("rasterJobHandler",e),"Function"===this.datasetFormat&&this.primaryRasters?.rasters?.forEach((t=>t.rasterJobHandler=e))}get rasterId(){return this.url||"rasterId-"+Ft++}set url(e){this._set("url",r(e,a.getLogger(this)))}async open(e){throw new o("BaseRaster:open-not-implemented","open() is not implemented")}async fetchTile(e,t,i,n={}){const s=n.tileInfo||this.rasterInfo.storageInfo.tileInfo,r=this.getTileExtentFromTileInfo(e,t,i,s);return n={noClip:!0,...n},this.fetchPixels(r,s.size[0],s.size[1],n)}async identify(e,t={}){e=l(c,e).clone().normalize();const{multidimensionalDefinition:i,timeExtent:n}=t,{rasterInfo:s}=this,{hasMultidimensionalTranspose:r,multidimensionalInfo:a}=s;let{transposedVariableName:o}=t;const h=null!=a&&r&&(null!=n||xe(i));h&&!o&&(o=null!=i&&i.length>0?i[0].variableName??void 0:a.variables[0].name,t={...t,transposedVariableName:o}),t=this._getRequestOptionsWithSliceId(t);const{spatialReference:f,extent:d}=s,{datumTransformation:m}=t;let p=ht(e,f,m);if(!d.intersects(p))return{location:p,value:null};if(null!=s.transform){const e=s.transform.inverseTransform(p);if(!s.nativeExtent.intersects(e))return{location:e,value:null};p=e}let y=0;const g=null!=o&&null!=a&&s.hasMultidimensionalTranspose;if("Function"===this.datasetFormat){const e=this.primaryRasters.rasters[0];if(g)return e.identify(p,t);const{pixelSize:n}=s,r=3,a=n.x*r/2,o=n.y*r/2,l=new u({xmin:p.x-a,xmax:p.x+a,ymin:p.y-o,ymax:p.y+o,spatialReference:f}),c={interpolation:"nearest",multidimensionalDefinition:i,sliceId:t.sliceId},{pixelBlock:h}=await e.fetchPixels(l,r,r,c),{pixelBlock:d}=await this.fetchPixels(l,r,r,c);if(null==h)return{location:p,value:null};const m=Math.floor(r*r*.5),y=!h.mask||h.mask[m]?h.pixels.map((e=>e[m])):null;let x;return null!=d&&(x=!d.mask||d.mask[m]?d.pixels.map((e=>e[m])):void 0),{location:p,value:y,processedValue:x,pyramidLevel:0}}if(!g)if(t.srcResolution)y=ft(t.srcResolution,s,this.ioConfig.sampling).pyramidLevel;else if(y=await this.computeBestPyramidLevelForLocation(e,t),null==y)return{location:p,value:null};const x=this.identifyPixelLocation(p,y,null,g);if(null===x)return{location:p,value:null};const{row:w,col:I,rowOffset:b,colOffset:S,blockWidth:R}=x,v=o??t.sliceId,T=qe(this.rasterId,v),_=`${y}/${w}/${I}`;let F=Ue(T,null,_);null==F&&(F=this.fetchRawTile(y,w,I,t),Ve(T,null,_,F));const k=await F;if(!k?.pixels?.length)return{location:p,value:null};const C=b*R+S;return this._processIdentifyResult(k,{srcLocation:p,position:C,pyramidLevel:y,useTransposedTile:!!g,requestSomeSlices:h,identifyOptions:t})}async fetchPixels(e,t,i,n={}){e=dt(e),n=this._getRequestOptionsWithSliceId(n);const{_hasNoneOrGCSShiftTransform:s}=this;if(n.requestRawData&&s)return this._fetchPixels(e,t,i,n);const r=ut(e.spatialReference),a=mt(e);if(null==r||0===a||1===a&&this._isGlobalWrappableSource&&s)return this._fetchPixels(e,t,i,n);if(a>=3)return{extent:e,pixelBlock:null};const o=[],{xmin:l,xmax:c}=e,h=Math.round(r/(c-l)*t),f=h-Math.round((r/2-l)/(c-l)*t);let d=0;const m=[];for(let x=0;x<=a;x++){const s=new u({xmin:0===x?l:-r/2,xmax:x===a?c-r*x:r/2,ymin:e.ymin,ymax:e.ymax,spatialReference:e.spatialReference}),p=0===x?h-f:x===a?t-d:h;d+=p,m.push(p);const y=n.disableWrapAround&&x>0?null:this._fetchPixels(s,p,i,n);o.push(y)}const p=(await Promise.all(o)).map((e=>e?.pixelBlock));let y=null;const g={width:t,height:i};return y=this.rasterJobHandler?(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:p,srcMosaicSize:g,destDimension:null,coefs:null,sampleSpacing:null,interpolation:"nearest",alignmentInfo:null,blockWidths:m},n)).pixelBlock:Ye(p,g,{blockWidths:m}),{extent:e,srcExtent:pt(e,this.rasterInfo.spatialReference,n.datumTransformation),pixelBlock:y}}async fetchRawPixels(e,t,i,n={}){t={x:Math.floor(t.x),y:Math.floor(t.y)};const s=await this._fetchRawTiles(e,t,i,n),{nativeExtent:r,nativePixelSize:a,storageInfo:o}=this.rasterInfo,l=2**e,c=a.x*l,h=a.y*l,f=new u({xmin:r.xmin+c*t.x,xmax:r.xmin+c*(t.x+i.width-1),ymin:r.ymax-h*(t.y+i.height-1),ymax:r.ymax-h*t.y,spatialReference:r.spatialReference});if(!s)return{extent:f,srcExtent:f,pixelBlock:null};const{pixelBlocks:d,mosaicSize:m}=s;if(1===d.length&&null!=d[0]&&d[0].width===i.width&&d[0].height===i.height)return{extent:f,srcExtent:f,pixelBlock:s.pixelBlocks[0]};const p=e>0?o.pyramidBlockWidth:o.blockWidth,y=e>0?o.pyramidBlockHeight:o.blockHeight,g={x:t.x%p,y:t.y%y};let x;return x=this.rasterJobHandler?(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:d,srcMosaicSize:m,destDimension:i,clipOffset:g,clipSize:i,coefs:null,sampleSpacing:null,interpolation:n.interpolation,alignmentInfo:null,blockWidths:null},n)).pixelBlock:Ye(d,m,{clipOffset:g,clipSize:i}),{extent:f,srcExtent:f,pixelBlock:x}}fetchRawTile(e,t,i,n){throw new o("BaseRaster:read-not-implemented","fetchRawTile() is not implemented")}computeExtent(e){return pt(this.rasterInfo.extent,e)}decodePixelBlock(e,t){return!this.rasterJobHandler||t.useCanvas?Fe(e,t):this.rasterJobHandler.decode({data:e,options:t})}async request(e,t,i=0){const{customFetchParameters:n}=this.ioConfig,{range:s,query:r,headers:a}=t;i=i??t.retryCount??this.ioConfig.retryCount;const o=s?{Range:`bytes=${s.from}-${s.to}`}:null;try{return await h(e,{...t,query:{...r,...n},headers:{...a,...o}})}catch(ai){if(i>0)return i--,this.request(e,t,i);throw ai}}getSliceIndex(e){const{multidimensionalInfo:t}=this.rasterInfo;return null==t||null==e||0===e.length?null:we(e,t)}getTileExtentFromTileInfo(e,t,i,n){const s=n.lodAt(e);return this.getTileExtent({x:s.resolution,y:s.resolution},t,i,n.origin,n.spatialReference,n.size)}updateTileInfo(){const{storageInfo:e,spatialReference:t,extent:i,pixelSize:n}=this.rasterInfo;if(!e.tileInfo){const r=[],a=e.maximumPyramidLevel||0;let o=Math.max(n.x,n.y),l=1/.0254*96*o;for(let e=0;e<=a;e++)r.unshift(new f({level:a-e,resolution:o,scale:l})),o*=2,l*=2;const u=new c({x:i.xmin,y:i.ymax,spatialReference:t});e.tileInfo=new s({origin:u,size:[e.blockWidth,e.blockHeight],spatialReference:t,lods:r}),e.isVirtualTileInfo=!0}}createRemoteDatasetStorageInfo(e,t=512,i=512,n){const{width:s,height:r,nativeExtent:a,pixelSize:o,spatialReference:l}=e,u=new c({x:a.xmin,y:a.ymax,spatialReference:l});null==n&&(n=Math.max(0,Math.round(Math.log(Math.max(s,r))/Math.LN2-8)));const h=this.computeBlockBoundary(a,512,512,{x:a.xmin,y:a.ymax},[o],n);e.storageInfo=new ke({blockWidth:t,blockHeight:i,pyramidBlockWidth:t,pyramidBlockHeight:i,origin:u,firstPyramidLevel:1,maximumPyramidLevel:n,blockBoundary:h})}async computeBestPyramidLevelForLocation(e,t={}){return 0}computeBlockBoundary(e,t,i,n,s,r=0,a=2){if(1===s.length&&r>0){s=[...s];let{x:e,y:t}=s[0];for(let i=0;i<r;i++)e*=a,t*=a,s.push({x:e,y:t})}const o=[],{x:l,y:c}=n;for(let u=0;u<s.length;u++){const{x:n,y:r}=s[u];o.push({minCol:Math.floor((e.xmin-l+.1*n)/t/n),maxCol:Math.floor((e.xmax-l-.1*n)/t/n),minRow:Math.floor((c-e.ymax+.1*r)/i/r),maxRow:Math.floor((c-e.ymin-.1*r)/i/r)})}return o}getPyramidPixelSize(e){const{nativePixelSize:t}=this.rasterInfo,{pyramidResolutions:i,pyramidScalingFactor:n}=this.rasterInfo.storageInfo;if(0===e)return t;if(null!=i&&i.length)return i[e-1];const s=n**e;return{x:t.x*s,y:t.y*s}}identifyPixelLocation(e,t,i,n){const{spatialReference:s,nativeExtent:r,storageInfo:a}=this.rasterInfo,{maximumPyramidLevel:o,origin:l,transposeInfo:c}=a,u=n&&null!=c?c.tileSize[0]:a.blockWidth,h=n&&null!=c?c.tileSize[1]:a.blockHeight,f=ht(e,s,i);if(!r.intersects(f))return null;if(t<0||t>o)return null;const d=this.getPyramidPixelSize(t),{x:m,y:p}=d,y=(l.y-f.y)/p/h,g=(f.x-l.x)/m/u,x=Math.min(h-1,Math.floor((y-Math.floor(y))*h)),w=Math.min(u-1,Math.floor((g-Math.floor(g))*u));return{pyramidLevel:t,row:Math.floor(y),col:Math.floor(g),rowOffset:x,colOffset:w,blockWidth:u,srcLocation:f}}getTileExtent(e,t,i,n,s,r){const[a,o]=r,l=n.x+i*a*e.x,c=l+a*e.x,h=n.y-t*o*e.y,f=h-o*e.y;return new u({xmin:l,xmax:c,ymin:f,ymax:h,spatialReference:s})}getBlockWidthHeight(e){return{blockWidth:e>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:e>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(e,t,i){const n=this.rasterInfo.storageInfo.blockBoundary[e];return!n||n.maxRow<t||n.maxCol<i||n.minRow>t||n.minCol>i}updateImageSpaceRasterInfo(e){const{extent:t,pixelSize:i}=e;if(-.5===t.xmin&&.5===t.ymax&&1===i.x&&1===i.y&&null==e.transform)return;const{width:n,height:s}=e,r=d.WebMercator;e.spatialReference=r,e.extent=e.nativeExtent=new u({xmin:-.5,ymax:.5,xmax:n-.5,ymin:.5-s,spatialReference:r}),e.isPseudoSpatialReference=!0,e.transform=null,e.pixelSize=new c({x:1,y:1,spatialReference:r});const{extent:a,storageInfo:o}=e;if(o){o.origin=new c({x:a.xmin,y:a.ymax,spatialReference:r});const{tileInfo:t}=o;if(t){t.origin=o.origin;const i=(e.nativePixelSize.x+e.nativePixelSize.y)/2;t.lods.forEach(((e,t)=>{e.resolution=i*2**t,e.scale=96*e.resolution/.0254}))}}}async _fetchPixels(e,t,i,n={}){let s=mt(e);if(s>=2)return{extent:e,pixelBlock:null};const r=this._getSourceDataInfo(e,t,i,n),{pyramidLevel:a,srcResolution:o,srcExtent:l,srcWidth:u,srcHeight:h,ul:f}=r;if(0===u||0===h)return{extent:e,srcExtent:l,pixelBlock:null};const{rasterInfo:d}=this,m=d.transform,p="gcs-shift"===m?.type,y=null!=ut(e.spatialReference);!p&&y||(s=mt(r.srcExtent,p));const g=await this._fetchRawTiles(a,f,{width:u,height:h,wrapCount:s},n);if(!g)return{extent:e,srcExtent:l,pixelBlock:null};const x=d.storageInfo,w=a>0?x.pyramidBlockWidth:x.blockWidth,I=a>0?x.pyramidBlockHeight:x.blockHeight;let{x:b,y:S}=d.pixelSize;if(a>0){const{pyramidResolutions:e,pyramidScalingFactor:t}=x;if(null!=e&&e[a-1])({x:b,y:S}=e[a-1]);else{const e=t**a;b*=e,S*=e}}const R=d.spatialReference,v=new c({x:b,y:S,spatialReference:R}),T=w===u&&I===h&&f.x%w==0&&f.y%I==0,_=new c({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/i,spatialReference:e.spatialReference}),F=!e.spatialReference.equals(R),k=R.isGeographic?1e-9:1e-4,{datumTransformation:C}=n;if(!F&&T&&1===g.pixelBlocks.length&&w===t&&I===i&&this._isSameResolution(o,_,k))return{extent:e,srcExtent:l,srcTilePixelSize:v,pixelBlock:g.pixelBlocks[0]};const M=y&&null!=ut(l.spatialReference)&&this._hasNoneOrGCSShiftTransform,P=n.requestProjectedLocalDirections&&this.rasterInfo.dataType.startsWith("vector");P&&!this.rasterJobHandler&&await ct();const O=this.rasterJobHandler?await this.rasterJobHandler.getProjectionOffsetGrid({projectedExtent:e,srcBufferExtent:g.extent,pixelSize:_.toJSON(),datumTransformation:C,rasterTransform:m,hasWrapAround:s>0||M,isAdaptive:!1!==this.ioConfig.optimizeProjectionAccuracy,includeGCSGrid:P},n):yt({projectedExtent:e,srcBufferExtent:g.extent,pixelSize:_,datumTransformation:C,rasterTransform:m,hasWrapAround:s>0||M,isAdaptive:!1,includeGCSGrid:P});let D;const N=!n.requestRawData,B={rows:O.spacing[0],cols:O.spacing[1]},E=this._hasNoneOrGCSShiftTransform?this._getRasterTileAlignmentInfo(a,g.extent.xmin):void 0,{pixelBlocks:J,mosaicSize:z,isPartiallyFilled:A}=g;let H=null;if(this.rasterJobHandler){const e=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:J,srcMosaicSize:z,destDimension:N?{width:t,height:i}:null,coefs:N?O.coefficients:null,sampleSpacing:N?B:null,projectDirections:P,gcsGrid:P?O.gcsGrid:null,isUV:"vector-uv"===this.rasterInfo.dataType,interpolation:n.interpolation,alignmentInfo:E,blockWidths:null},n);({pixelBlock:D,localNorthDirections:H}=e)}else{const e=Ye(J,z,{alignmentInfo:E});D=N?Ke(e,{width:t,height:i},O.coefficients,B,n.interpolation):e,P&&O.gcsGrid&&(H=Qe({width:t,height:i},O.gcsGrid),D=Ze(D,this.rasterInfo.dataType,H))}return n.requestRawData||P?{extent:e,srcExtent:l,srcTilePixelSize:v,pixelBlock:D,transformGrid:O,localNorthDirections:H,isPartiallyFilled:A}:{extent:e,srcExtent:l,srcTilePixelSize:v,pixelBlock:D}}async _fetchRawTiles(e,t,i,n){const{origin:s,blockBoundary:r}=this.rasterInfo.storageInfo,{blockWidth:a,blockHeight:o}=this.getBlockWidthHeight(e);let{x:l,y:c}=t,{width:h,height:f,wrapCount:d}=i;const m=this._getRasterTileAlignmentInfo(e,0);n.buffer&&(l-=n.buffer.cols,c-=n.buffer.rows,h+=2*n.buffer.cols,f+=2*n.buffer.rows);let p=0,y=0,g=0;d&&null!=m&&(({worldColumnCountFromOrigin:y,originColumnOffset:g,rightPadding:p}=m),y*m.blockWidth-p>=l+h&&(p=0));const x=Math.floor(l/a),w=Math.floor(c/o),I=Math.floor((l+h+p-1)/a),b=Math.floor((c+f+p-1)/o),S=r[e];if(!S)return null;const{minRow:R,minCol:v,maxCol:T,maxRow:_}=S;if(0===d&&(b<R||I<v||w>_||x>T))return null;const F=new Array;let k=!1;const C=null==this.ioConfig.allowPartialFill?n.allowPartialFill:this.ioConfig.allowPartialFill;for(let u=w;u<=b;u++)for(let t=x;t<=I;t++){let i=t;if(!n.disableWrapAround&&d&&null!=m&&y<=t&&(i=t-y-g),u>=R&&i>=v&&_>=u&&T>=i){const t=this._tileFetchQueue.push({pyramidLevel:e,row:u,col:i,options:n},{signal:n.signal});C?F.push(new Promise((e=>{t.then((t=>e(t))).catch((()=>{k=!0,e(null)}))}))):F.push(t)}else F.push(Promise.resolve(null))}if(0===F.length)return null;const M=await Promise.all(F),P={height:(b-w+1)*o,width:(I-x+1)*a},{spatialReference:O}=this.rasterInfo,D=this.getPyramidPixelSize(e),{x:N,y:B}=D;return{extent:new u({xmin:s.x+x*a*N,xmax:s.x+(I+1)*a*N,ymin:s.y-(b+1)*o*B,ymax:s.y-w*o*B,spatialReference:O}),pixelBlocks:M,mosaicSize:P,isPartiallyFilled:k}}_isSameResolution(e,t,i){return Math.abs(e.x-t.x)<i&&Math.abs(e.y-t.y)<i}_fetchRawTile(e,t,i,n){const s=this.rasterInfo.storageInfo.blockBoundary[e];if(!s)return Promise.resolve(null);const{minRow:r,minCol:a,maxCol:o,maxRow:l}=s;if(t<r||i<a||t>l||i>o)return Promise.resolve(null);const c=qe(this.rasterId,n.sliceId),u=`${e}/${t}/${i}`;let h=Ue(c,n.registryId,u);if(null==h){const s=new AbortController;h=this.fetchRawTile(e,t,i,{...n,signal:s.signal}),Ve(c,n.registryId,u,h,s),h.catch((()=>$e(c,n.registryId,u)))}return n.signal&&m(n,(()=>{Xe(c,n.registryId,u)})),h}_computeMagDirValues(e){const{bandCount:t,dataType:i}=this.rasterInfo;if((2!==t||"vector-magdir"!==i)&&"vector-uv"!==i||2!==e?.length||!e[0]?.length)return null;const n=e[0].length;if("vector-magdir"===i){const t=e[1].map((e=>(e+360)%360));return[e[0],t]}const[s,r]=e,a=[],o=[];for(let l=0;l<n;l++){const[e,t]=et([s[l],r[l]]);a.push(e),o.push(t)}return[a,o]}_getRasterTileAlignmentInfo(e,t){return null==this._rasterTileAlignmentInfo&&(this._rasterTileAlignmentInfo=gt(this.rasterInfo)),null==this._rasterTileAlignmentInfo.pyramidsInfo?null:{startX:t,halfWorldWidth:this._rasterTileAlignmentInfo.halfWorldWidth,hasGCSSShiftTransform:this._rasterTileAlignmentInfo.hasGCSSShiftTransform,...this._rasterTileAlignmentInfo.pyramidsInfo[e]}}_getSourceDataInfo(e,t,i,n={}){const s={datumTransformation:n.datumTransformation,pyramidLevel:0,pyramidResolution:null,srcExtent:null,srcHeight:0,srcResolution:null,srcWidth:0,ul:{x:0,y:0}};n.srcResolution&&(s.srcResolution=n.srcResolution,this._updateSourceDataInfo(e,s));const r=this.rasterInfo.storageInfo.maximumPyramidLevel||0,{srcWidth:a,srcHeight:o,pyramidLevel:l}=s,u=a/t,h=o/i,f=l<r&&u*h>=16,d=l===r&&this._requireTooManySrcTiles(a,o,t,i);if(f||d||0===a||0===o){const a=new c({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/i,spatialReference:e.spatialReference});let o=xt(a,this.rasterInfo.spatialReference,e,s.datumTransformation);const d=!o||n.srcResolution&&o.x+o.y<n.srcResolution.x+n.srcResolution.y;if(f&&n.srcResolution&&d){const e=Math.round(Math.log(Math.max(u,h))/Math.LN2)-1;if(r-l+3>=e){const t=2**e;o={x:n.srcResolution.x*t,y:n.srcResolution.y*t}}}o&&(s.srcResolution=o,this._updateSourceDataInfo(e,s))}return this._requireTooManySrcTiles(s.srcWidth,s.srcHeight,t,i)&&(s.srcWidth=0,s.srcHeight=0),s}_requireTooManySrcTiles(e,t,i,n){const{tileInfo:s}=this.rasterInfo.storageInfo,r=e/i,a=t/n;return Math.ceil(e/s.size[0])*Math.ceil(t/s.size[1])>=256*Math.max(1,(i+n)/1024)||r>8||a>8}_updateSourceDataInfo(e,t){t.srcWidth=0,t.srcHeight=0;const{rasterInfo:i}=this,n=i.spatialReference,{srcResolution:s,datumTransformation:r}=t,{pyramidLevel:a,pyramidResolution:o,excessiveReading:l}=ft(s,i,this.ioConfig.sampling);if(l)return;let c=t.srcExtent||pt(e,n,r);if(null==c)return;const u=i.transform;u&&(c=u.inverseTransform(c)),t.srcExtent=c;const{x:h,y:f}=i.storageInfo.origin,d=Math.floor((c.xmin-h)/o.x+.1),m=Math.floor((f-c.ymax)/o.y+.1),p=Math.floor((c.xmax-h)/o.x-.1),y=Math.floor((f-c.ymin)/o.y-.1),g=c.width<.1*o.x?0:p-d+1,x=c.height<.1*o.y?0:y-m+1;t.pyramidLevel=a,t.pyramidResolution=o,t.srcWidth=g,t.srcHeight=x,t.ul={x:d,y:m}}_getRequestOptionsWithSliceId(e){return null!=this.rasterInfo.multidimensionalInfo&&null==e.sliceId&&(e={...e,sliceId:this.getSliceIndex(e.multidimensionalDefinition)}),e}_processIdentifyResult(e,t){const{srcLocation:i,position:n,pyramidLevel:s,useTransposedTile:r}=t,a=e.pixels[0].length/e.width/e.height;if(e.mask&&!e.mask[n])return{location:i,value:null};const{multidimensionalInfo:o}=this.rasterInfo;if(null==o||!r){const t=e.pixels.map((e=>e[n])),r={location:i,value:t,pyramidLevel:s},a=this._computeMagDirValues(t.map((e=>[e])));return a?.length&&(r.magdirValue=a.map((e=>e[0]))),r}let l=e.pixels.map((e=>e.slice(n*a,n*a+a))),c=this._computeMagDirValues(l);const{requestSomeSlices:u,identifyOptions:h}=t;let f=Ie(o,h.transposedVariableName);if(u){const e=be(f,h.multidimensionalDefinition,h.timeExtent);l=l.map((t=>e.map((e=>t[e])))),c=c?.map((t=>e.map((e=>t[e])))),f=e.map((e=>f[e]))}const d=e.noDataValues||this.rasterInfo.noDataValue,m={pixels:l,pixelType:e.pixelType};let p;return null!=d&&(tt(m,d),p=m.mask),{location:i,value:null,dataSeries:f.map(((e,t)=>{const i={value:0===p?.[t]?null:l.map((e=>e[t])),multidimensionalDefinition:e.multidimensionalDefinition.map((e=>new Se({...e,isSlice:!0})))};return c?.length&&(i.magdirValue=[c[0][t],c[1][t]]),i})),pyramidLevel:s}}};p([y()],kt.prototype,"_rasterTileAlignmentInfo",void 0),p([y()],kt.prototype,"_tileFetchQueue",void 0),p([y({readOnly:!0})],kt.prototype,"_isGlobalWrappableSource",null),p([y({readOnly:!0})],kt.prototype,"_hasNoneOrGCSShiftTransform",null),p([y()],kt.prototype,"rasterJobHandler",null),p([y({readOnly:!0})],kt.prototype,"rasterId",null),p([y(g)],kt.prototype,"url",null),p([y({type:String,json:{write:!0}})],kt.prototype,"datasetName",void 0),p([y({type:String,json:{write:!0}})],kt.prototype,"datasetFormat",void 0),p([y()],kt.prototype,"hasUniqueSourceStorageInfo",void 0),p([y()],kt.prototype,"rasterInfo",void 0),p([y()],kt.prototype,"ioConfig",void 0),p([y()],kt.prototype,"sourceJSON",void 0),kt=p([x("esri.layers.support.rasterDatasets.BaseRaster")],kt);const Ct=kt;async function Mt(e,i,n){if("extent"===n.type)return function(e,t,i){const{width:n,height:s}=e,r=new Uint8Array(n*s),a=t.width/n,o=t.height/s;if(i.width/a<.5||i.height/o<.5)return new it({pixelType:e.pixelType,width:n,height:s,mask:r,pixels:[...e.pixels]});const{xmin:l,xmax:c,ymin:u,ymax:h}=t,{xmin:f,xmax:d,ymin:m,ymax:p}=i,y=Math.max(l,f),g=Math.min(c,d),x=Math.max(u,m),w=Math.min(h,p),I=.5*a,b=.5*o;if(g-y<I||w-x<b||g<l+I||y>c-I||x>h-b||w<u+b)return new it({pixelType:e.pixelType,width:n,height:s,mask:r,pixels:[...e.pixels]});const S=Math.max(0,(y-l)/a),R=Math.min(n,Math.max(0,(g-l)/a)),v=Math.max(0,(h-w)/o),T=Math.min(s,Math.max(0,(h-x)/o)),_=Math.round(S),F=Math.round(R)-1,k=Math.round(v),C=Math.round(T)-1;if(_===F&&S%1>.5&&R%1<.5||k===C&&v%1>.5&&T%1<.5)return new it({pixelType:e.pixelType,width:n,height:s,mask:r,pixels:[...e.pixels]});if(0===_&&0===k&&F===n&&C===s)return e;const M=e.mask;for(let P=k;P<=C;P++)for(let e=_;e<=F;e++){const t=P*n+e;r[t]=M?M[t]:255}return new it({pixelType:e.pixelType,width:n,height:s,mask:r,pixels:[...e.pixels]})}(e,i,n);const{width:s,height:r}=e,a=new Uint8Array(s*r),{contains:o,intersects:l}=await I((()=>t.import("./geometryEngine-legacy.js")),void 0,t.meta.url);return l(i,n)?"polyline"===n.type?function(e,t,i){const{width:n,height:s}=e,r=new Uint8Array(n*s),a=t.width/n,o=t.height/s,{xmin:l,ymax:c}=t,{paths:u}=i,h=e.mask;for(let f=0;f<u.length;f++){const e=u[f];for(let t=0;t<e.length-1;t++){const[i,u]=e[t],[f,d]=e[t+1];let m=Math.floor((c-u)/o),p=Math.floor((c-d)/o);if(p<m){const e=m;m=p,p=e}m=Math.max(0,m),p=Math.min(s-1,p);const y=(f-i)/(d-u);for(let e=m;e<=p;e++){const t=e===m?Math.max(u,d):(s+1-e)*o,c=e===p?Math.min(u,d):t-o;let g=d===u?Math.floor((i-l)/a):Math.floor((y*(t-u)+i-l)/a),x=d===u?Math.floor((f-l)/a):Math.floor((y*(c-u)+i-l)/a);if(x<g){const e=g;g=x,x=e}const w=e*n;g=Math.max(0,g),x=Math.min(n-1,x);for(let e=w+g;e<=w+x;e++)r[e]=h?h[e]:255}}}return new it({pixelType:e.pixelType,width:n,height:s,mask:r,pixels:[...e.pixels]})}(e,i,n):o(n,i)?e:function(e,t,i){if(!e)return e;const{width:n,height:s}=e,r=t.width/n,a=t.height/s,{xmin:o,ymax:l}=t;let c;if("extent"===i.type){const e=(i.xmin-o)/r,t=(i.xmax-o)/r,n=(l-i.ymax)/a,s=(l-i.ymin)/a;c=[[[e,n],[e,s],[t,s],[t,n],[e,n]]]}else c=i.rings.map((e=>e.map((([e,t])=>[(e-o)/r,(l-t)/a]))));const u=document.createElement("canvas");u.width=n,u.height=s;const h=u.getContext("2d");h.fillStyle="#f00",h.beginPath(),c.forEach((e=>{h.moveTo(e[0][0],e[0][1]);for(let t=0;t<e.length;t++)h.lineTo(e[t][0],e[t][1]);h.closePath()})),h.fill();const f=h.getImageData(0,0,n,s).data,d=e.mask,m=n*s,p=new Uint8Array(m);for(let y=0;y<m;y++)d&&!d[y]||(p[y]=f[4*y+3]>127?255:0);return new it({pixelType:e.pixelType,width:n,height:s,mask:p,maskIsAlpha:!1,pixels:[...e.pixels]})}(e,i,n):new it({pixelType:e.pixelType,width:s,height:r,mask:a,maskIsAlpha:!1,pixels:[...e.pixels]})}function Pt(e,t,i,n=!0){const{spatialReference:s}=e,{x:r,y:a}=function(e,t){if(e.spatialReference.equals(t))return e;const i=b(e.spatialReference),n=b(t);if(i===n)return e;const s=i/n;return{x:e.x*s,y:e.y*s}}(i,s);let o,l,c;const h="extent"===t.type?t:t.extent;let{xmin:f,xmax:d,ymax:m,ymin:p}=h;const{xmin:y,ymax:g}=e.extent;return n?(f=y+(f>y?r*Math.round((f-y)/r):0),m=g-(m<g?a*Math.round((g-m)/a):0),d=y+(d>y?r*Math.round((d-y)/r):0),p=g-(p<g?a*Math.round((g-p)/a):0),o=new u({xmin:f,ymax:m,xmax:d,ymin:p,spatialReference:s}),l=Math.round(o.width/r),c=Math.round(o.height/a)):(l=Math.floor((d-f)/r+.8),c=Math.floor((m-p)/a+.8),f=y+(f>y?r*Math.floor((f-y)/r+.1):0),m=g-(m<g?a*Math.floor((g-m)/a+.1):0),d=f+l*r,p=m-c*a,o=new u({xmin:f,ymax:m,xmax:d,ymin:p,spatialReference:s})),{extent:o,width:l,height:c}}let Ot=class extends Ct{constructor(){super(...arguments),this.datasetFormat="Function",this.tileType="Raster",this.rasterFunction=null,this._clippingGeometry=new Map}async open(e){await this.init();const{rasterFunction:t}=this;this.primaryRasters?.rasters?.length?t.sourceRasters=this.primaryRasters.rasters:(this.primaryRasters=t.getPrimaryRasters(),this.rasterJobHandler&&this.primaryRasters.rasters?.forEach((e=>e.rasterJobHandler=this.rasterJobHandler)));const{rasters:i,rasterIds:n}=this.primaryRasters,s=i.map((t=>t.rasterInfo?void 0:t.open(e)));await Promise.all(s);const r=i.map((({rasterInfo:e})=>e)),a=t.bind({rasterInfos:r,rasterIds:n});if(t.rawSourceRasterInfos=r,!a.success||0===r.length)throw new o("raster-function:open",`cannot bind the function: ${a.error??""}`);const l="Table"===t.functionName?t:t.functionArguments?.raster;"Table"===l?.functionName&&(t.rasterInfo.attributeTable=S.fromJSON(l.functionArguments.attributeTableAsRecordSet)),await this.syncJobHandler();const c=r[0];this.hasUniqueSourceStorageInfo=1===r.length||r.slice(1).every((e=>this._hasSameStorageInfo(e,c))),this.set("sourceJSON",i[0].sourceJSON),this.set("rasterInfo",t.rasterInfo),await this._updateClipGeometry()}async syncJobHandler(){return this.rasterJobHandler?.updateRasterFunction(this.rasterFunction)}async fetchPixels(e,t,i,n={}){const{rasters:s,rasterIds:r}=this.primaryRasters;let a=!1;const{interpolation:o}=n,l=this.rasterFunction.flatWebGLFunctionChain?.hasFocalFunction;!n.requestRawData&&l&&(a=1===s.length&&!n.skipRasterFunction,n={...n,interpolation:"bilinear",requestRawData:a});const c=s.map((s=>s.fetchPixels(e,t,i,n))),u=await Promise.all(c),h=u.map((e=>e.pixelBlock)),f=a||n.requestRawData?u.map((e=>e.srcTilePixelSize)):null;if(n.skipRasterFunction||h.every((e=>null==e)))return u[0];const d=u.find((e=>null!=e.pixelBlock))?.extent??e;let m=this.rasterJobHandler?await this.rasterJobHandler.process({extent:d,primaryPixelBlocks:h,primaryPixelSizes:f,primaryRasterIds:r}):this.rasterFunction.process({extent:d,primaryPixelBlocks:h,primaryPixelSizes:f,primaryRasterIds:r});const{transformGrid:p}=u[0];if(!a||null==m||null==p){const e=n.noClip?null:this.getClippingGeometry(d.spatialReference);return n.noClip||n.requestRawData||null==m||!e||(m=await Mt(m,d,e)),{...u[0],pixelBlock:m}}const y={rows:p.spacing[0],cols:p.spacing[1]};let g;g=this.rasterJobHandler?(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:[m],srcMosaicSize:{width:m.width,height:m.height},destDimension:{width:t,height:i},coefs:p.coefficients,sampleSpacing:y,projectDirections:!1,gcsGrid:null,isUV:!1,interpolation:o,alignmentInfo:void 0,blockWidths:null},n)).pixelBlock:Ke(m,{width:t,height:i},p.coefficients,y,o);const x=n.noClip?null:this.getClippingGeometry(e.spatialReference);return n.noClip||n.requestRawData||null==g||null==x||(g=await Mt(g,e,x)),{extent:e,srcExtent:u[0].srcExtent,pixelBlock:g}}getClippingGeometry(e){const t=this._clippingGeometry.get("0");if(!e||!t)return t;const i=this._getSRKey(e);let n=this._clippingGeometry.get(i);return null!=n||(n=e.equals(t.spatialReference)?t:wt(t,e),this._clippingGeometry.set(i,n)),n}_hasSameStorageInfo(e,t){const{storageInfo:i,pixelSize:n,spatialReference:s,extent:r}=e,{storageInfo:a,pixelSize:o,spatialReference:l,extent:c}=t;return n.x===o.x&&n.y===o.y&&s.equals(l)&&r.equals(c)&&i.blockHeight===a.blockHeight&&i.blockWidth===a.blockWidth&&i.maximumPyramidLevel===a.maximumPyramidLevel}async _updateClipGeometry(){const e=this.rasterFunction.getClippingGeometries()[0];let i=e?.clippingGeometry;if(i&&"inside"===e.clippingType){const{extent:e}=this.rasterInfo,{difference:n,densify:s}=await I((()=>t.import("./geometryEngine-legacy.js")),void 0,t.meta.url);let r=s(R.fromExtent(e),2*(e.width+e.height)/40);r=wt(r,i.spatialReference),i=n(r,i)}this._clippingGeometry.clear(),i&&this._clippingGeometry.set("0",i)}_getSRKey(e){return String(e.wkid??e.wkt??e.wkt2)}};p([y({type:String,json:{write:!0}})],Ot.prototype,"datasetFormat",void 0),p([y()],Ot.prototype,"tileType",void 0),p([y()],Ot.prototype,"rasterFunction",void 0),p([y()],Ot.prototype,"primaryRasters",void 0),Ot=p([x("esri.layers.support.rasterDatasets.FunctionRaster")],Ot);const Dt=Ot,Nt=e=>{let t=class extends e{constructor(...e){super(...e),this._isConstructedFromFunctionRaster=!1,this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this.bandIds=null,this.copyright=null,this.interpolation="nearest",this.multidimensionalSubset=null,this.raster=null,this.serviceRasterInfo=null,this.sourceJSON=null,this.spatialReference=null,this.symbolizer=null,this._isConstructedFromFunctionRaster="Function"===e[0]?.raster?.datasetFormat}get fullExtent(){return this.serviceRasterInfo?.extent}set multidimensionalDefinition(e){this._set("multidimensionalDefinition",e),this.updateRenderer()}set rasterFunction(e){"none"===e?.functionName?.toLowerCase()&&(e=void 0),this._set("rasterFunction",e),this.updateRasterFunction()}get rasterInfo(){return T(a.getLogger(this),"rasterInfo",{replacement:"serviceRasterInfo",version:"4.29",warnOnce:!0}),this._get("serviceRasterInfo")}set url(e){this._set("url",r(e,a.getLogger(this)))}set renderer(e){null==e&&null==this.rasterFunction?this._configDefaultRenderer("override"):(this._set("renderer",e),this.updateRenderer())}readRenderer(e,t,i){const n=t?.layerDefinition?.drawingInfo?.renderer;return oe(n,i)||void 0}async convertVectorFieldData(e,t){const{serviceRasterInfo:i}=this;if(null==e||!i)return null;const n=this._rasterJobHandler.instance,s=i.dataType;return n?n.convertVectorFieldData({pixelBlock:e,dataType:s},t):nt(e,s)}async computeStatisticsHistograms(e,t){e=l(le,e).clone();const{serviceRasterInfo:i}=this,{geometry:n}=e;if(null==n)throw new o("imagery-tile-mixin:compute-statistics-histograms","geometry must be specified");let s=n;const{spatialReference:r}=i;n.spatialReference.equals(r)||(await ct(),s="extent"===n.type?pt(n,r):wt(n,r));const a=e.pixelSize??new c({x:i.pixelSize.x,y:i.pixelSize.y,spatialReference:r}),{extent:u,width:h,height:f}=Pt(i,s,a),d=await this.fetchPixels(u,h,f,{...t,interpolation:"nearest"});if(null==d.pixelBlock)throw new o("imagery-tile-mixin:compute-statistics-histograms","failed to fetch pixels");const m=await Mt(d.pixelBlock,u,s),p=this._rasterJobHandler.instance;return p?p.computeStatisticsHistograms({pixelBlock:m},t):Ce(m)}async createFlowMesh(e,t){const i=this._rasterJobHandler.instance;return i?i.createFlowMesh(e,t):st(e.meshType,e.simulationSettings,e.flowData,null!=t.signal?t.signal:(new AbortController).signal)}normalizeRasterFetchOptions(e){const{multidimensionalInfo:t}=this.serviceRasterInfo??{};if(null==t)return e;let i=e.multidimensionalDefinition||this.multidimensionalDefinition;i?.length||(i=Re(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset}));const n=e.timeExtent||this.timeExtent;if(null!=i&&null!=n&&(null!=n.start||null!=n.end)){i=i.map((e=>e.clone()));const s=t.variables.find((({name:e})=>e===i[0].variableName))?.dimensions?.find((({name:e})=>"StdTime"===e)),r=i.find((({dimensionName:e})=>"StdTime"===e));if(!s||!r)return{...e,multidimensionalDefinition:null};const{start:a,end:o}=n,l=null==a?null:a.getTime(),c=null==o?null:o.getTime(),u=l??c,h=c??l;if(null!=s.values){const e=s.values.filter((e=>{if(Array.isArray(e)){if(u===h)return e[0]<=u&&e[1]>=u;const t=e[0]<=u&&e[1]>u||e[0]<h&&e[1]>=h,i=e[0]>=u&&e[1]<=h||e[0]<u&&e[1]>h;return t||i}return u===h?e===u:e>=u&&e<=h}));if(e.length){const t=e.sort(((e,t)=>{const i=Array.isArray(e)?e[0]:e,n=Array.isArray(e)?e[1]:e,s=Array.isArray(t)?t[0]:t,r=Array.isArray(t)?t[1]:t;return u===h?i-s:Math.abs(n-h)-Math.abs(r-h)}))[0];r.values=[t]}else i=null}else if(s.hasRegularIntervals&&s.extent){const[e,t]=s.extent;u>t||h<e?i=null:r.values=u===h?[u]:[Math.max(e,u),Math.min(t,h)]}}return null!=i&&ve(i,this.multidimensionalSubset)?{...e,multidimensionalDefinition:null}:{...e,multidimensionalDefinition:i}}async updateRasterFunction(){if(!this.loaded||"imagery-tile"!==this.type||!this.rasterFunction&&!this._cachedRasterFunctionJson||JSON.stringify(this.rasterFunction)===JSON.stringify(this._cachedRasterFunctionJson))return;if(this._isConstructedFromFunctionRaster&&"Function"===this.raster.datasetFormat){const e=this.raster.rasterFunction.toJSON();return!this.rasterFunction&&e&&this._set("rasterFunction",se.fromJSON(e)),void(this._cachedRasterFunctionJson=this.rasterFunction?.toJSON())}let e,t=this.raster,i=!1;"Function"===t.datasetFormat?(e=t.primaryRasters.rasters,t=e[0],i=!0):e=[t];const{rasterFunction:n}=this;if(n){const i={raster:t};e.length>1&&e.forEach((e=>i[e.url]=e));const s=It(n.functionDefinition?.toJSON()??n.toJSON(),i),r=new Dt({rasterFunction:s});r.rasterJobHandler=this._rasterJobHandler.instance,await r.open(),this._cachedRasterFunctionJson=this.rasterFunction?.toJSON(),this.raster=r}else this.raster=t,this._cachedRasterFunctionJson=null,await t.when();if(this._cachedRendererJson=null,!i&&!n)return;const{bandIds:s}=this,{bandCount:r}=this.raster.rasterInfo,a=s?.length?s.some((e=>e>=r)):r>=3;s&&(a||this.renderer&&"raster-stretch"!==this.renderer.type)&&this._set("bandIds",null),this._configDefaultRenderer("auto")}async updateRenderer(){const{loaded:e,symbolizer:t}=this;if(!e||!t||!this.renderer)return;const{rasterInfo:i}=this.raster,n=Te(i,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset}),s=n?.name,r=ce({...this.renderer.toJSON(),variableName:s});if(JSON.stringify(this._cachedRendererJson)===JSON.stringify(r))return;const a=this._rasterJobHandler.instance;a&&(t.rasterInfo=ue(i,s),t.rendererJSON=r,t.bind(),await a.updateSymbolizer(t),this._cachedRendererJson=r)}async applyRenderer(e,t){const i=e?.pixelBlock;if(!(null!=i&&i.pixels&&i.pixels.length>0))return null;let n;await this.updateRenderer();const s=this._rasterJobHandler.instance,r=this.bandIds??[];return n=s?await s.symbolize({...e,simpleStretchParams:t,bandIds:r}):this.symbolizer.symbolize({...e,simpleStretchParams:t,bandIds:r}),n}getTileUrl(e,t,i){return"RasterTileServer"===this.raster.datasetFormat?`${this.url}/tile/${e}/${t}/${i}`:""}getCompatibleTileInfo(e,t,i=!1){if(!this.loaded||null==t)return null;if(i&&e.equals(this.spatialReference))return this.tileInfo;const n=_(e);return s.create({size:256,spatialReference:e,origin:n?{x:n.origin[0],y:n.origin[1]}:{x:t.xmin,y:t.ymax}})}getCompatibleFullExtent(e){return this.loaded?(this._compatibleFullExtent&&this._compatibleFullExtent.spatialReference.equals(e)||(this._compatibleFullExtent=this.raster.computeExtent(e)),this._compatibleFullExtent):null}async fetchTile(e,t,n,s={}){if(i(this),s.requestAsImageElement){const i=this.getTileUrl(e,t,n);return h(i,{responseType:"image",query:{...this.refreshParameters,...this.raster.ioConfig.customFetchParameters},signal:s.signal}).then((e=>e.data))}const{serviceRasterInfo:r}=this;if(null!=r.multidimensionalInfo&&null==(s=this.normalizeRasterFetchOptions(s)).multidimensionalDefinition){const i=s.tileInfo||r.storageInfo.tileInfo;return{extent:this.raster.getTileExtentFromTileInfo(e,t,n,i),pixelBlock:null}}return await this._initJobHandler(),await this.updateRasterFunction(),"raster-shaded-relief"===this.renderer?.type&&(s={...s,buffer:{cols:1,rows:1}}),this.raster.fetchTile(e,t,n,s)}async fetchPixels(e,t,i,n={}){return null!=this.serviceRasterInfo.multidimensionalInfo&&null==(n=this.normalizeRasterFetchOptions(n)).multidimensionalDefinition?{extent:e,pixelBlock:null}:(await this._initJobHandler(),await this.updateRasterFunction(),t=Math.round(t),i=Math.round(i),this.raster.fetchPixels(e,t,i,n))}async identify(e,t={}){const{raster:i,serviceRasterInfo:n}=this;if(null!=n.multidimensionalInfo&&!(n.hasMultidimensionalTranspose&&(xe(t.multidimensionalDefinition)||t.transposedVariableName||t.timeExtent)||null!=(t=this.normalizeRasterFetchOptions(t)).multidimensionalDefinition))return{location:e,value:null};const s=this.multidimensionalSubset?.areaOfInterest;if(s&&!s.contains(e))throw new o("imagery-tile-mixin:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");return i.identify(e,t)}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}hasStandardTime(){const e=this.serviceRasterInfo?.multidimensionalInfo;if(null==e||"standard-time"!==this.serviceRasterInfo?.dataType)return!1;const t=this.multidimensionalDefinition,i=t?.[0]?.variableName;return e.variables.some((e=>e.name===i&&(!t?.[0].dimensionName||e.dimensions.some((e=>"StdTime"===e.name)))))}getStandardTimeValue(e){return new Date(24*(e-25569)*3600*1e3).toString()}getMultidimensionalSubsetVariables(e){const t=e??this.serviceRasterInfo?.multidimensionalInfo;return _e(this.multidimensionalSubset,t)}_configDefaultSettings(){this._configDefaultInterpolation(),this.multidimensionalDefinition||(this.multidimensionalDefinition=Re(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset})),this.rasterFunction&&"Function"===this.raster.datasetFormat&&(this._cachedRasterFunctionJson=this.rasterFunction.toJSON()),this._configDefaultRenderer()}_initJobHandler(){if(null!=this._rasterJobHandler.connectionPromise)return this._rasterJobHandler.connectionPromise;const e=new me;return this._rasterJobHandler.connectionPromise=e.initialize().then((async()=>{i(this),this._rasterJobHandler.instance=e,this.raster.rasterJobHandler=e,"Function"===this.raster.datasetFormat&&this.raster.syncJobHandler(),this.rasterFunction&&await this.updateRasterFunction().catch((()=>{})),this.renderer&&this.updateRenderer()})).catch((()=>{})),this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this._cachedRendererJson=null,this.raster&&(this.raster.rasterJobHandler=null)}_configDefaultInterpolation(){if(null==this.interpolation){i(this);const{raster:e}=this,t=he(e.rasterInfo,e.tileType,this.sourceJSON?.defaultResamplingMethod);this._set("interpolation",t)}}_configDefaultRenderer(e="no"){i(this);const{rasterInfo:t}=this.raster;!this.bandIds&&t.bandCount>1&&(this.bandIds=fe(t));const n=Te(t,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset}),s=n?.name;if(!this.renderer||"override"===e){const e=de(t,{bandIds:this.bandIds,variableName:s}),i=t.statistics,n=i&&i.length>0?i[0]:null,r=n?.max??0,a=n?.min??0;"WCSServer"===this.raster.datasetFormat&&"raster-stretch"===e.type&&(r>1e24||a<-1e24)&&(e.dynamicRangeAdjustment=!0,e.statistics=null,"none"===e.stretchType&&(e.stretchType="min-max")),this.renderer=e}const r=ce({...this.renderer.toJSON(),variableName:s}),o=ue(t,s);this.symbolizer?(this.symbolizer.rendererJSON=r,this.symbolizer.rasterInfo=o):this.symbolizer=new Me({rendererJSON:r,rasterInfo:o});const l=this.symbolizer.bind();if(l.success){if("auto"===e){const{colormap:e}=this.raster.rasterInfo,t=this.renderer;if(null!=e&&"raster-colormap"===t.type){const e=de(this.raster.rasterInfo);JSON.stringify(e)!==JSON.stringify(t)&&this._configDefaultRenderer("override")}else if("raster-stretch"===t.type){const e=this.bandIds?.length,i=t.statistics?.length;!t.dynamicRangeAdjustment&&i&&e&&i!==e&&this._configDefaultRenderer("override")}}}else a.getLogger(this).warn("imagery-tile-mixin",l.error||"The given renderer is not supported by the layer."),"auto"===e&&this._configDefaultRenderer("override")}};function i(e){if(!e.raster||!e.serviceRasterInfo)throw new o("imagery-tile","no raster")}return p([y({clonable:!1})],t.prototype,"_cachedRendererJson",void 0),p([y({clonable:!1})],t.prototype,"_cachedRasterFunctionJson",void 0),p([y({clonable:!1})],t.prototype,"_compatibleFullExtent",void 0),p([y({clonable:!1})],t.prototype,"_isConstructedFromFunctionRaster",void 0),p([y({clonable:!1})],t.prototype,"_rasterJobHandler",void 0),p([y()],t.prototype,"bandIds",void 0),p([y({json:{origins:{service:{read:{source:"copyrightText"}}}}})],t.prototype,"copyright",void 0),p([y({json:{read:!1}})],t.prototype,"fullExtent",null),p([y()],t.prototype,"interpolation",void 0),p([y()],t.prototype,"ioConfig",void 0),p([y({type:[Se],json:{write:!0}})],t.prototype,"multidimensionalDefinition",null),p([y({type:ne,json:{write:!0}})],t.prototype,"multidimensionalSubset",void 0),p([y()],t.prototype,"raster",void 0),p([y({type:se,json:{name:"renderingRule",write:!0}})],t.prototype,"rasterFunction",null),p([y({readOnly:!0})],t.prototype,"rasterInfo",null),p([y()],t.prototype,"serviceRasterInfo",void 0),p([y()],t.prototype,"sourceJSON",void 0),p([y({readOnly:!0,type:d,json:{read:!1}})],t.prototype,"spatialReference",void 0),p([y({type:s})],t.prototype,"tileInfo",void 0),p([y(g)],t.prototype,"url",null),p([y({types:re,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy(){const e="raster-stretch"===this.renderer?.type&&"none"===this.renderer.stretchType&&!this.renderer.useGamma;return{enabled:!this.loaded||"Raster"===this.raster.tileType||!e}}},origins:{"web-scene":{types:ae,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&"vector-field"!==e.type&&"flow"!==e.type})}}}}})],t.prototype,"renderer",null),p([v("renderer")],t.prototype,"readRenderer",null),p([y({clonable:!1})],t.prototype,"symbolizer",void 0),t=p([x("esri.layers.ImageryTileMixin")],t),t};function Bt(e){const t=e.fields,i=e.records,n=t.some((e=>"oid"===e.name.toLowerCase()))?"OBJECTID":"OID",s=[{name:n,type:"esriFieldTypeOID",alias:"OID"}].concat(t.map((e=>({name:e.name,type:"esriFieldType"+e.typeName,alias:e.name})))),r=s.map((e=>e.name)),a=[];let o=0,l=0;return i.forEach((e=>{const t={};for(t[n]=o++,l=1;l<r.length;l++)t[r[l]]=e[l-1];a.push({attributes:t})})),{displayFieldName:"",fields:s,features:a}}let Et=class{static get supportedVersions(){return[5]}static parse(e){const t=new DataView(e),i=3&t.getUint8(0);if(3!==i)return{header:{version:i},recordSet:null};const n=t.getUint32(4,!0),s=t.getUint16(8,!0),r=t.getUint16(10,!0),a={version:i,recordCount:n,headerByteCount:s,recordByteCount:r};let o=32;const l=[],c=[];let u;if(3===i){for(;13!==t.getUint8(o);)u=String.fromCharCode(t.getUint8(o+11)).trim(),l.push({name:Pe(new Uint8Array(e,o,11)),type:u,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(u)],length:t.getUint8(o+16)}),o+=32;if(o+=1,l.length>0)for(;c.length<n&&e.byteLength-o>r;){const i=[];32===t.getUint8(o)?(o+=1,l.forEach((t=>{if("C"===t.type)i.push(Pe(new Uint8Array(e,o,t.length)).trim());else if("N"===t.type)i.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(e,o,t.length)).trim(),10));else if("F"===t.type)i.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(e,o,t.length)).trim()));else if("D"===t.type){const n=String.fromCharCode.apply(null,new Uint8Array(e,o,t.length)).trim();i.push(new Date(parseInt(n.substring(0,4),10),parseInt(n.substring(4,6),10)-1,parseInt(n.substring(6,8),10)))}o+=t.length})),c.push(i)):o+=r}}return{header:a,fields:l,records:c,recordSet:Bt({fields:l,records:c})}}};const Jt=new Map;Jt.set("int16","esriFieldTypeSmallInteger"),Jt.set("int32","esriFieldTypeInteger"),Jt.set("int64","esriFieldTypeInteger"),Jt.set("float32","esriFieldTypeSingle"),Jt.set("float64","esriFieldTypeDouble"),Jt.set("text","esriFieldTypeString");let zt=class extends Ct{constructor(){super(...arguments),this.storageInfo=null,this.datasetFormat="CRF"}async open(e){await this.init();const{data:t}=await this.request(this.url+"/conf.json",{signal:e?.signal});if(!this._validateHeader(t))throw new o("cloudraster:open","Invalid or unsupported conf.json.");this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{storageInfo:i,rasterInfo:n}=this._parseHeader(t);if("thematic"===n.dataType){const e=await this._fetchAuxiliaryInformation();n.attributeTable=e}this._set("storageInfo",i),this._set("rasterInfo",n),this.ioConfig.retryCount=this.ioConfig.retryCount||0}async fetchRawTile(e,t,i,n={}){const{transposeInfo:s}=this.rasterInfo.storageInfo,{transposedVariableName:r}=n,a=!(!s||!r),o=a?0:this.rasterInfo.storageInfo.maximumPyramidLevel-e;if(o<0)return null;const l=this._buildCacheFilePath(o,t,i,n.multidimensionalDefinition,r),c=this._getIndexRecordFromBundle(t,i,a),u=await this.request(l,{range:{from:0,to:this.storageInfo.headerSize-1},responseType:"array-buffer",signal:n.signal});if(!u)return null;const h=new Uint8Array(u.data),f=this._getTileEndAndContentType(h,c);if(0===f.recordSize)return null;const d=await this.request(l,{range:{from:f.position,to:f.position+f.recordSize},responseType:"array-buffer",signal:n.signal});if(!d)return null;const[m,p]=this._getTileSize(a);return this.decodePixelBlock(d.data,{width:m,height:p,planes:null,pixelType:null,returnInterleaved:a})}_validateHeader(e){return e&&"RasterInfo"===e.type&&!["origin","extent","geodataXform","LODInfos","blockWidth","blockHeight","bandCount","pixelType","pixelSizeX","pixelSizeY","format","packetSize"].some((t=>!e[t]))}_parseHeader(e){const t=["u1","u2","u4","u8","s8","u16","s16","u32","s32","f32","f64"][e.pixelType],{bandCount:i,colormap:n,blockWidth:r,blockHeight:a,firstPyramidLevel:o,maximumPyramidLevel:l}=e,h=e.statistics?.map((e=>({min:e.min,max:e.max,avg:e.mean,stddev:e.standardDeviation,median:e.median,mode:e.mode}))),m=e.histograms?.[0]?.counts?.length?e.histograms:null,p=e.extent.spatialReference,y=e.geodataXform?.spatialReference,g=new d(p?.wkid||p?.wkt||p?.wkt2?p:y);let x=new u({xmin:e.extent.xmin,ymin:e.extent.ymin,xmax:e.extent.xmax,ymax:e.extent.ymax,spatialReference:g});const w=new c({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:g}),I=Math.round((x.xmax-x.xmin)/w.x),b=Math.round((x.ymax-x.ymin)/w.y),S=this._parseTransform(e.geodataXform),R=S?x:null;S&&(x=S.forwardTransform(x),w.x=(x.xmax-x.xmin)/I,w.y=(x.ymax-x.ymin)/b);const v=e.properties??{},T=e.format.toLowerCase().replace("cache/",""),_=new c(e.origin.x,e.origin.y,g);let F,k,C,M;if(n?.colors)for(F=[],k=0;k<n.colors.length;k++)C=n.colors[k],M=n.values?n.values[k]:k,F.push([M,255&C,C<<16>>>24,C<<8>>>24,C>>>24]);const P=e.LODInfos,O=[];for(k=0;k<P.levels.length;k++)O.push(new f({level:P.levels[k],resolution:P.resolutions[k],scale:96/.0254*P.resolutions[k]}));const D=new s({dpi:96,lods:O,format:T,origin:_,size:[r,a],spatialReference:g}),N={recordSize:8,packetSize:e.packetSize,headerSize:e.packetSize*e.packetSize*8+64},B=[{maxCol:Math.ceil(I/r)-1,maxRow:Math.ceil(b/a)-1,minCol:0,minRow:0}];let E=2;if(l>0)for(k=0;k<l;k++)B.push({maxCol:Math.ceil(I/E/r)-1,maxRow:Math.ceil(b/E/a)-1,minCol:0,minRow:0}),E*=2;const J=e.mdInfo;let z=null;if(J&&v._yxs){const e=v._yxs;z={packetSize:e.PacketSize,tileSize:[e.TileXSize,e.TileYSize]}}return{storageInfo:N,rasterInfo:new Oe({width:I,height:b,pixelType:t,bandCount:i,extent:x,nativeExtent:R,transform:S,spatialReference:g,pixelSize:w,keyProperties:v,statistics:h,histograms:m,multidimensionalInfo:J,colormap:F,storageInfo:new ke({blockWidth:r,blockHeight:a,pyramidBlockWidth:r,pyramidBlockHeight:a,origin:_,tileInfo:D,transposeInfo:z,firstPyramidLevel:o,maximumPyramidLevel:l,blockBoundary:B})})}}_parseTransform(e){if(!bt(e))throw new o("cloudraster:open","the data contains unsupported geodata transform types");const t=St(e);if("identity"===t.type)return null;if("polynomial"!==t.type||!t.forwardCoefficients?.length||!t.inverseCoefficients?.length)throw new o("cloudraster:open","the data contains unsupported geodata transforms - both forward and inverse coefficients are required currently");return t}async _fetchAuxiliaryInformation(e){const t=this.request(this.url+"/conf.vat.json",{signal:e}).then((e=>e.data)).catch((()=>null)),i=this.request(this.url+"/conf.vat.dbf",{responseType:"array-buffer",signal:e}).then((e=>e.data)).catch((()=>null)),n=await Promise.all([t,i]);let s;if(n[0]){let e=n[0].fields;const t=n[0].values;if(e&&t){e=e.map((e=>({type:"OID"===e.name?"esriFieldTypeOID":Jt.get(e.type),name:e.name,alias:e.alias||e.name})));const i=t.map((e=>({attributes:e})));e&&t&&(s={fields:e,features:i})}}return!s&&n[1]&&(s=Et.parse(n[1]).recordSet),S.fromJSON(s)}_buildCacheFilePath(e,t,i,n,s){const r=this._getPackageSize(!!s),a=Math.floor(t/r)*r,o=Math.floor(i/r)*r,l="R"+this._toHexString4(a)+"C"+this._toHexString4(o);let c="L";c+=e>=10?e.toString():"0"+e.toString();const{multidimensionalInfo:u}=this.rasterInfo,h=n?.[0];if(null==u||!h)return`${this.url}/_alllayers/${c}/${l}.bundle`;let f="_yxs";if(!s){f=u.variables.find((e=>e.name===h.variableName)).dimensions[0].values.indexOf(h.values[0]).toString(16);const e=4-f.length;for(let t=0;t<e;t++)f="0"+f;f="S"+f}const d=this._getVariableFolderName(s||h.variableName);return`${this.url}/_alllayers/${d}/${f}/${c}/${l}.bundle`}_getPackageSize(e=!1){const{transposeInfo:t}=this.rasterInfo.storageInfo;return e&&null!=t?t.packetSize??0:this.storageInfo.packetSize}_getTileSize(e=!1){const{storageInfo:t}=this.rasterInfo,{transposeInfo:i}=t;return e&&null!=i?i.tileSize:t.tileInfo.size}_getVariableFolderName(e){return""===(e=e.trim())?"_v":e.replaceAll(/[\{|\}\-]/g,"_").replace("\\*","_v")}_getIndexRecordFromBundle(e,t,i=!1){const n=this._getPackageSize(i),s=n*(e%n)+t%n;if(s<0)throw new Error("Invalid level / row / col");return 20+s*this.storageInfo.recordSize+44}_getTileEndAndContentType(e,t){const i=e.subarray(t,t+8);let n,s=0;for(n=0;n<5;n++)s|=(255&i[n])<<8*n;const r=0xffffffffff&s;for(s=0,n=5;n<8;n++)s|=(255&i[n])<<8*(n-5);return{position:r,recordSize:0xffffffffff&s}}_toHexString4(e){let t=e.toString(16);if(4!==t.length){let e=4-t.length;for(;e-- >0;)t="0"+t}return t}};p([y({readOnly:!0})],zt.prototype,"storageInfo",void 0),p([y({type:String,json:{write:!0}})],zt.prototype,"datasetFormat",void 0),zt=p([x("esri.layers.support.rasterDatasets.CloudRaster")],zt);const At=zt;function Ht(e){return["x","e","east","long","longitude"].includes(e.toLowerCase())}function Lt(e){return["y","n","west","lat","latitude"].includes(e.toLowerCase())}function Wt(e){const{axes:t}=e.domain,i=Object.keys(t),n=[],s=[];let r=-1,a=-1,o=[];for(let u=0;u<i.length;u++){const e=i[u];Ht(e)?r=u:Lt(e)&&(a=u);const l=t[e],c=[];if("values"in l){l.values.forEach((e=>c.push("string"==typeof e?new Date(e).getTime():e)));const e=c[1]-c[0];n.push([c[0]-.5*e,c[c.length-1]+.5*e]),s.push(e)}else{const{start:e,stop:t,num:i}=l,r=(t-e)/(i-1);n.push([e-.5*r,t+.5*r]),s.push(r);for(let n=0;n<i;n++)c.push(e+r*n)}o.push({name:e,values:c,extent:[c[0],c[c.length-1]]})}r>-1&&-1===a?a=0===r?1:0:a>-1&&-1===r?r=0===a?1:0:-1===a&&-1===r&&(r=0,a=1),o=o.filter(((e,t)=>!(t===r||t===a)));const{referencing:l}=e.domain,c=l.find((e=>e.coordinates.includes(i[r]))).system.id,h=c?.slice(c.lastIndexOf("/")+1),f=null==h||"CRS84"===h?4326:Number(h),m=new d({wkid:f}),[p,y]=n[r],[g,x]=n[a],w=new u({xmin:p,xmax:y,ymin:g,ymax:x,spatialReference:m});return{width:Math.round(w.width/s[r]),height:Math.round(w.height/s[a]),extent:w,dimensions:o}}function Gt(e){const t=k();return t?e[t]??Object.values(e)[0]:Object.values(e)[0]}function jt(){return Math.round(255*Math.random())}function qt(e){let t=Number.MAX_VALUE,i=-Number.MAX_VALUE;for(let n=0;n<e.length;n++){const s=e[n];null!=s&&(s<t&&(t=s),s>i&&(i=s))}return rt(t,i)}function Ut(e,t,i){const n=e.map(((e,i)=>({name:e,count:t[i]}))).sort(((e,t)=>e.name>t.name?-1:1)),s=(r=1,e=>r*=e.count);var r;const a=[...n.slice(1),{name:"",count:1}].reverse().map(s).reverse();let o=0;for(let l=e.length-1;l>=0;l--)o+=a[n.findIndex((({name:t})=>t===e[l]))]*(i%t[l]),i=Math.floor(i/t[l]);return o}function Vt(e){const{width:t,height:i,extent:n,dimensions:s}=Wt(e),{ranges:r}=e,a=Object.keys(r).sort(((e,t)=>e<t?-1:1)),o=[];for(let f=0;f<a.length;f++){const e=a[f];s?.length&&o.push({name:e,dimensions:s})}const l=function(e){const t={},{parameters:i}=e;if(!i)return t;for(const[n,s]of Object.entries(i)){const{type:e,description:i,unit:r,categoryEncoding:a,observedProperty:o}=s;if("Parameter"===e&&(t[n]={},i&&(t[n].description=Gt(i)),r&&(t[n].unit=r.label?Gt(r.label):null,t[n].symbol=r.symbol?.value),a)){const e=Object.entries(a).map(((e,t)=>({OID:t,Value:Number(e[1]),ClassName:e[0].slice(e[0].lastIndexOf("/")+1),Count:1})));let i=!1;o?.categories?.length&&(o.categories.forEach((t=>{if(!t.id)return;const n=t.id.slice(t.id.lastIndexOf("/")+1),s=e.find((e=>e.ClassName===n));if(!s)return;const r=t.label?Gt(t.label):null;if(s.Label=r,t.preferredColor){const e=F.fromHex(t.preferredColor);e&&(i=!0,s.Red=e.r,s.Green=e.g,s.Blue=e.b)}})),i&&e.forEach((e=>{null==e.Red&&(e.Red=jt(),e.Green=jt(),e.Blue=jt())})));const s={objectIdFieldName:"",fields:[{name:"OID",type:"esriFieldTypeOID",alias:"OID",domain:null},{name:"Value",type:"esriFieldTypeInteger",alias:"Value",domain:null},{name:"Count",type:"esriFieldTypeDouble",alias:"Count",domain:null},{name:"ClassName",type:"esriFieldTypeString",alias:"ClassName",domain:null,length:50},{name:"Label",type:"esriFieldTypeString",alias:"Label",domain:null,length:50}],features:e.map((e=>({attributes:e})))};i&&s.fields.push({name:"Red",type:"esriFieldTypeInteger",alias:"Red",domain:null},{name:"Green",type:"esriFieldTypeInteger",alias:"Green",domain:null},{name:"Blue",type:"esriFieldTypeInteger",alias:"Blue",domain:null}),t[n].attributeTable=s}}return t}(e);o.forEach((e=>l[e.name]&&Object.assign(e,l[e.name])));const c=o.length?{variables:o}:void 0,u=[];for(let f=0;f<a.length;f++){const e=a[f],{values:n,dataType:o,axisNames:l,shape:c}=r[e],h=c.length>2?f*c.slice(0,-2).reduce(((e,t)=>e*t)):0,d=l.slice(0,-2),m=c.slice(0,-2),p="float"===o?"f32":qt(n),y=t*i,g=n.length/y;for(let r=0;r<g;r++){const e=it.createEmptyBand(p,y),a=new Uint8Array(y).fill(255);let o=!1;const l=r*y;for(let t=0;t<y;t++){const i=n[l+t];null==i?(a[t]=0,o=!0):e[t]=i}if(0===f||s?.length){const n=new it({width:t,height:i,mask:o?a:null,pixels:[e],pixelType:p});n.updateStatistics(),s?.length?u[Ut(d,m,r)+h]=n:u.push(n)}else{const t=u[r];t.pixels.push(e),o?t.mask&&(t.mask=it.combineBandMasks([t.mask,a])):t.mask=o?a:null}}}const h=Object.values(l).find((e=>e.attributeTable))?.attributeTable;return{extent:n,pixelBlocks:u,multidimensionalInfo:c,attributeTable:h,bandNames:c?void 0:a}}let $t=class extends Ct{constructor(){super(...arguments),this.datasetFormat="MEMORY",this.source=null}get url(){return""}async open(e){await this.init();const t=this.source,{pixelBlocks:i,attributeTable:n,statistics:s,histograms:r,name:a,nativeExtent:o,transform:l}=t,c=i[0],{width:h,height:f,pixelType:m}=c,p=t.extent??new u({xmin:-.5,ymin:.5,xmax:h-.5,ymax:f-.5,spatialReference:new d({wkid:3857})}),y=t.isPseudoSpatialReference??!t.extent,g={x:p.width/h,y:p.height/f},x={...t.keyProperties};n&&(x.DataType="Thematic");const w=new Oe({width:h,height:f,pixelType:m,extent:p,nativeExtent:o,attributeTable:n,transform:l,pixelSize:g,spatialReference:p.spatialReference,bandCount:c.pixels.length,keyProperties:x,multidimensionalInfo:t.multidimensionalInfo,statistics:s,isPseudoSpatialReference:y,histograms:r});this.ioConfig.skipMapInfo&&this.updateImageSpaceRasterInfo(w),this.createRemoteDatasetStorageInfo(w,512,512),this._set("rasterInfo",w),this.updateTileInfo(),w.multidimensionalInfo?await this._buildMDimStats(t.pixelBlocks,w.multidimensionalInfo):await this._buildInMemoryRaster(c,{width:512,height:512},e),w.multidimensionalInfo||(this.source=null),this.datasetName=a}fetchRawTile(e,t,i,n={}){if(!this._pixelBlockTiles){const{rasterInfo:s}=this,[r,a]=s.storageInfo.tileInfo.size,{sliceId:o}=n,{pixelBlocks:l}=this.source,c={pixelBlock:null==o?l[0]:l[o],useBilinear:"thematic"!==s.dataType,tileSize:{width:r,height:a},level:e,row:t,col:i},u=this.rasterJobHandler?this.rasterJobHandler.clipTile(c,n):at(c);return Promise.resolve(u)}const s=this._pixelBlockTiles.get(`${e}/${t}/${i}`);return Promise.resolve(s)}async _buildInMemoryRaster(e,t,i){const{rasterInfo:n}=this,s=n.storageInfo.maximumPyramidLevel??0,r="thematic"!==n.dataType,a=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:e,tileSize:t,maximumPyramidLevel:s,useBilinear:r},i):Promise.resolve(ot(e,t,s,r)),l=null!=n.statistics,c=null!=n.histograms,u=this.ioConfig.skipStatistics||l?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:e},i):Promise.resolve(De(e)),h=await C([a,u]);if(!h[0].value&&h[1].value)throw new o("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=h[0].value,l||(n.statistics=h[1].value?.statistics),c||(n.histograms=h[1].value?.histograms)}async _buildMDimStats(e,t,i){for(let n=0;n<t.variables.length;n++){const s=t.variables[n];if(s.statistics)continue;const r=s.dimensions.map((e=>new Se({variableName:s.name,dimensionName:e.name,values:[e.values?.[0]??e.extent?.[0]],isSlice:!0}))),a=we(r,t),o=null==a?null:e[a];if(null==o)continue;const l=this.rasterJobHandler?await this.rasterJobHandler.computeStatisticsHistograms({pixelBlock:o},i):Ce(o);s.statistics=l.statistics,s.histograms||(s.histograms=l.histograms)}}};p([y({type:String,json:{write:!0}})],$t.prototype,"datasetFormat",void 0),p([y()],$t.prototype,"source",void 0),p([y()],$t.prototype,"url",null),$t=p([x("esri.layers.support.rasterDatasets.InMemoryRaster")],$t);const Xt=$t;let Yt=class extends Ct{constructor(){super(...arguments),this.datasetFormat="CovJSON"}async open(e){await this.init();const{extent:t,pixelBlocks:i,multidimensionalInfo:n,attributeTable:s,bandNames:r}=await this._fetchData(e),{statistics:a,histograms:o}=Ce(i[0]),l=r?.map((e=>({BandName:e}))),c={DataType:s?"Thematic":n?"Scientific":"Generic",BandProperties:l},u=new Xt({source:{extent:t,pixelBlocks:i,attributeTable:s?S.fromJSON(s):null,multidimensionalInfo:n,statistics:a,histograms:o,keyProperties:c,isPseudoSpatialReference:!1}});await u.open(),this._inMemoryRaster=u;const h=this.source?"":this.url.slice(this.url.lastIndexOf("/")+1);this._set("datasetName",h.slice(0,h.indexOf("."))),this._set("rasterInfo",u.rasterInfo)}fetchRawTile(e,t,i,n={}){return this._inMemoryRaster.fetchRawTile(e,t,i,n)}async _fetchData(e){const t=this.source??(await this.request(this.url,{signal:e?.signal})).data,i="imagery-tile-layer:open-coverage-json";if("coverage"!==t.type?.toLowerCase()||"grid"!==t.domain?.domainType?.toLowerCase())throw new o(i,"Only coverage with Grid domain type is supported");if(!t.ranges)throw new o(i,"Missing ranges in the grid coverage data");if(!t.domain.referencing?.length)throw new o(i,"Missing domain referencing in the grid coverage data");const n=Object.values(t.ranges);for(let s=0;s<n.length;s++){const{axisNames:e,shape:t,type:r,values:a}=n[s];if(!("ndarray"===r.toLowerCase()&&a?.length&&e?.length&&t?.length))throw new o(i,"Only ranges with valid NdArray, axisNames, shape, and inline values are supported");if(!Ht(e[e.length-1])||!Lt(e[e.length-2]))throw new o(i,"Only row-major ordered pixel values are supported. X axis must be the last axis.")}return Vt(t)}};p([y({type:String,json:{write:!0}})],Yt.prototype,"datasetFormat",void 0),p([y({constructOnly:!0})],Yt.prototype,"source",void 0),Yt=p([x("esri.layers.support.rasterDatasets.CovJSONRaster")],Yt);const Kt=Yt;function Qt(e,t){if(!e||!t)return[];let i=t;t.includes("/")?(i=t.slice(0,t.indexOf("/")),t=t.slice(t.indexOf("/")+1)):t="";const n=[];if(t){const s=Qt(e,i);for(let e=0;e<s.length;e++)Qt(s[e],t).forEach((e=>n.push(e)));return n}const s=e.getElementsByTagNameNS("*",i);if(!s||0===s.length)return[];for(let r=0;r<s.length;r++)n.push(s[r]||s.item(r));return n}function Zt(e,t){if(!e||!t)return null;let i=t;t.includes("/")?(i=t.slice(0,t.indexOf("/")),t=t.slice(t.indexOf("/")+1)):t="";const n=Qt(e,i);return n.length>0?t?Zt(n[0],t):n[0]:null}function ei(e,t=null){const i=t?Zt(e,t):e;let n;return i?(n=i.textContent||i.nodeValue,n?n.trim():null):null}function ti(e,t){const i=Qt(e,t),n=[];let s;for(let r=0;r<i.length;r++)s=i[r].textContent||i[r].nodeValue,s&&(s=s.trim(),""!==s&&n.push(s));return n}function ii(e,t){return ti(e,t).map((e=>Number(e)))}function ni(e,t){const i=ei(e,t);return Number(i)}function si(e,t){const i=e?.nodeName?.toLowerCase(),n=t.toLowerCase();return i.slice(i.lastIndexOf(":")+1)===n}function ri(e,t){if(!e||!t)return null;const i=[];for(let n=0;n<e.length;n++)i.push(e[n]),i.push(t[n]);return i}function ai(e){const t=Zt(e,"GeodataXform"),i=li(ni(t,"SpatialReference/WKID")||ei(t,"SpatialReference/WKT"));if("typens:PolynomialXform"!==t.getAttribute("xsi:type"))return{spatialReference:i,transform:null};const n=ni(t,"PolynomialOrder")??1,s=ii(t,"CoeffX/Double"),r=ii(t,"CoeffY/Double"),a=ii(t,"InverseCoeffX/Double"),o=ii(t,"InverseCoeffY/Double"),l=ri(s,r),c=ri(a,o);return{spatialReference:i,transform:l&&c&&l.length&&c.length?new Rt({spatialReference:i,polynomialOrder:n,forwardCoefficients:l,inverseCoefficients:c}):null}}function oi(e){const t=ni(e,"NoDataValue"),i=Zt(e,"Histograms/HistItem"),n=ni(i,"HistMin"),s=ni(i,"HistMax"),r=ni(i,"BucketCount"),a=ei(i,"HistCounts")?.split("|").map((e=>Number(e)));let o,l,c,u;Qt(e,"Metadata/MDI").forEach((e=>{const t=Number(e.textContent??e.nodeValue);switch(e.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":o=t;break;case"STATISTICS_MAXIMUM":l=t;break;case"STATISTICS_MEAN":c=t;break;case"STATISTICS_STDDEV":u=t}}));const h=ni(e,"Metadata/SourceBandIndex");return{noDataValue:t,histogram:a?.length&&null!=n&&null!=s?{min:n,max:s,size:r||a.length,counts:a}:null,sourceBandIndex:h,statistics:null!=o&&null!=l?{min:o,max:l,avg:c,stddev:u}:null}}function li(e){if(!e)return null;let t=Number(e);if(!isNaN(t)&&0!==t)return new d({wkid:t});if(e=String(e).trim(),M(e))return new d({wkt2:e});const i=e.toUpperCase();if(i.startsWith("COMPD_CS")){if(!i.includes("VERTCS")||!i.includes("GEOGCS")&&!i.startsWith("PROJCS"))return null;const n=i.indexOf("VERTCS"),s=i.indexOf("PROJCS"),r=s>-1?s:i.indexOf("GEOGCS");if(-1===r)return null;const a=e.slice(r,e.lastIndexOf("]",n)+1).trim(),o=e.slice(n,e.lastIndexOf("]")).trim();t=ci(a);const l=new d(t?{wkid:t}:{wkt:a}),c=ci(o);return c&&(l.vcsWkid=c),l}return i.startsWith("GEOGCS")||i.startsWith("PROJCS")?(t=ci(e),new d(0!==t?{wkid:t}:{wkt:e})):null}function ci(e){const t=e.replaceAll("]","[").replaceAll('"',"").split("[").map((e=>e.trim())).filter((e=>""!==e)),i=t[t.length-1].split(","),n=i[0]?.toLowerCase();if(("epsg"===n||"esri"===n)&&e.endsWith('"]]')){const e=Number(i[1]);if(!isNaN(e)&&0!==e)return e}return 0}function ui(e){if("pamdataset"!==e?.documentElement.tagName?.toLowerCase())return{};const t={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};e.documentElement.childNodes.forEach((e=>{if(1===e.nodeType)if(si(e,"SRS")){if(!t.spatialReference){const i=ei(e);t.spatialReference=li(i)}}else if(si(e,"Metadata"))if("xml:ESRI"===e.getAttribute("domain")){const{spatialReference:i,transform:n}=ai(e);t.transform=n,t.spatialReference||(t.spatialReference=i)}else Qt(e,"MDI").forEach((e=>t.metadata[e.getAttribute("key")]=ei(e)));else if(si(e,"PAMRasterBand")){const i=oi(e);null!=i.sourceBandIndex&&null==t.rasterBands[i.sourceBandIndex]?t.rasterBands[i.sourceBandIndex]=i:t.rasterBands.push(i)}}));const i=t.rasterBands;if(i.length){const e=!!i[0].statistics;t.statistics=e?i.map((e=>e.statistics)).filter(P):null;const n=!!i[0].histogram;t.histograms=n?i.map((e=>e.histogram)).filter(P):null}return t}let hi=class extends Ct{async open(e){await this.init();const t=await this._fetchData(e);let{spatialReference:i,statistics:n,histograms:s,transform:r}=await this._fetchAuxiliaryData(e);const a=!i;a&&(i=new d({wkid:3857})),s?.length&&null==n&&(n=Ne(s));const{width:o,height:l}=t;let c=new u({xmin:-.5,ymin:.5-l,xmax:o-.5,ymax:.5,spatialReference:i});const h=r?r.forwardTransform(c):c;let f=!0;if(r){const e=r.forwardCoefficients;f=e&&0===e[1]&&0===e[2],f&&(r=null,c=h)}const m=new Xt({source:{extent:h,nativeExtent:c,transform:r,pixelBlocks:[t],statistics:n,histograms:s,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:a},ioConfig:{sampling:"closest",skipStatistics:!0}});this.ioConfig.skipMapInfo&&(m.ioConfig.skipMapInfo=!0),await m.open(),m.source=null,this._set("rasterInfo",m.rasterInfo),this._inMemoryRaster=m}fetchRawTile(e,t,i,n={}){return this._inMemoryRaster.fetchRawTile(e,t,i,n)}async _fetchData(e){const{data:t}=await this.request(this.url,{responseType:"array-buffer",signal:e?.signal}),i=Be(t).toUpperCase();if("JPG"!==i&&"PNG"!==i&&"GIF"!==i&&"BMP"!==i)throw new o("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",i);const n=i.toLowerCase(),s="gif"===n||"bmp"===n||!O("ios"),r=await this.decodePixelBlock(t,{format:n,useCanvas:s,hasNoZlibMask:!0});if(null==r)throw new o("image-aux-raster:open","the data cannot be decoded");return r}async _fetchAuxiliaryData(e){const t=e?.signal,{skipExtensions:i=[],skipMapInfo:n}=this.ioConfig,s=n||i.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:t}),r=this.datasetFormat,a="JPG"===r?"jgw":"PNG"===r?"pgw":"BMP"===r?"bpw":null,o=a&&i.includes(a)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+a,{responseType:"text",signal:t}),l=await C([s,o]);if(t?.aborted)throw D();const c=ui(l[0].value?.data);if(!c.transform){const e=l[1].value?l[1].value.data.split("\n").slice(0,6).map((e=>Number(e))):null;c.transform=6===e?.length?new Rt({forwardCoefficients:[e[4],e[5],e[0],-e[1],e[2],-e[3]]}):null}return c}};p([y({type:String,json:{write:!0}})],hi.prototype,"datasetFormat",void 0),hi=p([x("esri.layers.support.rasterDatasets.ImageAuxRaster")],hi);const fi=hi;let di=class extends Ct{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer",this.tileType=null}async open(e){await this.init();const t=e?.signal,i=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:t});i.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const n=i.data;if(this.sourceJSON=n,!n)throw new o("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!n.tileInfo)throw new o("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo(),this.tileType=n.cacheType,null==this.tileType&&(["jpg","jpeg","png","png8","png24","png32","mixed"].includes(n.tileInfo.format.toLowerCase())?this.tileType="Map":"lerc"===n.tileInfo.format.toLowerCase()?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=n.name?.slice(n.name.indexOf("/")+1)??"";const r=await this._fetchRasterInfo({signal:t});if(null==r)throw new o("image-server-raster:open","cannot initialize image service");pe(r,n);const a="Map"===this.tileType?function(e,t){if(!e)return null;const{minScale:i,maxScale:n,minLOD:r,maxLOD:a}=t;if(null!=r&&null!=a)return s.fromJSON({...e,lods:e.lods.filter((({level:e})=>null!=e&&e>=r&&e<=a))});if(0!==i&&0!==n){const t=e=>Math.round(1e4*e)/1e4,r=i?t(i):1/0,a=n?t(n):-1/0;return s.fromJSON({...e,lods:e.lods.filter((e=>{const i=t(e.scale);return i<=r&&i>=a}))})}return s.fromJSON(e)}(n.tileInfo,n):s.fromJSON(n.tileInfo);N(a);const[l,c]=this._computeMinMaxLOD(r,a),{extent:u,pixelSize:h}=r,f=.5/r.width*h.x,d=Math.max(h.x,h.y),{lods:m}=a;("Map"!==this.tileType&&0!==n.maxScale||Math.abs(h.x-h.y)>f||!m.some((e=>Math.abs(e.resolution-d)<f)))&&(h.x=h.y=l.resolution,r.width=Math.ceil((u.xmax-u.xmin)/h.x-.1),r.height=Math.ceil((u.ymax-u.ymin)/h.y-.1));const p=l.level-c.level,[y,g]=a.size,x=[],w=[];m.forEach(((e,t)=>{e.level>=c.level&&e.level<=l.level&&x.push({x:e.resolution,y:e.resolution}),t<m.length-1&&w.push(Math.round(10*e.resolution/m[t+1].resolution)/10)})),x.sort(((e,t)=>e.x-t.x));const I=this.computeBlockBoundary(u,y,g,a.origin,x,p),b=x.length>1?x.slice(1):null;let S;n.transposeInfo&&(S={tileSize:[n.transposeInfo.rows,n.transposeInfo.cols],packetSize:r.keyProperties?._yxs.PacketSize??0});const R=w.length<=1||w.length>=3&&w.slice(0,-1).every((e=>e===w[0]))?w[0]??2:Math.round(10/(c.resolution/l.resolution)**(-1/p))/10;if(r.storageInfo=new ke({blockWidth:a.size[0],blockHeight:a.size[1],pyramidBlockWidth:a.size[0],pyramidBlockHeight:a.size[1],pyramidResolutions:b,pyramidScalingFactor:R,compression:a.format,origin:a.origin,firstPyramidLevel:1,maximumPyramidLevel:p,tileInfo:a,transposeInfo:S,blockBoundary:I}),this._fixGCSShift(r),this._set("rasterInfo",r),n.capabilities.toLowerCase().includes("tilemap")){const e={tileInfo:r.storageInfo.tileInfo,parsedUrl:B(this.url),url:this.url,tileServers:[]};this._tilemapCache=new _t({layer:e})}}async fetchRawTile(e,t,i,n={}){const{storageInfo:s,extent:r}=this.rasterInfo,{transposeInfo:a}=s,o=null!=a&&!!n.transposedVariableName;if(this._slices&&!o&&null==n.sliceId)return null;const l=o?0:s.maximumPyramidLevel-e+this._levelOffset,c=`${this.url}/tile/${l}/${t}/${i}`,u=this._slices?o?{variable:n.transposedVariableName}:{sliceId:n.sliceId||0}:null,{data:h}=await this.request(c,{query:u,responseType:"array-buffer",signal:n.signal});if(!h)return null;const f=o?a.tileSize:s.tileInfo.size,d=await this.decodePixelBlock(h,{width:f[0],height:f[1],planes:null,pixelType:null,isPoint:"Elevation"===this.tileType,returnInterleaved:o,noDataValue:this.rasterInfo.noDataValue});if(null==d)return null;const m=s.blockBoundary[e];if("jpg"!==s.compression||i>m.minCol&&i<m.maxCol&&t>m.minRow&&t<m.maxRow)return d;const{origin:p,blockWidth:y,blockHeight:g}=s,{x:x,y:w}=this.getPyramidPixelSize(e),I=Math.round((r.xmin-p.x)/x)%y,b=Math.round((r.xmax-p.x)/x)%y||y,S=Math.round((p.y-r.ymax)/w)%g,R=Math.round((p.y-r.ymin)/w)%g||g,v=i===m.minCol?I:0,T=t===m.minRow?S:0,_=i===m.maxCol?b:y,F=t===m.maxRow?R:g;return lt(d,{x:v,y:T},{width:_-v,height:F-T}),d}getSliceIndex(e){if(!this._slices||null==e||0===e.length)return null;const t=e;for(let i=0;i<this._slices.length;i++){const e=this._slices[i].multidimensionalDefinition;if(e.length===t.length&&!e.some((e=>{const i=t.find((t=>e.variableName===t.variableName&&t.dimensionName===e.dimensionName));return!i||(Array.isArray(e.values[0])?`${e.values[0][0]}-${e.values[0][1]}`:e.values[0])!==(Array.isArray(i.values[0])?`${i.values[0][0]}-${i.values[0][1]}`:i.values[0])})))return i}return null}async fetchVariableStatisticsHistograms(e,t){const i=this.request(this.url+"/statistics",{query:{variable:e,f:"json"},signal:t}).then((e=>e.data?.statistics)),n=this.request(this.url+"/histograms",{query:{variable:e,f:"json"},signal:t}).then((e=>e.data?.histograms)),s=await Promise.all([i,n]);return s[0]&&s[0].forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),s[1]?.[0]?.counts?.length||(s[1]=null),{statistics:s[0]||null,histograms:s[1]||null}}async computeBestPyramidLevelForLocation(e,t={}){if(!this._tilemapCache)return 0;let i=this.identifyPixelLocation(e,0,t.datumTransformation);if(null===i)return null;let n=0;const{maximumPyramidLevel:s}=this.rasterInfo.storageInfo;let r=s-n+this._levelOffset;const a=i.srcLocation;for(;r>=0;){try{if("available"===await this._tilemapCache.fetchAvailability(r,i.row,i.col,t))break}catch{}if(r--,n++,i=this.identifyPixelLocation(a,n,t.datumTransformation),null===i)return null}return-1===r||null==i?null:n}async _fetchRasterInfo(e){const t=this.sourceJSON;if("Map"===this.tileType){const e=t.fullExtent||t.extent,i=Math.ceil((e.xmax-e.xmin)/t.pixelSizeX-.1),n=Math.ceil((e.ymax-e.ymin)/t.pixelSizeY-.1),s=d.fromJSON(t.spatialReference||e.spatialReference),r=new c({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:s});return new Oe({width:i,height:n,bandCount:3,extent:u.fromJSON(e),spatialReference:s,pixelSize:r,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:i}=e,n=ye(this.url,this.sourceJSON,{signal:i,query:this.ioConfig.customFetchParameters}),s=t.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:i}).then((e=>e.data?.slices)).catch((()=>null)):null,r=await Promise.all([n,s]);return this._slices=r[1],r[0]}_fixScaleInServiceInfo(){const{sourceJSON:e}=this;e.minScale&&e.minScale<0&&(e.minScale=0),e.maxScale&&e.maxScale<0&&(e.maxScale=0)}_fixGCSShift(e){const{extent:t,spatialReference:i}=e;t.xmin>-1&&t.xmax>181&&i?.wkid&&i.isGeographic&&(e.nativeExtent=e.extent,e.transform=new vt,e.extent=e.transform.forwardTransform(t))}_computeMinMaxLOD(e,t){const{pixelSize:i}=e,n=.5/e.width*i.x,{lods:s}=t,r=t.lodAt(Math.max.apply(null,s.map((e=>e.level)))),a=t.lodAt(Math.min.apply(null,s.map((e=>e.level)))),{tileType:o}=this;if("Map"===o)return this._levelOffset=s[0].level,[r,a];if("Raster"===o)return[s.find((e=>e.resolution===i.x))??r,a];const{minScale:l,maxScale:c}=this.sourceJSON;let u=r;c>0&&(u=s.find((e=>Math.abs(e.scale-c)<n)),u||(u=s.filter((e=>e.scale>c)).sort(((e,t)=>e.scale>t.scale?1:-1))[0]??r));let h=a;return l>0&&(h=s.find((e=>Math.abs(e.scale-l)<n))??a,this._levelOffset=h.level-a.level),[u,h]}};p([y({type:String,json:{write:!0}})],di.prototype,"datasetFormat",void 0),p([y()],di.prototype,"tileType",void 0),di=p([x("esri.layers.support.rasterDatasets.ImageServerRaster")],di);const mi=di,pi=new Map;pi.set("Int8","s8"),pi.set("UInt8","u8"),pi.set("Int16","s16"),pi.set("UInt16","u16"),pi.set("Int32","s32"),pi.set("UInt32","u32"),pi.set("Float32","f32"),pi.set("Float64","f32"),pi.set("Double64","f32");const yi=new Map;yi.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),yi.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),yi.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),yi.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let gi=class extends Ct{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async open(e){await this.init(),this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const t=e?e.signal:null,i=await this.request(this.url,{responseType:"xml",signal:t}),{rasterInfo:n,files:s}=this._parseHeader(i.data),{skipMapInfo:r,skipExtensions:a=[]}=this.ioConfig;if(!a.includes("aux.xml")&&!r){const t=await this._fetchAuxiliaryData(e);null!=t&&(n.statistics=t.statistics??n.statistics,n.histograms=t.histograms,t.histograms&&null==n.statistics&&(n.statistics=Ne(t.histograms)))}r&&this.updateImageSpaceRasterInfo(n),this._set("rasterInfo",n),this._files=s;const o=await this.request(s.index,{responseType:"array-buffer",signal:t});this._storageIndex=this._parseIndex(o.data);const{blockWidth:l,blockHeight:c}=this.rasterInfo.storageInfo,u=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:h,height:f}=this.rasterInfo,d=[],m=this._getBandSegmentCount();let p=0,y=-1;for(;p<this._storageIndex.length;){y++;const e=Math.ceil(h/l/u**y)-1,t=Math.ceil(f/c/u**y)-1;p+=(e+1)*(t+1)*m*4,d.push({maxRow:t,maxCol:e,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=d,y>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=y),this.updateTileInfo()}async fetchRawTile(e,t,i,n={}){const{blockWidth:s,blockHeight:r,blockBoundary:a}=this.rasterInfo.storageInfo,o=a[e];if(!o||o.maxRow<t||o.maxCol<i||o.minRow>t||o.minCol>i)return null;const{bandCount:l,pixelType:c}=this.rasterInfo,{ranges:u,actualTileWidth:h,actualTileHeight:f}=this._getTileLocation(e,t,i);if(!u||0===u.length)return null;if(0===u[0].from&&0===u[0].to){const e=new Uint8Array(s*r);return new it({width:s,height:r,pixels:null,mask:e,validPixelCount:0})}const{bandIds:d}=this.ioConfig,m=this._getBandSegmentCount(),p=[];let y=0;for(y=0;y<m;y++)d&&!d.includes(y)||p.push(this.request(this._files.data,{range:{from:u[y].from,to:u[y].to},responseType:"array-buffer",signal:n.signal}));const g=await Promise.all(p),x=g.map((e=>e.data.byteLength)).reduce(((e,t)=>e+t)),w=new Uint8Array(x),I=[];let b=0;for(y=0;y<m;y++)I.push(b),w.set(new Uint8Array(g[y].data),b),b+=g[y].data.byteLength;const S=yi.get(this.rasterInfo.storageInfo.compression).decoderFormat,R=await this.decodePixelBlock(w.buffer,{width:s,height:r,format:S,planes:d?.length||l,offsets:I,pixelType:c});if(null==R)return null;let{noDataValue:v}=this.rasterInfo;if(null!=v&&"lerc"!==S&&!R.mask&&(v=v[0],null!=v)){const e=R.width*R.height,t=new Uint8Array(e);if(Math.abs(v)>1e24)for(y=0;y<e;y++)Math.abs((R.pixels[0][y]-v)/v)>1e-6&&(t[y]=1);else for(y=0;y<e;y++)R.pixels[0][y]!==v&&(t[y]=1);R.mask=t}let T=0,_=0;if(h!==s||f!==r){let e=R.mask;if(e)for(y=0;y<r;y++)if(_=y*s,y<f)for(T=h;T<s;T++)e[_+T]=0;else for(T=0;T<s;T++)e[_+T]=0;else for(e=new Uint8Array(s*r),R.mask=e,y=0;y<f;y++)for(_=y*s,T=0;T<h;T++)e[_+T]=1}return R}_parseIndex(e){if(e.byteLength%16>0)throw new Error("invalid array buffer must be multiples of 16");let t,i,n,s,r,a;if(Ee){for(i=new Uint8Array(e),s=new ArrayBuffer(e.byteLength),n=new Uint8Array(s),r=0;r<e.byteLength/4;r++)for(a=0;a<4;a++)n[4*r+a]=i[4*r+3-a];t=new Uint32Array(s)}else t=new Uint32Array(e);return t}_getBandSegmentCount(){return yi.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(e,t,i){const{blockWidth:n,blockHeight:s,pyramidScalingFactor:r}=this.rasterInfo.storageInfo,{width:a,height:o}=this.rasterInfo,l=this._getBandSegmentCount();let c,u,h,f=0,d=0;for(h=0;h<e;h++)d=r**h,c=Math.ceil(a/n/d),u=Math.ceil(o/s/d),f+=c*u;d=r**e,c=Math.ceil(a/n/d),u=Math.ceil(o/s/d),f+=t*c+i,f*=4*l;const m=this._storageIndex.subarray(f,f+4*l);let p=0,y=0;const g=[];for(let x=0;x<l;x++)p=m[4*x]*2**32+m[4*x+1],y=p+m[4*x+2]*2**32+m[4*x+3],g.push({from:p,to:y});return{ranges:g,actualTileWidth:i<c-1?n:Math.ceil(a/d)-n*(c-1),actualTileHeight:t<u-1?s:Math.ceil(o/d)-s*(u-1)}}_parseHeader(e){const t=Zt(e,"MRF_META/Raster");if(!t)throw new o("mrf:open","not a valid MRF format");const i=Zt(t,"Size"),n=parseInt(i.getAttribute("x"),10),s=parseInt(i.getAttribute("y"),10),r=parseInt(i.getAttribute("c"),10),a=(ei(t,"Compression")||"none").toLowerCase();if(!yi.has(a))throw new o("mrf:open","currently does not support compression "+a);const l=ei(t,"DataType")||"UInt8",h=pi.get(l);if(null==h)throw new o("mrf:open","currently does not support pixel type "+l);const f=Zt(t,"PageSize"),m=parseInt(f.getAttribute("x"),10),p=parseInt(f.getAttribute("y"),10),y=Zt(t,"DataValues");let g,x;if(y&&(x=y.getAttribute("NoData"),null!=x&&(g=x.trim().split(" ").map((e=>parseFloat(e))))),Zt(e,"MRF_META/CachedSource"))throw new o("mrf:open","currently does not support MRF referencing other data files");const w=Zt(e,"MRF_META/GeoTags"),I=Zt(w,"BoundingBox");let b,S=!1;if(null!=I){const e=parseFloat(I.getAttribute("minx")),t=parseFloat(I.getAttribute("miny")),i=parseFloat(I.getAttribute("maxx")),n=parseFloat(I.getAttribute("maxy")),s=ei(w,"Projection")||"";let r=d.WGS84;if("LOCAL_CS[]"!==s)if(s.toLowerCase().startsWith("epsg:")){const e=Number(s.slice(5));isNaN(e)||0===e||(r=new d({wkid:e}))}else r=li(s)??d.WGS84;else S=!0,r=new d({wkid:3857});b=new u(e,t,i,n),b.spatialReference=r}else S=!0,b=new u({xmin:-.5,ymin:.5-s,xmax:n-.5,ymax:.5,spatialReference:new d({wkid:3857})});const R=Zt(e,"MRF_META/Rsets"),v=parseInt(R?.getAttribute("scale")||"2",10),T=b.spatialReference,_=new ke({origin:new c({x:b.xmin,y:b.ymax,spatialReference:T}),blockWidth:m,blockHeight:p,pyramidBlockWidth:m,pyramidBlockHeight:p,compression:a,pyramidScalingFactor:v}),F=new c({x:b.width/n,y:b.height/s,spatialReference:T}),k=new Oe({width:n,height:s,extent:b,isPseudoSpatialReference:S,spatialReference:T,bandCount:r,pixelType:h,pixelSize:F,noDataValue:g,storageInfo:_}),C=ei(e,"datafile"),M=ei(e,"IndexFile");return{rasterInfo:k,files:{mrf:this.url,index:M||this.url.replace(".mrf",".idx"),data:C||this.url.replace(".mrf",yi.get(a).blobExtension)}}}async _fetchAuxiliaryData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e?.signal});return ui(t)}catch{return null}}};p([y()],gi.prototype,"_files",void 0),p([y()],gi.prototype,"_storageIndex",void 0),p([y({type:String,json:{write:!0}})],gi.prototype,"datasetFormat",void 0),gi=p([x("esri.layers.support.rasterIO.MRFRaster")],gi);const xi=gi,wi=(e,t)=>e.get(t)?.values,Ii=(e,t)=>e.get(t)?.values?.[0];let bi=class extends Ct{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async open(e){await this.init();const t=e?e.signal:null,{data:i}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:t});if(!i)throw new o("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1,this.url.lastIndexOf("."));const{littleEndian:n,firstIFDPos:s,isBigTiff:r}=Je(i),l=[];await this._readIFDs(l,i,n,s,0,r?8:4,t);const{imageInfo:c,rasterInfo:u}=this._parseIFDs(l),h=ze(l),f=Ae(l);if(this._headerInfo={littleEndian:n,isBigTiff:r,ifds:l,pyramidIFDs:h,maskIFDs:f,...c},this._set("rasterInfo",u),!c.isSupported)throw new o("tiffraster:open","this tiff is not supported: "+c.message);if(!c.tileWidth)throw new o("tiffraster:open","none-tiled tiff is not optimized for access, convert to COG and retry.");u.isPseudoSpatialReference&&a.getLogger(this).warn("The spatial reference for this tiff is unsupported. Only EPSG spatial reference codes and Esri WKTs are supported.");const d=l[0].get("PREDICTOR")?.values?.[0],m=l[0].get("SAMPLEFORMAT")?.values?.[0];if(3===m&&2===d)throw new o("tiffraster:open","unsupported horizontal difference encoding. Predictor=3 is supported for floating point data");const{skipMapInfo:p,skipExtensions:y=[]}=this.ioConfig;if(!y.includes("aux.xml")&&!p){const t=await this._fetchAuxiliaryMetaData(e);null!=t&&this._processPAMInfo(t,u)}y.includes("vat.dbf")||1!==u.bandCount||"u8"!==u.pixelType||p||(u.attributeTable=await this._fetchAuxiliaryTable(e),null!=u.attributeTable&&(u.keyProperties.DataType="thematic")),p&&this.updateImageSpaceRasterInfo(u),this.updateTileInfo()}async fetchRawTile(e,t,i,n={}){if(!this._headerInfo?.isSupported||this.isBlockOutside(e,t,i))return null;const s=await this._fetchRawTiffTile(e,t,i,!1,n);if(null!=s&&this._headerInfo.hasMaskBand){const r=await this._fetchRawTiffTile(e,t,i,!0,n);null!=r&&r.pixels[0]instanceof Uint8Array&&(s.mask=r.pixels[0])}return s}_parseIFDs(e){const t=He(e),{width:i,height:n,tileWidth:s,tileHeight:r,planes:a,pixelType:o,compression:l,firstPyramidLevel:h,maximumPyramidLevel:f,pyramidBlockWidth:m,pyramidBlockHeight:p,tileBoundary:y,affine:g,metadata:x}=t;let w=li(t.extent.spatialReference?.wkt||t.extent.spatialReference?.wkid),I=!!t.isPseudoGeographic;null==w&&(I=!0,w=new d({wkid:3857}));const b=new u({...t.extent,spatialReference:w}),S=new c(b?{x:b.xmin,y:b.ymax,spatialReference:w}:{x:0,y:0}),R=new ke({blockWidth:s,blockHeight:r,pyramidBlockWidth:m,pyramidBlockHeight:p,compression:l,origin:S,firstPyramidLevel:h,maximumPyramidLevel:f,blockBoundary:y}),v=new c({x:(b.xmax-b.xmin)/i,y:(b.ymax-b.ymin)/n,spatialReference:w}),T=x?{BandProperties:x.bandProperties,DataType:x.dataType}:{};let _=null;const F=Ii(e[0],"PHOTOMETRICINTERPRETATION"),k=wi(e[0],"COLORMAP");if(F<=3&&k?.length>3&&k.length%3==0){_=[];const e=k.length/3;for(let t=0;t<e;t++)_.push([t,k[t]>>>8,k[t+e]>>>8,k[t+2*e]>>>8])}const C=new Oe({width:i,height:n,bandCount:a,pixelType:o,pixelSize:v,storageInfo:R,spatialReference:w,isPseudoSpatialReference:I,keyProperties:T,extent:b,colormap:_,statistics:x?x.statistics:null});return g?.length&&(C.nativeExtent=new u({xmin:-.5,ymin:.5-n,xmax:i-.5,ymax:.5,spatialReference:w}),C.transform=new Rt({polynomialOrder:1,forwardCoefficients:[g[2]+g[0]/2,g[5]-g[3]/2,g[0],g[3],-g[1],-g[4]]}),C.extent=C.transform.forwardTransform(C.nativeExtent),C.pixelSize=new c({x:(b.xmax-b.xmin)/i,y:(b.ymax-b.ymin)/n,spatialReference:w}),R.origin.x=-.5,R.origin.y=.5),{imageInfo:t,rasterInfo:C}}_processPAMInfo(e,t){if(t.statistics=e.statistics??t.statistics,t.histograms=e.histograms,e.histograms&&null==t.statistics&&(t.statistics=Ne(e.histograms)),e.transform&&null==t.transform){t.transform=e.transform,t.nativeExtent=t.extent;const i=t.transform.forwardTransform(t.nativeExtent);t.pixelSize=new c({x:(i.xmax-i.xmin)/t.width,y:(i.ymax-i.ymin)/t.height,spatialReference:t.spatialReference}),t.extent=i}t.isPseudoSpatialReference&&e.spatialReference&&(t.spatialReference=e.spatialReference,t.extent.spatialReference=t.nativeExtent.spatialReference=t.storageInfo.origin.spatialReference=t.spatialReference)}async _readIFDs(e,t,i,n,s,r=4,a){if(!n)return null;(n>=t.byteLength||n<0)&&(t=(await this.request(this.url,{range:{from:n+s,to:n+s+this._bufferSize},responseType:"array-buffer",signal:a})).data,s=n+s,n=0);const o=await this._readIFD(t,i,n,s,Le.tiffTags,r,a);if(e.push(o.ifd),!o.nextIFD)return null;await this._readIFDs(e,t,i,o.nextIFD-s,s,r,a)}async _readIFD(e,t,i,n,s=Le.tiffTags,r=4,a){if(!e)return null;const o=We(e,t,i,n,s,r);if(o.success){const i=[];if(o.ifd?.forEach((e=>{e.values||i.push(e)})),i.length>0){const s=i.map((e=>e.offlineOffsetSize)).filter(P),r=Math.min.apply(null,s.map((e=>e[0])));if(Math.min.apply(null,s.map((e=>e[0]+e[1])))-r<=this._bufferSize){const{data:s}=await this.request(this.url,{range:{from:r,to:r+this._bufferSize},responseType:"array-buffer",signal:a});e=s,n=r,i.forEach((i=>Ge(e,t,i,n)))}}if(o.ifd?.has("GEOKEYDIRECTORY")){const i=o.ifd.get("GEOKEYDIRECTORY"),s=i?.values;if(s&&s.length>4){const r=s[0]+"."+s[1]+"."+s[2],o=await this._readIFD(e,t,i.valueOffset+6-n,n,Le.geoKeys,2,a);i.data=o.ifd,i.data&&i.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[r]})}}return o}if(o.requiredBufferSize&&o.requiredBufferSize!==e.byteLength){const i=await this.request(this.url,{range:{from:n,to:n+o.requiredBufferSize+4},responseType:"array-buffer",signal:a});return(e=i.data).byteLength<o.requiredBufferSize?null:this._readIFD(e,t,0,n,Le.tiffTags,4,a)}}async _fetchRawTiffTile(e,t,i,n,s={}){const r=this._getTileLocation(e,t,i,n);if(!r)return null;const{ranges:a,actualTileWidth:o,actualTileHeight:l,ifd:c}=r,u=a.map((e=>this.request(this.url,{range:e,responseType:"array-buffer",signal:s.signal}))),h=await Promise.all(u),f=h.map((e=>e.data.byteLength)).reduce(((e,t)=>e+t)),d=1===h.length?h[0].data:new ArrayBuffer(f),m=[0],p=[0];if(h.length>1){const e=new Uint8Array(d);for(let t=0,i=0;t<h.length;t++){const n=h[t].data;e.set(new Uint8Array(n),i),m[t]=i,i+=n.byteLength,p[t]=n.byteLength}}const{blockWidth:y,blockHeight:g}=this.getBlockWidthHeight(e),x=await this.decodePixelBlock(d,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:c,offsets:m,sizes:p},width:y,height:g,planes:null,pixelType:null});if(null==x)return null;let w,I,b;if(o!==y||l!==g){let e=x.mask;if(e)for(w=0;w<g;w++)if(b=w*y,w<l)for(I=o;I<y;I++)e[b+I]=0;else for(I=0;I<y;I++)e[b+I]=0;else for(e=new Uint8Array(y*g),x.mask=e,w=0;w<l;w++)for(b=w*y,I=0;I<o;I++)e[b+I]=1}return x}_getTileLocation(e,t,i,n=!1){const{firstPyramidLevel:s,blockBoundary:r}=this.rasterInfo.storageInfo,a=0===e?0:e-(s-1),{_headerInfo:o}=this;if(!o)return null;const l=n?o.maskIFDs[a]:0===a?o?.ifds[0]:o?.pyramidIFDs[a-1];if(!l)return null;const c=je(l,o),u=wi(l,"TILEOFFSETS");if(void 0===u)return null;const h=wi(l,"TILEBYTECOUNTS"),{minRow:f,minCol:d,maxRow:m,maxCol:p}=r[a];if(t>m||i>p||t<f||i<d)return null;const y=Ii(l,"IMAGEWIDTH"),g=Ii(l,"IMAGELENGTH"),x=Ii(l,"TILEWIDTH"),w=Ii(l,"TILELENGTH"),I=[];if(c){const{bandCount:e}=this.rasterInfo;for(let n=0;n<e;n++){const e=n*(m+1)*(p+1)+t*(p+1)+i;I[n]={from:u[e],to:u[e]+h[e]-1}}}else{const e=t*(p+1)+i;I.push({from:u[e],to:u[e]+h[e]-1})}for(let b=0;b<I.length;b++)if(null==I[b].from||!I[b].to||I[b].to<0)return null;return{ranges:I,ifd:l,actualTileWidth:i===p&&y%x||x,actualTileHeight:t===m&&g%w||w}}async _fetchAuxiliaryMetaData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e?.signal});return ui(t)}catch{return null}}async _fetchAuxiliaryTable(e){try{const{data:t}=await this.request(this.url+".vat.dbf",{responseType:"array-buffer",signal:e?.signal}),i=Et.parse(t);return i?.recordSet?S.fromJSON(i.recordSet):null}catch{return null}}};p([y()],bi.prototype,"_files",void 0),p([y()],bi.prototype,"_headerInfo",void 0),p([y()],bi.prototype,"_bufferSize",void 0),p([y({type:String,json:{write:!0}})],bi.prototype,"datasetFormat",void 0),bi=p([x("esri.layers.support.rasterDatasets.TIFFRaster")],bi);const Si=bi,Ri=new Map;Ri.set("CRF",{desc:"Cloud Raster Format",constructor:At}),Ri.set("MRF",{desc:"Meta Raster Format",constructor:xi}),Ri.set("TIFF",{desc:"GeoTIFF",constructor:Si}),Ri.set("RasterTileServer",{desc:"Raster Tile Server",constructor:mi}),Ri.set("JPG",{desc:"JPG Raster Format",constructor:fi}),Ri.set("PNG",{desc:"PNG Raster Format",constructor:fi}),Ri.set("GIF",{desc:"GIF Raster Format",constructor:fi}),Ri.set("BMP",{desc:"BMP Raster Format",constructor:fi}),Ri.set("CovJSON",{desc:"COVJSON Raster Format",constructor:Kt}),Ri.set("MEMORY",{desc:"In Memory Raster Format",constructor:Xt});class vi{static get supportedFormats(){const e=new Set;return Ri.forEach(((t,i)=>e.add(i))),e}static async open(e){const{url:t,ioConfig:i,source:n,sourceJSON:s}=e;let r=e.datasetFormat??i?.datasetFormat;null==r&&(t.includes(".")?r=t.slice(t.lastIndexOf(".")+1).toUpperCase():"coverage"===n?.type?.toLowerCase()?r="CovJSON":n?.extent&&n.pixelblocks&&(r="MEMORY")),"OVR"===r||"TIF"===r?r="TIFF":"JPG"===r||"JPEG"===r||"JFIF"===r?r="JPG":"COVJSON"===r&&(r="CovJSON"),t.toLowerCase().includes("/imageserver")&&!t.toLowerCase().includes("/wcsserver")&&(r="RasterTileServer");const a={url:t,source:n,sourceJSON:s,datasetFormat:r,ioConfig:i??{bandIds:null,sampling:null}};if(Object.keys(a).forEach((e=>{null==a[e]&&delete a[e]})),r){if(!this.supportedFormats.has(r))throw new o("rasterfactory:open","not a supported format "+r);if("CRF"===r&&!i?.enableCRF)throw new o("rasterfactory:open",`cannot open raster: ${t}`);const n=new(Ri.get(r).constructor)(a);return await n.open({signal:e.signal}),n}const l=Array.from(Ri.keys()).filter((e=>"CovJSON"!==e&&"Memory"!==e));let c=0;const u=()=>{if(r=l[c++],!r)return null;if("CRF"===r&&!i?.enableCRF)return null;const t=new(Ri.get(r).constructor)(a);return t.open({signal:e.signal}).then((()=>t)).catch((()=>u()))};return u()}static register(e,t,i){Ri.has(e.toUpperCase())||Ri.set(e.toUpperCase(),{desc:t,constructor:i})}}let Ti=class extends(E(J(z(A(H(Nt(L(W(G(j(q(ie)))))))))))){constructor(...e){super(...e),this._primaryRasters=[],this.bandIds=null,this.interpolation=null,this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null,this.source=void 0,this._debouncedSaveOperations=U((async(e,i,n)=>{const{save:s,saveAs:r}=await I((()=>t.import("./imageryUtils-legacy.js")),void 0,t.meta.url);switch(e){case Y.SAVE:return s(this,i);case Y.SAVE_AS:return r(this,n,i)}}))}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},e).catch(V).then((()=>this._openRaster(t)))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){const e=[new $({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"}),new $({name:"Raster.ServicePixelValue.Raw",alias:"Raw Pixel Value",domain:null,editable:!1,length:50,type:"string"})],{serviceRasterInfo:t}=this,i=t?.attributeTable,n=null!=i?i.fields:null;if(n){const t=n.filter((e=>"oid"!==e.type&&"value"!==e.name.toLowerCase())).map((e=>{const t=e.clone();return t.name="Raster."+e.name,t}));e.push(...t)}const s=t?.dataType,r=t?.multidimensionalInfo;if(("vector-magdir"===s||"vector-uv"===s)&&null!=r){const t=r.variables[0].unit?.trim(),i="Magnitude"+(t?` (${t})`:"");e.push(new $({name:"Raster.Magnitude",alias:i,domain:null,editable:!1,type:"double"})),e.push(new $({name:"Raster.Direction",alias:"Direction (°)",domain:null,editable:!1,type:"double"}))}return e}createPopupTemplate(e){const{rasterFields:t}=this,i=new Set(t.map((({name:e})=>e)).filter((e=>"raster.servicepixelvalue.raw"!==e.toLowerCase())));return X({fields:t,title:this.title},{...e,visibleFieldNames:i})}async generateRasterInfo(e,t){if(!(e=l(se,e)))return this.serviceRasterInfo;try{const{rasterInfo:i}=await this._openFunctionRaster(e,t);return i}catch(Lt){if(Lt instanceof o)throw Lt;throw new o("imagery-tile-layer","the given raster function is not supported")}}async save(e){return this._debouncedSaveOperations(Y.SAVE,e)}async saveAs(e,t){return this._debouncedSaveOperations(Y.SAVE_AS,t,e)}write(e,t){const i=this._primaryRasters[0]??this.raster;if(this.loaded?"RasterTileServer"===i.datasetFormat&&("Raster"===i.tileType||"Map"===i.tileType):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(e,t);if(t?.messages){const e=`${t.origin}/${t.layerContainerType||"operational-layers"}`;t.messages.push(new o("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${e}'`,{layer:this}))}return null}async _openRaster(e){let t=!1;if(this.raster)await this._openFromRaster(this.raster,e),t="Function"===this.raster.datasetFormat;else{const{url:t,rasterFunction:i,source:n}=this;if(!t&&!n)throw new o("imagery-tile-layer:open","missing url or source parameter");n?await this._openFromSource(n,e):i?await this._openFromUrlWithRasterFunction(t,i,e):await this._openFromUrl(t,e)}const i=this.raster.rasterInfo;if(!i)throw new o("imagery-tile-layer:load","cannot load resources on "+this.url);if(this._set("serviceRasterInfo",t?i:this._primaryRasters[0].rasterInfo),this._set("spatialReference",i.spatialReference),this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,null!=this.sourceJSON){const e="Map"===this.raster.tileType&&null!=this.sourceJSON.minLOD&&null!=this.sourceJSON.maxLOD?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(e,{origin:"service"})}else this.read({tileInfo:this.serviceRasterInfo.storageInfo.tileInfo.toJSON()},{origin:"service"});this.title||(this.title=this.raster.datasetName),"Map"===this.raster.tileType&&(this.popupEnabled=!1),this._configDefaultSettings(),this.addHandles(K((()=>this.customParameters),(e=>{this.raster&&(this.raster.ioConfig.customFetchParameters=e)})))}async _openFromRaster(e,t){e.rasterInfo||await e.open({signal:t}),this._primaryRasters="Function"===e.datasetFormat?e.primaryRasters.rasters:[e],this.url||(this.url=this._primaryRasters[0].url)}async _openFromUrlWithRasterFunction(e,t,i){const n=[e];t&&Tt(t.toJSON(),n);const s=await Promise.all(n.map((e=>vi.open({url:e,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:i})))),r=s.findIndex((e=>null==e));if(r>-1)throw new o("imagery-tile-layer:open",`cannot open raster: ${n[r]}`);return this._primaryRasters=s,this._initializeWithFunctionRaster(t)}async _openFromUrl(e,t){const i=await vi.open({url:e,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:t});if(null==i)throw new o("imagery-tile-layer:open",`cannot open raster: ${e}`);this._primaryRasters=[i],this.raster=i}async _openFromSource(e,t){const i="the tiled imagery data source is not supported",n="coverage"===e.type?.toLowerCase()?"CovJSON":e.extent&&e.pixelBlock?"MEMORY":null;if(!n)throw new o("imagery-tile-layer:open",i);"MEMORY"===n&&(e={extent:e.extent,pixelBlocks:[e.pixelBlock]});const s=await vi.open({url:"",source:e,datasetFormat:n,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:t});if(null==s)throw new o("imagery-tile-layer:open",i);this._primaryRasters=[s],this.rasterFunction?await this._initializeWithFunctionRaster(this.rasterFunction):this.raster=s}async _openFunctionRaster(e,t){const i={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach((e=>i[e.url]=e));const n=It(e.functionDefinition?.toJSON()??e.toJSON(),i),s=new Dt({rasterFunction:n});return await s.open(t),s}async _initializeWithFunctionRaster(e,t){try{this.raster=await this._openFunctionRaster(e,t)}catch(Lt){Lt instanceof o&&a.getLogger(this).error("imagery-tile-layer:open",Lt.message),a.getLogger(this).warn("imagery-tile-layer:open","the raster function cannot be applied and is removed"),this._set("rasterFunction",null),this.raster=this._primaryRasters[0]}}};p([y({clonable:!1})],Ti.prototype,"_primaryRasters",void 0),p([y({type:[Q],json:{write:{overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType||"0,1,2"!==this.bandIds?.join(",")}}}}})],Ti.prototype,"bandIds",void 0),p([y({json:{write:{overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType||"bilinear"!==this.interpolation}}}}}),Z(ge)],Ti.prototype,"interpolation",void 0),p([y(ee)],Ti.prototype,"legendEnabled",void 0),p([y({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],Ti.prototype,"isReference",void 0),p([y({type:["show","hide"]})],Ti.prototype,"listMode",void 0),p([y({json:{read:!0,write:!0}})],Ti.prototype,"blendMode",void 0),p([y()],Ti.prototype,"sourceJSON",void 0),p([y({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],Ti.prototype,"version",void 0),p([y({readOnly:!0,json:{read:!1}})],Ti.prototype,"type",void 0),p([y({type:["ArcGISTiledImageServiceLayer"]})],Ti.prototype,"operationalLayerType",void 0),p([y({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(e,t)=>!t.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType}},writer(e,t,i){t[i]=!e}}}})],Ti.prototype,"popupEnabled",void 0),p([y({type:te,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType}}}}})],Ti.prototype,"popupTemplate",void 0),p([y({readOnly:!0})],Ti.prototype,"defaultPopupTemplate",null),p([y({readOnly:!0,type:[$]})],Ti.prototype,"fields",void 0),p([y({readOnly:!0,type:[$]})],Ti.prototype,"rasterFields",null),p([y({constructOnly:!0})],Ti.prototype,"source",void 0),Ti=p([x("esri.layers.ImageryTileLayer")],Ti),e("default",Ti)}}}));
