System.register(["./index-legacy.js","./query-legacy.js","./pbfQueryUtils-legacy.js","./pbf-legacy.js","./OptimizedGeometry-legacy.js","./OptimizedFeatureSet-legacy.js"],(function(e,t){"use strict";var o,r,n,s,c,a;return{setters:[e=>{o=e.X,r=e.dI,n=e.g4,s=e.ay,c=e.E},e=>{a=e.t},null,null,null,null],execute:function(){function t(e,t){const o=e.toJSON();return o.objectIds&&(o.objectIds=o.objectIds.join(",")),o.orderByFields&&(o.orderByFields=o.orderByFields.join(",")),o.outFields&&!t?.returnCountOnly?o.outFields.includes("*")?o.outFields="*":o.outFields=o.outFields.join(","):delete o.outFields,o.outSR&&(o.outSR=r(o.outSR)),o.dynamicDataSource&&(o.layer=JSON.stringify({source:o.dynamicDataSource}),delete o.dynamicDataSource),o}async function u(e,t,o){const r=await d(e,t,o),n=r.data,s=n.geometryType,c=n.spatialReference,a={};for(const u of n.relatedRecordGroups){const e={fields:void 0,objectIdFieldName:void 0,geometryType:s,spatialReference:c,hasZ:!!n.hasZ,hasM:!!n.hasM,features:u.relatedRecords};if(null!=u.objectId)a[u.objectId]=e;else for(const t of Object.keys(u))"relatedRecords"!==t&&(a[u[t]]=e)}return{...r,data:a}}async function d(e,r,n={},s){const c=a({...e.query,f:"json",...s,...t(r,s)});return o(e.path+"/queryRelatedRecords",{...n,query:{...n.query,...c}})}e({executeRelationshipQuery:async function(e,t,o){t=n.from(t);const r=s(e);return u(r,t,o).then((e=>{const t=e.data,o={};return Object.keys(t).forEach((e=>o[e]=c.fromJSON(t[e]))),o}))},executeRelationshipQueryForCount:async function(e,t,o){t=n.from(t);const r=s(e);return async function(e,t,o){const r=await d(e,t,o,{returnCountOnly:!0}),n=r.data,s={};for(const c of n.relatedRecordGroups)null!=c.objectId&&(s[c.objectId]=c.count);return{...r,data:s}}(r,t,{...o}).then((e=>e.data))}})}}}));
