System.register(["./index-legacy.js"],(function(e,t){"use strict";var o,r,i,s,l,n,a,y,p,d,u,c,h,S,m,g,v,f,b,C,x,G,w,P,_;return{setters:[e=>{o=e.bs,r=e.dd,i=e.de,s=e.df,l=e.bt,n=e.dg,a=e.bz,y=e.bx,p=e.X,d=e.aJ,u=e.ap,c=e.x,h=e.y,S=e.bD,m=e.aQ,g=e.dh,v=e.di,f=e.dj,b=e.z,C=e.dk,x=e.dl,G=e.dm,w=e.dn,P=e.dp,_=e.bw}],execute:function(){const t=["atom","xml"],j={base:C,key:"type",typeMap:{"simple-line":x},errorContext:"symbol"},k={base:C,key:"type",typeMap:{"picture-marker":G,"simple-marker":w},errorContext:"symbol"},R={base:C,key:"type",typeMap:{"simple-fill":P},errorContext:"symbol"};let F=class extends(o(r(i(s(l(n(_))))))){constructor(...e){super(...e),this.description=null,this.fullExtent=null,this.legendEnabled=!0,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.operationalLayerType="GeoRSS",this.url=null,this.type="geo-rss"}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}readFeatureCollections(e,t){return t.featureCollection.layers.forEach((e=>{const t=e.layerDefinition.drawingInfo.renderer.symbol;t&&"esriSFS"===t.type&&t.outline?.style.includes("esriSFS")&&(t.outline.style="esriSLSSolid")})),t.featureCollection.layers}get hasPoints(){return this._hasGeometry("esriGeometryPoint")}get hasPolylines(){return this._hasGeometry("esriGeometryPolyline")}get hasPolygons(){return this._hasGeometry("esriGeometryPolygon")}get title(){const e=this._get("title");return e&&"defaults"!==this.originOf("title")?e:this.url?a(this.url,t)||"GeoRSS":e||""}set title(e){this._set("title",e)}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},e).catch(y).then((()=>this._fetchService(t))).then((e=>{this.read(e,{origin:"service"})}))),Promise.resolve(this)}async hasDataChanged(){const e=await this._fetchService();return this.read(e,{origin:"service",ignoreDefaults:!0}),!0}async _fetchService(e){const t=this.spatialReference,{data:o}=await p(u.geoRSSServiceUrl,{query:{url:this.url,refresh:!!this.loaded||void 0,outSR:d(t)?void 0:t.wkid??JSON.stringify(t)},signal:e});return o}_hasGeometry(e){return this.featureCollections?.some((t=>t.featureSet?.geometryType===e&&t.featureSet.features?.length>0))??!1}};c([h()],F.prototype,"description",void 0),c([h()],F.prototype,"featureCollections",void 0),c([S("service","featureCollections",["featureCollection.layers"])],F.prototype,"readFeatureCollections",null),c([h({type:m,json:{name:"lookAtExtent"}})],F.prototype,"fullExtent",void 0),c([h(g)],F.prototype,"id",void 0),c([h(v)],F.prototype,"legendEnabled",void 0),c([h({types:j,json:{write:!0}})],F.prototype,"lineSymbol",void 0),c([h({type:["show","hide"]})],F.prototype,"listMode",void 0),c([h({types:k,json:{write:!0}})],F.prototype,"pointSymbol",void 0),c([h({types:R,json:{write:!0}})],F.prototype,"polygonSymbol",void 0),c([h({type:["GeoRSS"]})],F.prototype,"operationalLayerType",void 0),c([h(f)],F.prototype,"url",void 0),c([h({json:{origins:{service:{read:{source:"name",reader:e=>e||void 0}}}}})],F.prototype,"title",null),c([h({readOnly:!0,json:{read:!1},value:"geo-rss"})],F.prototype,"type",void 0),F=c([b("esri.layers.GeoRSSLayer")],F),e("default",F)}}}));
