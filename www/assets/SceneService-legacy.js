System.register(["./index-legacy.js","./originUtils-legacy.js","./jsonContext-legacy.js","./resourceUtils-legacy3.js","./saveAPIKeyUtils-legacy.js","./saveUtils-legacy.js"],(function(e,t){"use strict";var r,i,a,s,n,o,l,p,d,c,u,h,y,m,f,g,v,S,w,x,I,_,b,j,N,A,E,R;return{setters:[e=>{r=e.X,i=e.s,a=e.x,s=e.y,n=e.dh,o=e.bc,l=e.bD,p=e.aQ,d=e.h9,c=e.dj,u=e.dN,h=e.z,y=e.A,m=e.fS,f=e.p,g=e.ha,v=e.hb,S=e.w,w=e.hc,x=e.ao,I=e.am,_=e.an},e=>{b=e.i},e=>{j=e.o},e=>{N=e.p,A=e.n},e=>{E=e.i},e=>{R=e.t}],execute:function(){async function t(e,t,a,s,n,o,l){let p=null;if(null!=a){const t=`${e}/nodepages/`,i=t+Math.floor(a.rootIndex/a.nodesPerPage);try{return{type:"page",rootPage:(await r(i,{query:{f:"json",...s,token:n},responseType:"json",signal:l})).data,rootIndex:a.rootIndex,pageSize:a.nodesPerPage,lodMetric:a.lodSelectionMetricType,urlPrefix:t}}catch(v){null!=o&&o.warn("#fetchIndexInfo()","Failed to load root node page. Falling back to node documents.",i,v),p=v}}if(!t)return null;const d=t?.split("/").pop(),c=`${e}/nodes/`,u=c+d;try{return{type:"node",rootNode:(await r(u,{query:{f:"json",...s,token:n},responseType:"json",signal:l})).data,urlPrefix:c}}catch(v){throw new i("sceneservice:root-node-missing","Root node missing.",{pageError:p,nodeError:v,url:u})}}e("r",t),e("L",(e=>{let U=class extends e{constructor(){super(...arguments),this.spatialReference=null,this.fullExtent=null,this.heightModelInfo=null,this.minScale=0,this.maxScale=0,this.version={major:Number.NaN,minor:Number.NaN,versionString:""},this.copyright=null,this.sublayerTitleMode="item-title",this.title=null,this.layerId=null,this.indexInfo=null,this._debouncedSaveOperations=y((async(e,t,r)=>{switch(e){case O.SAVE:return this._save(t);case O.SAVE_AS:return this._saveAs(r,t)}}))}readSpatialReference(e,t){return this._readSpatialReference(t)}_readSpatialReference(e){if(null!=e.spatialReference)return o.fromJSON(e.spatialReference);const t=e.store,r=t.indexCRS||t.geographicCRS,i=r&&parseInt(r.substring(r.lastIndexOf("/")+1,r.length),10);return null!=i?new o(i):null}readFullExtent(e,t,r){if(null!=e&&"object"==typeof e){const i=null==e.spatialReference?{...e,spatialReference:this._readSpatialReference(t)}:e;return p.fromJSON(i,r)}const i=t.store,a=this._readSpatialReference(t);return null==a||null==i?.extent||!Array.isArray(i.extent)||i.extent.some((e=>e<T))?null:new p({xmin:i.extent[0],ymin:i.extent[1],xmax:i.extent[2],ymax:i.extent[3],spatialReference:a})}parseVersionString(e){const t={major:Number.NaN,minor:Number.NaN,versionString:e},r=e.split(".");return r.length>=2&&(t.major=parseInt(r[0],10),t.minor=parseInt(r[1],10)),t}readVersion(e,t){const r=t.store,i=null!=r.version?r.version.toString():"";return this.parseVersionString(i)}readTitlePortalItem(e){return"item-title"!==this.sublayerTitleMode?void 0:e}readTitleService(e,t){const r=this.portalItem?.title;if("item-title"===this.sublayerTitleMode)return m(this.url,t.name);let i=t.name;if(!i&&this.url){const e=f(this.url);null!=e&&(i=e.title)}return"item-title-and-service-name"===this.sublayerTitleMode&&r&&(i=r+" - "+i),g(i)}set url(e){const t=v({layer:this,url:e,nonStandardUrlAllowed:!1,logger:S.getLogger(this)});this._set("url",t.url),null!=t.layerId&&this._set("layerId",t.layerId)}writeUrl(e,t,r,i){w(this,e,"layers",t,i)}get parsedUrl(){const e=this._get("url"),t=x(e);return null!=this.layerId&&(t.path=`${t.path}/layers/${this.layerId}`),t}async _fetchIndexAndUpdateExtent(e,r){this.indexInfo=t(this.parsedUrl.path,this.rootNode,e,this.customParameters,this.apiKey,S.getLogger(this),r),null==this.fullExtent||this.fullExtent.hasZ||this._updateExtent(await this.indexInfo)}_updateExtent(e){if("page"===e?.type){const t=e.rootIndex%e.pageSize,r=e.rootPage?.nodes?.[t];if(null==r?.obb?.center||null==r.obb.halfSize)throw new i("sceneservice:invalid-node-page","Invalid node page.");if(r.obb.center[0]<T||null==this.fullExtent||this.fullExtent.hasZ)return;const a=r.obb.halfSize,s=r.obb.center[2],n=Math.sqrt(a[0]*a[0]+a[1]*a[1]+a[2]*a[2]);this.fullExtent.zmin=s-n,this.fullExtent.zmax=s+n}else if("node"===e?.type){const t=e.rootNode?.mbs;if(!Array.isArray(t)||4!==t.length||t[0]<T)return;const r=t[2],i=t[3],{fullExtent:a}=this;a&&(a.zmin=r-i,a.zmax=r+i)}}async _fetchService(e){if(null==this.url)throw new i("sceneservice:url-not-set","Scene service can not be loaded without valid portal item or url");if(null==this.layerId&&/SceneServer\/*$/i.test(this.url)){const t=await this._fetchFirstLayerId(e);null!=t&&(this.layerId=t)}return this._fetchServiceLayer(e)}async _fetchFirstLayerId(e){const t=await r(this.url,{query:{f:"json",...this.customParameters,token:this.apiKey},responseType:"json",signal:e});if(t.data&&Array.isArray(t.data.layers)&&t.data.layers.length>0)return t.data.layers[0].id}async _fetchServiceLayer(e){const t=await r(this.parsedUrl?.path??"",{query:{f:"json",...this.customParameters,token:this.apiKey},responseType:"json",signal:e});t.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));let i=!1;if(t.data.layerType&&"Voxel"===t.data.layerType&&(i=!0),i)return this._fetchVoxelServiceLayer();const a=t.data;this.read(a,this._getServiceContext()),this.validateLayer(a)}async _fetchVoxelServiceLayer(e){const t=(await r(this.parsedUrl?.path+"/layer",{query:{f:"json",...this.customParameters,token:this.apiKey},responseType:"json",signal:e})).data;this.read(t,this._getServiceContext()),this.validateLayer(t)}_getServiceContext(){return{origin:"service",portalItem:this.portalItem,portal:this.portalItem?.portal,url:this.parsedUrl}}async _ensureLoadBeforeSave(){await this.load(),"beforeSave"in this&&"function"==typeof this.beforeSave&&await this.beforeSave()}validateLayer(e){}_updateTypeKeywords(e,t,r){e.typeKeywords||(e.typeKeywords=[]);const i=t.getTypeKeywords();for(const a of i)e.typeKeywords.push(a);e.typeKeywords&&(e.typeKeywords=e.typeKeywords.filter(((e,t,r)=>r.indexOf(e)===t)),r===P.newItem&&(e.typeKeywords=e.typeKeywords.filter((e=>"Hosted Service"!==e))))}async _saveAs(e,t){const r={...K,...t};let a=I.from(e);if(!a)throw new i("sceneservice:portal-item-required","_saveAs() requires a portal item to save to");E(a),a.id&&(a=a.clone(),a.id=null);const s=a.portal||_.getDefault();await this._ensureLoadBeforeSave(),a.type=L,a.portal=s;const n=j(a,"portal-item",!0),o={layers:[this.write({},n)]};return await Promise.all(n.resources.pendingOperations??[]),await this._validateAgainstJSONSchema(o,n,r),a.url=this.url,a.title||(a.title=this.title),this._updateTypeKeywords(a,r,P.newItem),await s.signIn(),await(s.user?.addItem({item:a,folder:r?.folder,data:o})),await N(this.resourceReferences,n),this.portalItem=a,b(n),n.portalItem=a,a}async _save(e){const t={...K,...e};if(!this.portalItem)throw new i("sceneservice:portal-item-not-set","Portal item to save to has not been set on this SceneService");if(E(this.portalItem),this.portalItem.type!==L)throw new i("sceneservice:portal-item-wrong-type",`Portal item needs to have type "${L}"`);await this._ensureLoadBeforeSave();const r=j(this.portalItem,"portal-item",!0),a={layers:[this.write({},r)]};return await Promise.all(r.resources.pendingOperations??[]),await this._validateAgainstJSONSchema(a,r,t),this.portalItem.url=this.url,this.portalItem.title||(this.portalItem.title=this.title),this._updateTypeKeywords(this.portalItem,t,P.existingItem),await A(this.portalItem,a,this.resourceReferences,r),b(r),this.portalItem}async _validateAgainstJSONSchema(e,t,r){const a=r?.validationOptions;R(t,{errorName:"sceneservice:save"},{ignoreUnsupported:a?.ignoreUnsupported,supplementalUnsupportedErrors:["scenemodification:unsupported"]});const s=a?.enabled,n=null;if(s&&n){const t=(await n()).validate(e,r.portalItemLayerType);if(!t.length)return;const s=`Layer item did not validate:\n${t.join("\n")}`;if(S.getLogger(this).error(`_validateAgainstJSONSchema(): ${s}`),"throw"===a.failPolicy){const e=t.map((e=>new i("sceneservice:schema-validation",e)));throw new i("sceneservice-validate:error","Failed to save layer item due to schema validation, see `details.errors`.",{validationErrors:e})}}}};return a([s(n)],U.prototype,"id",void 0),a([s({type:o})],U.prototype,"spatialReference",void 0),a([l("spatialReference",["spatialReference","store.indexCRS","store.geographicCRS"])],U.prototype,"readSpatialReference",null),a([s({type:p})],U.prototype,"fullExtent",void 0),a([l("fullExtent",["fullExtent","store.extent","spatialReference","store.indexCRS","store.geographicCRS"])],U.prototype,"readFullExtent",null),a([s({readOnly:!0,type:d})],U.prototype,"heightModelInfo",void 0),a([s({type:Number,json:{name:"layerDefinition.minScale",write:!0,origins:{service:{read:{source:"minScale"},write:!1}}}})],U.prototype,"minScale",void 0),a([s({type:Number,json:{name:"layerDefinition.maxScale",write:!0,origins:{service:{read:{source:"maxScale"},write:!1}}}})],U.prototype,"maxScale",void 0),a([s({readOnly:!0})],U.prototype,"version",void 0),a([l("version",["store.version"])],U.prototype,"readVersion",null),a([s({type:String,json:{read:{source:"copyrightText"}}})],U.prototype,"copyright",void 0),a([s({type:String,json:{read:!1}})],U.prototype,"sublayerTitleMode",void 0),a([s({type:String})],U.prototype,"title",void 0),a([l("portal-item","title")],U.prototype,"readTitlePortalItem",null),a([l("service","title",["name"])],U.prototype,"readTitleService",null),a([s({type:Number,json:{origins:{service:{read:{source:"id"}},"portal-item":{write:{target:"id",isRequired:!0,ignoreOrigin:!0},read:!1}}}})],U.prototype,"layerId",void 0),a([s(c)],U.prototype,"url",null),a([u("url")],U.prototype,"writeUrl",null),a([s()],U.prototype,"parsedUrl",null),a([s({readOnly:!0})],U.prototype,"store",void 0),a([s({type:String,readOnly:!0,json:{read:{source:"store.rootNode"}}})],U.prototype,"rootNode",void 0),U=a([h("esri.layers.mixins.SceneService")],U),U}));const T=-1e38;var P;!function(e){e[e.existingItem=0]="existingItem",e[e.newItem=1]="newItem"}(P||(P={}));const L="Scene Service",K={getTypeKeywords:()=>[],portalItemLayerType:"unknown",validationOptions:{enabled:!0,ignoreUnsupported:!1,failPolicy:"throw"}};var O;e("P",O),function(e){e[e.SAVE=0]="SAVE",e[e.SAVE_AS=1]="SAVE_AS"}(O||e("P",O={}))}}}));
