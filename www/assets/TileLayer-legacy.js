System.register(["./index-legacy.js","./ArcGISCachedService-legacy.js","./SublayersOwner-legacy.js","./imageBitmapUtils-legacy.js","./TileInfoTilemapCache-legacy.js","./TilemapCache-legacy.js","./ByteSizeUnit-legacy.js","./QueryTask-legacy.js","./infoFor3D-legacy.js","./executeForIds-legacy.js","./query-legacy.js","./pbfQueryUtils-legacy.js","./pbf-legacy.js","./OptimizedGeometry-legacy.js","./OptimizedFeatureSet-legacy.js","./executeQueryJSON-legacy.js","./executeQueryPBF-legacy.js","./featureConversionUtils-legacy.js","./sublayerUtils-legacy.js"],(function(e,r){"use strict";var t,s,l,i,a,n,o,c,u,p,d,h,y,g,f,v,m,S,_,b,T,j,w,O,U,R,P,W,B,C,N,A,I;return{setters:[e=>{t=e.bs,s=e.bt,l=e.de,i=e.df,a=e.dE,n=e.dg,o=e.dd,c=e.dF,u=e.dG,p=e.bx,d=e.bc,h=e.ao,y=e.X,g=e.dY,f=e.dK,v=e.s,m=e.p,S=e.dZ,_=e.d4,b=e.cN,T=e.x,j=e.y,w=e.bD,O=e.dN,U=e.d_,R=e.dj,P=e.z,W=e.bw},e=>{B=e.p},e=>{C=e.m,N=e.f,A=e.Y},e=>{I=e.o},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],execute:function(){var r;const L=["Canvas/World_Dark_Gray_Base","Canvas/World_Dark_Gray_Reference","Canvas/World_Light_Gray_Base","Canvas/World_Light_Gray_Reference","Elevation/World_Hillshade","Elevation/World_Hillshade_Dark","Ocean/World_Ocean_Base","Ocean/World_Ocean_Reference","Ocean_Basemap","Reference/World_Boundaries_and_Places","Reference/World_Boundaries_and_Places_Alternate","Reference/World_Transportation","World_Imagery","World_Street_Map","World_Topo_Map"];let D=r=class extends(t(s(C(B(N(l(i(a(n(o(c(u(W))))))))))))){constructor(...e){super(...e),this.listMode="show",this.isReference=null,this.operationalLayerType="ArcGISTiledMapServiceLayer",this.resampling=!0,this.sourceJSON=null,this.spatialReference=null,this.path=null,this.sublayers=null,this.type="tile",this.url=null}normalizeCtorArgs(e,r){return"string"==typeof e?{url:e,...r}:e}load(e){const r=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(p).then((()=>this._fetchService(r)))),Promise.resolve(this)}get attributionDataUrl(){const e=this.parsedUrl?.path.toLowerCase();return e?this._getDefaultAttribution(this._getMapName(e)):null}readSpatialReference(e,r){return(e=e||r.tileInfo?.spatialReference)&&d.fromJSON(e)}writeSublayers(e,r,t,s){if(!this.loaded||!e)return;const l=e.slice().reverse().flatten((({sublayers:e})=>e&&e.toArray().reverse())).toArray(),i=[],a={writeSublayerStructure:!1,...s};l.forEach((e=>{const r=e.write({},a);i.push(r)})),i.some((e=>Object.keys(e).length>1))&&(r.layers=i)}get tileServers(){return this._getDefaultTileServers(this.parsedUrl?.path)}castTileServers(e){return Array.isArray(e)?e.map((e=>h(e).path)):null}fetchTile(e,r,t,s={}){const{signal:l}=s,i=this.getTileUrl(e,r,t),a={responseType:"image",signal:l,query:{...this.refreshParameters}};return y(i,a).then((e=>e.data))}async fetchImageBitmapTile(e,t,s,l={}){const{signal:i}=l;if(this.fetchTile!==r.prototype.fetchTile){const r=await this.fetchTile(e,t,s,l);return I(r,e,t,s,i)}const a=this.getTileUrl(e,t,s),n={responseType:"blob",signal:i,query:{...this.refreshParameters}},{data:o}=await y(a,n);return I(o,e,t,s,i)}getTileUrl(e,r,t){const s=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,l=g({...this.parsedUrl?.query,blankTile:!s&&null,...this.customParameters,token:this.apiKey}),i=this.tileServers;return`${i&&i.length?i[r%i.length]:this.parsedUrl?.path}/tile/${e}/${r}/${t}${l?"?"+l:""}`}loadAll(){return f(this,(e=>{e(this.allSublayers)}))}_fetchService(e){return new Promise(((r,t)=>{if(this.sourceJSON){if(null!=this.sourceJSON.bandCount&&null!=this.sourceJSON.pixelSizeX)throw new v("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");return void r({data:this.sourceJSON})}if(!this.parsedUrl)throw new v("tile-layer:undefined-url","layer's url is not defined");const s=m(this.parsedUrl.path);if(null!=s&&"ImageServer"===s.serverType)throw new v("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");y(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},responseType:"json",signal:e}).then(r,t)})).then((r=>{let t=this.url;if(r.ssl&&(t=this.url=t.replace(/^http:/i,"https:")),this.sourceJSON=r.data,this.read(r.data,{origin:"service",url:this.parsedUrl}),10.1===this.version&&!S(t))return this._fetchServerVersion(t,e).then((e=>{this.read({currentVersion:e})})).catch((()=>{}))}))}_fetchServerVersion(e,r){if(!_(e))return Promise.reject();const t=e.replace(/(.*\/rest)\/.*/i,"$1")+"/info";return y(t,{query:{f:"json",...this.customParameters,token:this.apiKey},responseType:"json",signal:r}).then((e=>{if(e.data&&e.data.currentVersion)return e.data.currentVersion;throw new v("tile-layer:version-not-available")}))}_getMapName(e){const r=e.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^\/]+(\/[^\/]+)*)\/mapserver/i);return r?r[2]:void 0}_getDefaultAttribution(e){if(null==e)return null;let r;e=e.toLowerCase();for(let t=0,s=L.length;t<s;t++)if(r=L[t],r.toLowerCase().includes(e))return b("//static.arcgis.com/attribution/"+r);return null}_getDefaultTileServers(e){if(null==e)return[];const r=-1!==e.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i),t=-1!==e.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i);return r||t?[e,e.replace(r?/server\.arcgisonline/i:/services\.arcgisonline/i,r?"services.arcgisonline":"server.arcgisonline")]:[]}get hasOverriddenFetchTile(){return!this.fetchTile[M]}};T([j({readOnly:!0})],D.prototype,"attributionDataUrl",null),T([j({type:["show","hide","hide-children"]})],D.prototype,"listMode",void 0),T([j({json:{read:!0,write:!0}})],D.prototype,"blendMode",void 0),T([j({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],D.prototype,"isReference",void 0),T([j({readOnly:!0,type:["ArcGISTiledMapServiceLayer"]})],D.prototype,"operationalLayerType",void 0),T([j({type:Boolean})],D.prototype,"resampling",void 0),T([j()],D.prototype,"sourceJSON",void 0),T([j({type:d})],D.prototype,"spatialReference",void 0),T([w("spatialReference",["spatialReference","tileInfo"])],D.prototype,"readSpatialReference",null),T([j({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],D.prototype,"path",void 0),T([j({readOnly:!0})],D.prototype,"sublayers",void 0),T([O("sublayers",{layers:{type:[A]}})],D.prototype,"writeSublayers",null),T([j({json:{read:!1,write:!1}})],D.prototype,"popupEnabled",void 0),T([j()],D.prototype,"tileServers",null),T([U("tileServers")],D.prototype,"castTileServers",null),T([j({readOnly:!0,json:{read:!1}})],D.prototype,"type",void 0),T([j(R)],D.prototype,"url",void 0),D=r=T([P("esri.layers.TileLayer")],D);const M=Symbol("default-fetch-tile");D.prototype.fetchTile[M]=!0,e("default",D)}}}));
