System.register(["./index-legacy.js","./FeatureLayerView2D-legacy.js","./Container-legacy.js","./highlightReasons-legacy.js","./definitions-legacy.js","./enums-legacy.js","./Texture-legacy.js","./LayerView-legacy.js","./TechniqueInstance-legacy.js","./UpdateTracking2D-legacy.js","./TurboLine-legacy.js","./enums-legacy2.js","./earcut-legacy.js","./GeometryUtils-legacy.js","./OptimizedGeometry-legacy.js","./Rect-legacy.js","./LabelMetric-legacy.js","./Program-legacy.js","./VertexElementDescriptor-legacy.js","./BindType-legacy.js","./Util-legacy.js","./constants-legacy.js","./TileContainer-legacy.js","./WGLContainer-legacy.js","./ProgramTemplate-legacy.js","./StyleDefinition-legacy.js","./config-legacy.js","./featureConversionUtils-legacy.js","./OptimizedFeatureSet-legacy.js","./tileUtils-legacy.js","./SDFHelper-legacy.js","./floatRGBA-legacy.js","./FeatureCommandQueue-legacy.js","./HighlightCounter-legacy.js","./floorFilterUtils-legacy.js","./popupUtils-legacy.js","./RefreshableLayerView-legacy.js"],(function(e,s){"use strict";var t,n,r,l,i,a,o,u,c,h,d;return{setters:[e=>{t=e.x,n=e.y,r=e.er,l=e.z,i=e.C,a=e.s,o=e.es,u=e.n,c=e.E},e=>{h=e.n,d=e.X},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],execute:function(){const s=e=>{let s=class extends e{resume(){this._isUserPaused=!1,this.suspended||this._doResume()}pause(){this._isUserPaused=!0,this.suspended||this._doPause()}disconnect(){this._doDisconnect()}connect(){this._doConnect()}clear(){this._doClear()}constructor(...e){super(...e),this._isUserPaused=!1,this.filter=null}get connectionStatus(){return(this._isUserPaused||this.suspended)&&"connected"===this._streamConnectionStatus?"paused":this._streamConnectionStatus}_onSuspendedChange(e){e?this._doPause():this._isUserPaused||this._doResume()}};return t([n()],s.prototype,"_isUserPaused",void 0),t([n({readOnly:!0})],s.prototype,"connectionStatus",null),t([n({type:r})],s.prototype,"filter",void 0),s=t([l("esri.layers.mixins.StreamLayerView")],s),s};let y=class extends(s(d)){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([i((()=>this.layer.customParameters),(e=>this._worker.streamMessenger.updateCustomParameters(e))),this.layer.on("send-message-to-socket",(e=>this._worker.streamMessenger.sendMessageToSocket(e))),this.layer.on("send-message-to-client",(e=>{this._worker.streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&"clear"===e.type&&this.incrementSourceRefreshVersion()})),i((()=>this.layer.purgeOptions),(()=>this._update())),i((()=>this.suspended),this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new a("stream-controller",this.pipelineErrorString):null}on(e,s){if(Array.isArray(e))return o(e.map((e=>this.on(e,s))));const t=["data-received","message-received"].includes(e);t&&this._worker.streamMessenger.enableEvent(e,!0);const n=super.on(e,s),r=this;return u((()=>{n.remove(),t&&(r._worker.closed||r.hasEventListener(e)||r._worker.streamMessenger.enableEvent(e,!1))}))}queryLatestObservations(e,s){if(!(this.layer.timeInfo?.endField||this.layer.timeInfo?.startField||this.layer.timeInfo?.trackIdField))throw new a("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");return h(this._worker.features.executeQueryForLatestObservations(this._cleanUpQuery(e),s).then((e=>{const s=c.fromJSON(e);return s.features.forEach((e=>{e.layer=this.layer,e.sourceLayer=this.layer})),s})),new c({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){null!=this._refreshInterval&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval=setInterval((()=>this.incrementSourceRefreshVersion()),this.layer.updateInterval)}_doDisconnect(){this._worker.streamMessenger.disconnect(),this._doPause()}_doConnect(){this._worker.streamMessenger.connect(),this.resume()}_doClear(){this._worker.streamMessenger.clear(),null==this._refreshInterval&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),s=this;return{...e,get container(){return s.featureContainer},setProperty:e=>{this.set(e.propertyName,e.value)}}}};t([n()],y.prototype,"pipelineConnectionStatus",void 0),t([n()],y.prototype,"pipelineErrorString",void 0),t([n({readOnly:!0})],y.prototype,"connectionError",null),t([n({readOnly:!0})],y.prototype,"_streamConnectionStatus",null),y=t([l("esri.views.2d.layers.StreamLayerView2D")],y),e("default",y)}}}));
