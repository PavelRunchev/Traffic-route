System.register(["./index-legacy.js","./query-legacy.js","./pbfQueryUtils-legacy.js","./pbf-legacy.js","./OptimizedGeometry-legacy.js","./OptimizedFeatureSet-legacy.js"],(function(e,t){"use strict";var r,s,n,o,i,c,a,u,l,h,d,g,f,y,_,p;return{setters:[e=>{r=e.c7,s=e.s,n=e.x,o=e.y,i=e.z,c=e.eH,a=e.bf,u=e.w,l=e.eE,h=e.aC,d=e.X,g=e.ec,f=e._,y=e.az,_=e.bc},e=>{p=e.c},null,null,null,null],execute:function(){e("createConnection",(function(e,t,r,s,n,o,i,c,a){const u={source:e,sourceSpatialReference:t,spatialReference:r,geometryType:s,filter:R(n,o),maxReconnectionAttempts:i,maxReconnectionInterval:c,customParameters:a};return e?e.path.startsWith("wss://")||e.path.startsWith("ws://")?new b(u):new F(u):new C(u)}));let w=class extends r.EventedAccessor{destroy(){this.emit("destroy")}get connectionError(){return this.errorString?new s("stream-connection",this.errorString):null}onFeature(e){this.emit("data-received",e)}onMessage(e){this.emit("message-received",e)}};n([o({readOnly:!0})],w.prototype,"connectionError",null),w=n([i("esri.layers.support.StreamConnection")],w);const m=w;var S;!function(e){e[e.CONNECTING=0]="CONNECTING",e[e.OPEN=1]="OPEN",e[e.CLOSING=2]="CLOSING",e[e.CLOSED=3]="CLOSED"}(S||(S={}));let b=class extends m{constructor(e){super({}),this._outstandingMessages=[],this.errorString=null;const{geometryType:t,spatialReference:r,sourceSpatialReference:s}=e;this._config=e,this._featureZScaler=c(t,s,r),this._open()}normalizeCtorArgs(){return{}}async _open(){await this._tryCreateWebSocket(),this.destroyed||await this._handshake()}destroy(){super.destroy(),null!=this._websocket&&(this._websocket.onopen=null,this._websocket.onclose=null,this._websocket.onerror=null,this._websocket.onmessage=null,this._websocket.close()),this._websocket=null}get connectionStatus(){if(null==this._websocket)return"disconnected";switch(this._websocket.readyState){case S.CONNECTING:case S.OPEN:return"connected";case S.CLOSING:case S.CLOSED:return"disconnected"}}sendMessageToSocket(e){null!=this._websocket?this._websocket.send(JSON.stringify(e)):this._outstandingMessages.push(e)}sendMessageToClient(e){this._onMessage(e)}updateCustomParameters(e){this._config.customParameters=e,null!=this._websocket&&this._websocket.close()}async _tryCreateWebSocket(e=this._config.source.path,t=1e3,r=0){try{if(this.destroyed)return;const t=a(e,this._config.customParameters??{});this._websocket=await this._createWebSocket(t),this.notifyChange("connectionStatus")}catch(w){const o=t/1e3;return this._config.maxReconnectionAttempts&&r>=this._config.maxReconnectionAttempts?(u.getLogger(this).error(new s("websocket-connection","Exceeded maxReconnectionAttempts attempts. No further attempts will be made")),void this.destroy()):(u.getLogger(this).error(new s("websocket-connection",`Failed to connect. Attempting to reconnect in ${o}s`,w)),await l(t),this._tryCreateWebSocket(e,Math.min(1.5*t,1e3*this._config.maxReconnectionInterval),r+1))}}_setWebSocketJSONParseHandler(e){e.onmessage=e=>{try{const t=JSON.parse(e.data);this._onMessage(t)}catch(t){return void u.getLogger(this).error(new s("websocket-connection","Failed to parse message, invalid JSON",{error:t}))}}}_createWebSocket(e){return new Promise(((t,r)=>{const s=new WebSocket(e);s.onopen=()=>{if(s.onopen=null,this.destroyed)return s.onclose=null,void s.close();s.onclose=e=>this._onClose(e),s.onerror=e=>this._onError(e),this._setWebSocketJSONParseHandler(s),t(s)},s.onclose=e=>{s.onopen=s.onclose=null,r(e)}}))}async _handshake(e=1e4){const t=this._websocket;if(null==t)return;const r=h(),n=t.onmessage,{filter:o,outFields:i,spatialReference:c}=this._config;return r.timeout(e),t.onmessage=e=>{let a=null;try{a=JSON.parse(e.data)}catch(l){}a&&"object"==typeof a||(u.getLogger(this).error(new s("websocket-connection","Protocol violation. Handshake failed - malformed message",e.data)),r.reject(),this.destroy()),a.spatialReference?.wkid!==c?.wkid&&(u.getLogger(this).error(new s("websocket-connection",`Protocol violation. Handshake failed - expected wkid of ${c.wkid}`,e.data)),r.reject(),this.destroy()),"json"!==a.format&&(u.getLogger(this).error(new s("websocket-connection","Protocol violation. Handshake failed - format is not set",e.data)),r.reject(),this.destroy()),o&&a.filter!==o&&u.getLogger(this).error(new s("websocket-connection","Tried to set filter, but server doesn't support it")),i&&a.outFields!==i&&u.getLogger(this).error(new s("websocket-connection","Tried to set outFields, but server doesn't support it")),t.onmessage=n;for(const r of this._outstandingMessages)t.send(JSON.stringify(r));this._outstandingMessages=[],r.resolve()},t.send(JSON.stringify({filter:o,outFields:i,format:"json",spatialReference:{wkid:c.wkid}})),r.promise}_onMessage(e){if(this.onMessage(e),"type"in e)switch(e.type){case"features":case"featureResult":for(const t of e.features)null!=this._featureZScaler&&this._featureZScaler(t.geometry),this.onFeature(t)}}_onError(e){const t="Encountered an error over WebSocket connection";this._set("errorString",t),u.getLogger(this).error("websocket-connection",t)}_onClose(e){this._websocket=null,this.notifyChange("connectionStatus"),1e3!==e.code&&u.getLogger(this).error("websocket-connection",`WebSocket closed unexpectedly with error code ${e.code}`),this.destroyed||this._open()}};n([o()],b.prototype,"connectionStatus",null),n([o()],b.prototype,"errorString",void 0),b=n([i("esri.layers.graphics.sources.connections.WebSocketConnection")],b);const k={maxQueryDepth:5,maxRecordCountFactor:3};let v=class extends b{constructor(e){super({...k,...e}),this._buddyServicesQuery=null,this._relatedFeatures=null}async _open(){const e=await this._fetchServiceDefinition(this._config.source);e.timeInfo.trackIdField||u.getLogger(this).warn("GeoEvent service was configured without a TrackIdField. This may result in certain functionality being disabled. The purgeOptions.maxObservations property will have no effect.");const t=this._fetchWebSocketUrl(e.streamUrls,this._config.spatialReference);this._buddyServicesQuery||(this._buddyServicesQuery=this._queryBuddyServices()),await this._buddyServicesQuery,await this._tryCreateWebSocket(t);const{filter:r,outFields:s}=this._config;this.destroyed||this._setFilter(r,s)}_onMessage(e){if("attributes"in e){let r;try{r=this._enrich(e),null!=this._featureZScaler&&this._featureZScaler(r.geometry)}catch(t){return void u.getLogger(this).error(new s("geoevent-connection","Failed to parse message",t))}this.onFeature(r)}else this.onMessage(e)}async _fetchServiceDefinition(e){const t={f:"json",...this._config.customParameters},r=d(e.path,{query:t,responseType:"json"}),s=(await r).data;return this._serviceDefinition=s,s}_fetchWebSocketUrl(e,t){const r=e[0],{urls:s,token:n}=r,o=this._inferWebSocketBaseUrl(s);return a(`${o}/subscribe`,{outSR:""+t.wkid,token:n})}_inferWebSocketBaseUrl(e){if(1===e.length)return e[0];for(const t of e)if(t.includes("wss"))return t;return u.getLogger(this).error(new s("geoevent-connection","Unable to infer WebSocket url",e)),null}async _setFilter(e,t){const r=this._websocket;if(null==r||null==e&&null==t)return;const n=JSON.stringify({filter:this._serializeFilter(e,t)});let o=!1;const i=h();return r.onmessage=e=>{const t=JSON.parse(e.data);t.filter&&(t.error&&(u.getLogger(this).error(new s("geoevent-connection","Failed to set service filter",t.error)),this._set("errorString",`Could not set service filter - ${t.error}`),i.reject(t.error)),this._setWebSocketJSONParseHandler(r),o=!0,i.resolve())},r.send(n),setTimeout((()=>{o||(this.destroyed||this._websocket!==r||u.getLogger(this).error(new s("geoevent-connection","Server timed out when setting filter")),i.reject())}),1e4),i.promise}_serializeFilter(e,t){const r={};if(null==e&&null==t)return r;if(e?.geometry)try{const t=g(e.geometry);if("extent"!==t.type)throw new s(`Expected extent but found type ${t.type}`);r.geometry=JSON.stringify(t.shiftCentralMeridian())}catch(n){u.getLogger(this).error(new s("geoevent-connection","Encountered an error when setting connection geometryDefinition",n))}return e?.where&&"1 = 1"!==e.where&&"1=1"!==e.where&&(r.where=e.where),null!=t&&(r.outFields=t.join(",")),r}_enrich(e){if(!this._relatedFeatures)return e;const t=this._serviceDefinition.relatedFeatures.joinField,r=e.attributes[t],n=this._relatedFeatures.get(r);if(!n)return u.getLogger(this).warn("geoevent-connection","Feature join failed. Is the join field configured correctly?",e),e;const{attributes:o,geometry:i}=n;for(const s in o)e.attributes[s]=o[s];return i&&(e.geometry=i),e.geometry||e.centroid||u.getLogger(this).error(new s("geoevent-connection","Found malformed feature - no geometry found",e)),e}async _queryBuddyServices(){try{const{relatedFeatures:e,keepLatestArchive:t}=this._serviceDefinition,r=this._queryRelatedFeatures(e),s=this._queryArchive(t);await r;const n=await s;if(!n)return;for(const o of n.features)this.onFeature(this._enrich(o))}catch(n){u.getLogger(this).error(new s("geoevent-connection","Encountered an error when querying buddy services",{error:n}))}}async _queryRelatedFeatures(e){if(!e)return;const t=await this._queryBuddy(e.featuresUrl);this._addRelatedFeatures(t)}async _queryArchive(e){if(e)return this._queryBuddy(e.featuresUrl)}async _queryBuddy(e){const r=new((await f((()=>t.import("./index-legacy.js").then((e=>e.nf))),void 0,t.meta.url)).default)({url:e}),{capabilities:s}=await r.load(),n=s.query.supportsMaxRecordCountFactor,o=s.query.supportsPagination,i=s.query.supportsCentroid,c=this._config.maxRecordCountFactor,a=r.capabilities.query.maxRecordCount,u=n?a*c:a,l=new y;if(l.outFields=this._config.outFields??["*"],l.where=this._config.filter?.where??"1=1",l.returnGeometry=!0,l.returnExceededLimitFeatures=!0,l.outSpatialReference=_.fromJSON(this._config.spatialReference),i&&(l.returnCentroid=!0),n&&(l.maxRecordCountFactor=c),o)return l.num=u,r.destroy(),this._queryPages(e,l);const h=await p(e,l,this._config.sourceSpatialReference);return r.destroy(),h.data}async _queryPages(e,t,r=[],s=0){t.start=null!=t.num?s*t.num:null;const{data:n}=await p(e,t,this._config.sourceSpatialReference);return n.exceededTransferLimit&&s<(this._config.maxQueryDepth??0)?(n.features.forEach((e=>r.push(e))),this._queryPages(e,t,r,s+1)):(r.forEach((e=>n.features.push(e))),n)}_addRelatedFeatures(e){const t=new Map,r=e.features,s=this._serviceDefinition.relatedFeatures.joinField;for(const n of r){const e=n.attributes[s];t.set(e,n)}this._relatedFeatures=t}};v=n([i("esri.layers.graphics.sources.connections.GeoEventConnection")],v);const F=v;let C=class extends m{constructor(e){super({}),this.connectionStatus="connected",this.errorString=null;const{geometryType:t,spatialReference:r,sourceSpatialReference:s}=e;this._featureZScaler=c(t,s,r)}normalizeCtorArgs(){return{}}updateCustomParameters(e){}sendMessageToSocket(e){}sendMessageToClient(e){if("type"in e)switch(e.type){case"features":case"featureResult":for(const t of e.features)null!=this._featureZScaler&&this._featureZScaler(t.geometry),this.onFeature(t)}this.onMessage(e)}};function R(e,t){if(null==e&&null==t)return null;const r={};return null!=t&&(r.geometry=t),null!=e&&(r.where=e),r}n([o()],C.prototype,"connectionStatus",void 0),n([o()],C.prototype,"errorString",void 0),C=n([i("esri.layers.support.ClientSideConnection")],C)}}}));
