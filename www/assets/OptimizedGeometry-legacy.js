System.register([],(function(t,e){"use strict";return{execute:function(){t("s",(function(t){return!!t.geometry?.coords?.length})),t("t",class t{constructor(t=null,e={},s,h){this.geometry=t,this.attributes=e,this.centroid=s,this.objectId=h,this.displayId=0,this.geohashX=0,this.geohashY=0}weakClone(){const e=new t(this.geometry,this.attributes,this.centroid,this.objectId);return e.displayId=this.displayId,e.geohashX=this.geohashX,e.geohashY=this.geohashY,e}clone(){const e=this.geometry?.clone(),s=new t(e,{...this.attributes},this.centroid?.clone(),this.objectId);return s.displayId=this.displayId,s.geohashX=this.geohashX,s.geohashY=this.geohashY,s}});class e{constructor(t=[],e=[],s=!1){this.lengths=t??[],this.coords=e??[],this.hasIndeterminateRingOrder=s}static fromRect(t){const[s,h,i,r]=t,n=i-s,o=r-h;return new e([5],[s,h,n,0,0,o,-n,0,0,-o])}get isPoint(){return 0===this.lengths.length}get maxLength(){return Math.max(...this.lengths)}get size(){return this.lengths.reduce(((t,e)=>t+e))}forEachVertex(t){let e=0;this.lengths.length||t(this.coords[0],this.coords[1]);for(let s=0;s<this.lengths.length;s++){const h=this.lengths[s];for(let s=0;s<h;s++)t(this.coords[2*(s+e)],this.coords[2*(s+e)+1]);e+=h}}deltaDecode(){const t=this.clone(),{coords:e,lengths:s}=t;let h=0;for(const i of s){for(let t=1;t<i;t++)e[2*(h+t)]+=e[2*(h+t)-2],e[2*(h+t)+1]+=e[2*(h+t)-1];h+=i}return t}clone(t){if(0===this.lengths.length)return new e([],[this.coords[0],this.coords[1]]);const s=2*(0===this.lengths.length?1:this.lengths.reduce(((t,e)=>t+e))),h=this.coords.slice(0,s);return t?(t.set(h),new e(this.lengths,t,this.hasIndeterminateRingOrder)):new e(Array.from(this.lengths),Array.from(h),this.hasIndeterminateRingOrder)}}t("e",e)}}}));
