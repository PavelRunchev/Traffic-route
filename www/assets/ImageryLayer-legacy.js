System.register(["./index-legacy.js","./ImageHistogramParameters-legacy.js","./multidimensionalUtils-legacy.js","./dataUtils-legacy.js","./RasterSymbolizer-legacy.js","./imageBitmapUtils-legacy.js","./executeQueryJSON-legacy.js","./pbf-legacy.js","./AttachmentInfo-legacy.js","./executeForIds-legacy.js","./utils-legacy7.js","./ClassBreaksDefinition-legacy.js","./query-legacy.js","./pbfQueryUtils-legacy.js","./OptimizedGeometry-legacy.js","./OptimizedFeatureSet-legacy.js"],(function(e,t){"use strict";var i,r,s,n,a,o,l,u,p,c,m,d,y,h,g,f,w,R,v,b,S,x,I,F,D,T,j,P,N,O,_,C,A,V,M,J,E,q,G,L,z,U,H,B,Q,k,$,W,Z,K,X,Y,ee,te,ie,re,se,ne,ae,oe,le,ue,pe,ce,me,de,ye,he,ge,fe,we,Re,ve,be,Se,xe,Ie,Fe,De,Te,je,Pe,Ne,Oe,_e,Ce,Ae,Ve,Me,Je,Ee,qe,Ge,Le,ze,Ue,He,Be,Qe,ke,$e,We,Ze,Ke,Xe;return{setters:[e=>{i=e.ax,r=e.kO,s=e.x,n=e.y,a=e.dN,o=e.z,l=e.bX,u=e.ar,p=e.bc,c=e.lY,m=e.lZ,d=e.l_,y=e.bD,h=e.aN,g=e.aQ,f=e.E,w=e.iC,R=e.ec,v=e.ay,b=e.bW,S=e.bV,x=e.X,I=e.aG,F=e.dI,D=e.db,T=e.dO,j=e.c5,P=e.cC,N=e.c6,O=e.l$,_=e.dJ,C=e.kr,A=e.w,V=e.aP,M=e.d2,J=e.fe,E=e.dj,q=e.cx,G=e.ao,L=e.s,z=e.bY,U=e.az,H=e.C,B=e.M,Q=e.m0,k=e.i6,$=e.bs,W=e.dD,Z=e.bt,K=e.de,X=e.df,Y=e.dd,ee=e.dG,te=e.dE,ie=e.dg,re=e.A,se=e.bx,ne=e.fa,ae=e.fp,oe=e.dL,le=e.di,ue=e.ff,pe=e.F,ce=e.bw,me=e._},e=>{de=e.N,ye=e.b,he=e.i,ge=e.j,fe=e.c,we=e.l,Re=e.d,ve=e.n,be=e.a,Se=e.h,xe=e.f,Ie=e.m,Fe=e.p,De=e.k,Te=e.E,je=e.V,Pe=e.K,Ne=e.t},e=>{Oe=e.m,_e=e.g,Ce=e.p,Ae=e.d},e=>{Ve=e.i,Me=e.u,Je=e.s,Ee=e.l},e=>{qe=e.G,Ge=e.e,Le=e.f,ze=e.q,Ue=e.A,He=e.n,Be=e.a,Qe=e.L,ke=e.S,$e=e.P},e=>{We=e.t},e=>{Ze=e.s},null,null,e=>{Ke=e.s,Xe=e.n},null,null,null,null,null,null],execute:function(){const Ye={StretchFunction:{arguments:{ComputeGamma:{isDataset:!1,isPublic:!1,name:"ComputeGamma",type:"RasterFunctionVariable",value:!1},DRA:{isDataset:!1,isPublic:!1,name:"DRA",type:"RasterFunctionVariable",value:!1},EstimateStatsHistogram:{isDataset:!1,isPublic:!1,name:"EstimateStatsHistogram",type:"RasterFunctionVariable",value:!1},Gamma:{displayName:"Gamma",isDataset:!1,isPublic:!1,name:"Gamma",type:"RasterFunctionVariable"},Histograms:{isDataset:!1,isPublic:!1,name:"Histograms",type:"RasterFunctionVariable"},Max:{isDataset:!1,isPublic:!1,name:"Max",type:"RasterFunctionVariable",value:255},MaxPercent:{isDataset:!1,isPublic:!1,name:"MaxPercent",type:"RasterFunctionVariable",value:.5},Min:{isDataset:!1,isPublic:!1,name:"Min",type:"RasterFunctionVariable",value:0},MinPercent:{isDataset:!1,isPublic:!1,name:"MinPercent",type:"RasterFunctionVariable",value:.25},NumberOfStandardDeviations:{isDataset:!1,isPublic:!1,name:"NumberOfStandardDeviation",type:"RasterFunctionVariable",value:2},Raster:{isDataset:!0,isPublic:!1,name:"Raster",type:"RasterFunctionVariable"},SigmoidStrengthLevel:{isDataset:!1,isPublic:!1,name:"SigmoidStrengthLevel",type:"RasterFunctionVariable",value:2},Statistics:{isDataset:!1,isPublic:!1,name:"Statistics",type:"RasterFunctionVariable"},StretchType:{isDataset:!1,isPublic:!1,name:"StretchType",type:"RasterFunctionVariable",value:0},type:"StretchFunctionArguments",UseGamma:{isDataset:!1,isPublic:!1,name:"UseGamma",type:"RasterFunctionVariable",value:!1}},description:"Enhances an image by adjusting the range of values displayed. This does not alter the underlying pixel values. If a pixel has a value outside of the specified range, it will appear as either the minimum or maximum value.",function:{description:"Enhances an image by adjusting the range of values displayed. This does not alter the underlying pixel values. If a pixel has a value outside of the specified range, it will appear as either the minimum or maximum value.",name:"Stretch",pixelType:"UNKNOWN",type:"StretchFunction"},functionType:0,name:"Stretch",thumbnail:""},RemapFunction:{name:"Remap",description:"Changes pixel values by assigning new values to ranges of pixel values or using an external table.",function:{type:"RemapFunction",pixelType:"UNKNOWN",name:"Remap",description:"Changes pixel values by assigning new values to ranges of pixel values or using an external table."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},UseTable:{name:"UseTable",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},InputRanges:{name:"InputRanges",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"Input Ranges"},OutputValues:{name:"OutputValues",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"Output Values"},NoDataRanges:{name:"NoDataRanges",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"NoData Ranges"},Table:{name:"Table",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},InputField:{name:"InputField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},OutputField:{name:"OutputField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},InputMaxField:{name:"InputMaxField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},RemapTableType:{name:"RemapTableType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},AllowUnmatched:{name:"AllowUnmatched",isPublic:!1,isDataset:!1,value:!0,type:"RasterFunctionVariable"},type:"RemapFunctionArguments"},functionType:0,thumbnail:""},ColormapFunction:{name:"Colormap",description:"Changes pixel values to display the raster data as either a grayscale or a red, green, blue (RGB) image, based on a colormap or a color ramp.",function:{type:"ColormapFunction",pixelType:"UNKNOWN",name:"Colormap",description:"Changes pixel values to display the raster data as either a grayscale or a red, green, blue (RGB) image, based on a colormap or a color ramp."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ColorSchemeType:{name:"ColorSchemeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},Colormap:{name:"Colormap",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},ColormapName:{name:"ColormapName",isPublic:!1,isDataset:!1,value:"Gray",type:"RasterFunctionVariable"},ColorRamp:{name:"ColorRamp",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},type:"ColormapFunctionArguments"},functionType:0,thumbnail:""},ShadedReliefFunction:{name:"Shaded Relief",description:"Creates a multiband, color coded, 3D representation of the surface, with the sun's relative position taken into account for shading the image.",function:{type:"ShadedReliefFunction",pixelType:"UNKNOWN",name:"Shaded Relief",description:"Creates a multiband, color coded, 3D representation of the surface, with the sun's relative position taken into account for shading the image."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ColorSchemeType:{name:"ColorSchemeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ColorRamp:{name:"ColorRamp",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},HillshadeType:{name:"HillshadeType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},Colormap:{name:"Colormap",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},Azimuth:{name:"Azimuth",isPublic:!1,isDataset:!1,value:315,type:"RasterFunctionVariable"},Altitude:{name:"Altitude",isPublic:!1,isDataset:!1,value:45,type:"RasterFunctionVariable"},SlopeType:{name:"SlopeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ZFactor:{name:"ZFactor",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},PSPower:{name:"PSPower",isPublic:!1,isDataset:!1,value:.664,type:"RasterFunctionVariable"},PSZFactor:{name:"PSZFactor",isPublic:!1,isDataset:!1,value:.024,type:"RasterFunctionVariable"},RemoveEdgeEffect:{name:"RemoveEdgeEffect",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},type:"ShadedReliefFunctionArguments"},functionType:0,thumbnail:""},HillshadeFunction:{name:"Hillshade",description:"Creates a 3D representation of the surface, with the sun's relative position taken into account for shading the image",function:{type:"HillshadeFunction",pixelType:"UNKNOWN",name:"Hillshade",description:"Creates a 3D representation of the surface, with the sun's relative position taken into account for shading the image"},arguments:{DEM:{name:"DEM",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},HillshadeType:{name:"HillshadeType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},Azimuth:{name:"Azimuth",isPublic:!1,isDataset:!1,value:315,type:"RasterFunctionVariable"},Altitude:{name:"Altitude",isPublic:!1,isDataset:!1,value:45,type:"RasterFunctionVariable"},SlopeType:{name:"SlopeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ZFactor:{name:"ZFactor",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},PSPower:{name:"PSPower",isPublic:!1,isDataset:!1,value:.664,type:"RasterFunctionVariable"},PSZFactor:{name:"PSZFactor",isPublic:!1,isDataset:!1,value:.024,type:"RasterFunctionVariable"},RemoveEdgeEffect:{name:"RemoveEdgeEffect",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},type:"HillshadeFunctionArguments"},functionType:0,thumbnail:""},ResampleFunction:{name:"Resample",description:"Changes the cell size of a raster.",function:{type:"ResampleFunction",pixelType:"UNKNOWN",name:"Resample",description:"Changes the cell size of a raster."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ResamplingType:{name:"ResamplingType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},InputCellSize:{name:"InputCellsize",isPublic:!1,isDataset:!1,value:{x:0,y:0},type:"RasterFunctionVariable"},OutputCellSize:{name:"OutputCellsize",isPublic:!1,isDataset:!1,value:{x:0,y:0},type:"RasterFunctionVariable"},type:"ResampleFunctionArguments"},functionType:0,thumbnail:""}},et=new Set(["u1","u2","u4","u8","s8","u16","s16"]),tt={simple_scalar:"Simple Scalar",wind_barb:"Wind Barb",single_arrow:"Single Arrow",beaufort_kn:"Beaufort Wind (Knots)",beaufort_m:"Beaufort Wind (MetersPerSecond)",ocean_current_m:"Ocean Current (MetersPerSecond)",ocean_current_kn:"Ocean Current (Knots)"},it=new Set(["raster-stretch","unique-value","class-breaks","raster-shaded-relief","vector-field","raster-colormap"]);function rt(e){return it.has(e.type)}function st(e,t){if(!e||!t)return i(e||t);const r=i(e);if(r.functionDefinition&&t.rasterFunctionDefinition){const e=t.rasterFunctionDefinition;(e.thumbnail||e.thumbnailEx)&&(e.thumbnail=e.thumbnailEx=void 0),nt(r.functionDefinition.arguments,t),r.rasterFunctionDefinition=r.functionDefinition.toJSON()}else"none"!==t.functionName?.toLowerCase()&&(lt(r.functionArguments).Raster=t);return r}function nt(e,t){for(const i in e)"raster"===i.toLowerCase()&&("RasterFunctionVariable"===e[i].type?(e[i]=t.rasterFunctionDefinition,e[i].type="RasterFunctionTemplate"):"RasterFunctionTemplate"===e[i].type&&nt(e[i].arguments,t))}function at(e){const t=i(Ye[e.functionName+"Function"]),r=e.functionArguments;for(const i in r)"raster"===i.toLowerCase()?(t.arguments[i]=at(r[i]),t.arguments[i].type="RasterFunctionTemplate"):"colormap"===i.toLowerCase()?(t.arguments[i].value=dt(r[i]),t.arguments.ColorSchemeType.value=0):t.arguments[i].value=r[i];return t}function ot(e,t){switch(t=t||{},e.type){case"raster-stretch":return function(e,t){const i=t.convertToRFT,r=new de;r.functionName="Stretch";const s=ut[Le.toJSON(e.stretchType)],n="u8",a={StretchType:s,Statistics:mt(e.statistics??[]),DRA:e.dynamicRangeAdjustment,UseGamma:e.useGamma,Gamma:e.gamma,ComputeGamma:e.computeGamma};if(null!=e.outputMin&&(a.Min=e.outputMin),null!=e.outputMax&&(a.Max=e.outputMax),s===ut.standardDeviation?(a.NumberOfStandardDeviations=e.numberOfStandardDeviations,r.outputPixelType=n):s===ut.percentClip?(a.MinPercent=e.minPercent,a.MaxPercent=e.maxPercent,r.outputPixelType=n):s===ut.minMax?r.outputPixelType=n:s===ut.sigmoid&&(a.SigmoidStrengthLevel=e.sigmoidStrengthLevel),r.functionArguments=a,r.variableName="Raster",e.colorRamp){const s=e.colorRamp,n=new de;if(i)n.functionArguments={ColorRamp:qe(s)};else{const i=ze(s,!0);if(i)n.functionArguments={colorRampName:i};else if(!t.convertColorRampToColormap||"algorithmic"!==s.type&&"multipart"!==s.type){const t=e.colorRamp.toJSON();"algorithmic"===t.type?t.algorithm=t.algorithm||"esriCIELabAlgorithm":"multipart"===t.type&&t.colorRamps?.length&&t.colorRamps.forEach((e=>e.algorithm=e.algorithm||"esriCIELabAlgorithm")),n.functionArguments={colorRamp:t}}else n.functionArguments={Colormap:Ge(s)}}return n.variableName="Raster",n.functionName="Colormap",n.functionArguments.Raster=r,i?new de({rasterFunctionDefinition:at(n)}):n}return i?new de({rasterFunctionDefinition:at(r)}):r}(e,t);case"class-breaks":return function(e,t){const i=[],r=[],s=[],n=[],a=1e-4,{pixelType:o,rasterAttributeTable:l}=t,u=null==l?null:l.features,p=ct(l);if(p&&u&&Array.isArray(u)&&e.classBreakInfos){e.classBreakInfos.forEach(((t,i)=>{const r=t.symbol?.color;let s;r?.a&&null!=t.minValue&&null!=t.maxValue&&u.forEach((a=>{null!=t.minValue&&null!=t.maxValue&&(s=a.attributes[e.field],(s>=t.minValue&&s<t.maxValue||i===e.classBreakInfos.length-1&&s>=t.minValue)&&n.push([a.attributes[p],r.r,r.g,r.b]))}))}));const i=o?pt(n,o):n,r=new de;return r.functionName="Colormap",r.functionArguments={},r.functionArguments.Colormap=i,r.variableName="Raster",t.convertToRFT?new de({rasterFunctionDefinition:at(r)}):r}e.classBreakInfos.forEach(((e,t)=>{if(null==e.minValue||null==e.maxValue)return;const o=e.symbol&&e.symbol.color;o?.a?(0===t?i.push(e.minValue,e.maxValue+a):i.push(e.minValue+a,e.maxValue+a),r.push(t),n.push([t,o.r,o.g,o.b])):s.push(e.minValue,e.maxValue)}));const c=o?pt(n,o):n,m=new de;m.functionName="Remap",m.functionArguments={InputRanges:i,OutputValues:r,NoDataRanges:s},m.variableName="Raster";const d=new de;return d.functionName="Colormap",d.functionArguments={Colormap:c,Raster:m},t.convertToRFT?new de({rasterFunctionDefinition:at(d)}):d}(e,t);case"unique-value":return function(e,t){const i=[],{pixelType:r,rasterAttributeTable:s}=t,n=null==s?null:s.features,a=ct(s),o=e.defaultSymbol?.color?.toRgb(),l=e.uniqueValueInfos;if(l)if(n){if(a){const t=new Map;l.forEach((e=>{const i=e.value,r=e.symbol?.color;null!=i&&r?.a&&t.set(String(i),r.toRgb())}));const r=e.field;n.forEach((({attributes:e})=>{const s=String(e[r]),n=e[a],l=t.get(s);l?i.push([n,...l]):o&&i.push([n,...o])}))}}else for(let c=0;c<l.length;c++){const e=l[c],t=e.symbol?.color,r=+e.value;if(t?.a){if(isNaN(r))return null;i.push([r,t.r,t.g,t.b])}}const u=r?pt(i,r):i,p=new de;return p.functionName="Colormap",p.functionArguments={},p.functionArguments.Colormap=u,p.variableName="Raster",t.convertToRFT?new de({rasterFunctionDefinition:at(p)}):p}(e,t);case"raster-colormap":return function(e,t){const i=e.extractColormap();if(!i||0===i.length)return null;const{pixelType:r}=t,s=r?pt(i,r):i,n=new de;return n.functionName="Colormap",n.functionArguments={},n.functionArguments.Colormap=s,t.convertToRFT?new de({rasterFunctionDefinition:at(n)}):n}(e,t);case"vector-field":return function(e,t){const i=new de;i.functionName="VectorFieldRenderer";const{dataType:s,bandNames:n}=t,a="vector-uv"===s;let o,l;if(n&&2===n.length){const e=n.map((e=>e.toLowerCase()));o=e.indexOf("magnitude"),l=e.indexOf("direction")}-1!==o&&null!==o||(o=0,l=1);const u="arithmetic"===e.rotationType?1:2,p="flow-from"===e.flowRepresentation?0:1,c=e.visualVariables?e.visualVariables.find((e=>"Magnitude"===e.field)):new r,m={magnitudeBandID:o,directionBandID:l,isUVComponents:a,referenceSystem:u,massFlowAngleRepresentation:p,symbolTileSize:50,symbolTileSizeUnits:100,calculationMethod:"Vector Average",symbologyName:tt[e.style.toLowerCase().replace("-","_")],minimumMagnitude:c.minDataValue,maximumMagnitude:c.maxDataValue,minimumSymbolSize:c.minSize,maximumSymbolSize:c.maxSize};i.functionArguments=m;const d=at(i);return t.convertToRFT?de.fromJSON({rasterFunctionDefinition:d}):i}(e,t);case"raster-shaded-relief":return function(e,t){const i=t.convertToRFT;if("elevation"!==t.dataType&&("generic"!==t.dataType||1!==t.bandCount||"s16"!==t.pixelType&&"s32"!==t.pixelType&&"f32"!==t.pixelType&&"f64"!==t.pixelType))return new de;const r=new de;r.functionName="Hillshade";const s="traditional"===e.hillshadeType?0:1,n="none"===e.scalingType?1:3,a={HillshadeType:s,SlopeType:n,ZFactor:e.zFactor};return 0===s&&(a.Azimuth=e.azimuth,a.Altitude=e.altitude),3===n&&(a.PSPower=e.pixelSizePower,a.PSZFactor=e.pixelSizeFactor),r.functionArguments=a,r.variableName="Raster",e.colorRamp&&(r.functionName="ShadedRelief",i?a.ColorRamp=qe(e.colorRamp):a.Colormap=Ge(e.colorRamp)),i?new de({rasterFunctionDefinition:at(r)}):r}(e,t);case"flow":throw new Error("Unsupported rendering rule.")}}function lt(e){const t=e?.Raster??e?.raster;return t&&"esri.layers.support.RasterFunction"===t.declaredClass?lt(t.functionArguments):e}const ut={none:0,standardDeviation:3,histogramEqualization:4,minMax:5,percentClip:6,sigmoid:9};function pt(e,t){const i=et.has(t)?Ve(t):null;return i&&e.push([Math.floor(i[0]-1),0,0,0],[Math.ceil(i[1]+1),0,0,0]),e}function ct(e){if(null==e)return;const{fields:t}=e,i=t?.find((e=>e?.name&&"value"===e.name.toLowerCase()));return i?.name}function mt(e){const t=[];return e?.forEach((e=>{const i=e;if(Array.isArray(i))t.push(i);else{if(null==i.min||null==i.max)return;const e=[i.min,i.max,i.avg||0,i.stddev||0];t.push(e)}})),t}function dt(e){const t=[],i=[];return e.forEach((e=>{t.push(e[0]),i.push(Ue([...e.slice(1),255]))})),{type:"RasterColormap",values:t,colors:i}}let yt=class extends l{constructor(){super(...arguments),this.layer=null,this.compression=void 0,this.pixelType=void 0,this.lercVersion=2}get adjustAspectRatio(){return this.layer.adjustAspectRatio}writeAdjustAspectRatio(e,t,i){this.layer.version<10.3||(t[i]=e)}get bandIds(){return this.layer.bandIds}get compressionQuality(){return this.layer.compressionQuality}writeCompressionQuality(e,t,i){this.format&&this.format.toLowerCase().includes("jpg")&&null!=e&&(t[i]=e)}get compressionTolerance(){return this.layer.compressionTolerance}writeCompressionTolerance(e,t,i){"lerc"===this.format&&null!=e&&(t[i]=e)}get format(){return"vector-field"===this.layer.renderer?.type?"lerc":this.layer.format}get interpolation(){return this.layer.interpolation}get noData(){return this.layer.noData}get noDataInterpretation(){return this.layer.noDataInterpretation}writeLercVersion(e,t,i){"lerc"===this.format&&this.layer.version>=10.5&&(t[i]=e)}get version(){const e=this.layer;return e.commitProperty("bandIds"),e.commitProperty("format"),e.commitProperty("compressionQuality"),e.commitProperty("compressionTolerance"),e.commitProperty("interpolation"),e.commitProperty("noData"),e.commitProperty("noDataInterpretation"),e.commitProperty("mosaicRule"),e.commitProperty("rasterFunction"),e.commitProperty("adjustAspectRatio"),e.commitProperty("pixelFilter"),e.commitProperty("definitionExpression"),e.commitProperty("multidimensionalSubset"),(this._get("version")||0)+1}set version(e){this._set("version",e)}get mosaicRule(){const e=this.layer;let t=e.mosaicRule;const i=e.definitionExpression;return t?i&&i!==t.where&&(t=t.clone(),t.where=i):i&&(t=new ge({where:i})),t}get rasterFunction(){const e=this.layer;let{rasterFunction:t}=e;const i=e.pixelFilter,r=!e.format||e.format.includes("jpg")||e.format.includes("png");t=this._addResampleRasterFunction(t);const s=e.multidimensionalSubset?.areaOfInterest;return s&&(t=this._addClipFunction(t,s)),r&&!i&&"vector-field"!==e.renderer?.type&&(t=this.combineRendererWithRenderingRule(t)),t}combineRendererWithRenderingRule(e){const t=this.layer,{rasterInfo:i,renderer:r}=t;return e=e||t.rasterFunction,r&&rt(r)?st(ot(r,{rasterAttributeTable:i.attributeTable,pixelType:i.pixelType,dataType:i.dataType,bandNames:i.bandInfos.map((({name:e})=>e)),convertColorRampToColormap:t.version<10.6,convertToRFT:!!e?.rasterFunctionDefinition,bandCount:i.bandCount}),e):e}_addResampleRasterFunction(e){if("vector-field"!==this.layer.renderer?.type||"Resample"===e?.functionName)return e;const t="esriImageServiceDataTypeVector-UV"===this.layer.serviceDataType?7:10,i=this.layer.serviceRasterInfo.pixelSize;let r=new de({functionName:"Resample",functionArguments:{ResamplingType:t,InputCellSize:i}});return r=e?.rasterFunctionDefinition?new de({rasterFunctionDefinition:at(r)}):r,st(r,e)}_addClipFunction(e,t){return st(new de({functionName:"Clip",functionArguments:{ClippingGeometry:t.toJSON(),ClippingType:1}}),e)}};s([n()],yt.prototype,"layer",void 0),s([n({json:{write:!0}})],yt.prototype,"adjustAspectRatio",null),s([a("adjustAspectRatio")],yt.prototype,"writeAdjustAspectRatio",null),s([n({json:{write:!0}})],yt.prototype,"bandIds",null),s([n({json:{write:!0}})],yt.prototype,"compression",void 0),s([n({json:{write:!0}})],yt.prototype,"compressionQuality",null),s([a("compressionQuality")],yt.prototype,"writeCompressionQuality",null),s([n({json:{write:!0}})],yt.prototype,"compressionTolerance",null),s([a("compressionTolerance")],yt.prototype,"writeCompressionTolerance",null),s([n({json:{write:!0}})],yt.prototype,"format",null),s([n({type:String,json:{read:{reader:ye.read},write:{writer:ye.write}}})],yt.prototype,"interpolation",null),s([n({json:{write:!0}})],yt.prototype,"noData",null),s([n({type:String,json:{read:{reader:he.read},write:{writer:he.write}}})],yt.prototype,"noDataInterpretation",null),s([n({json:{write:!0}})],yt.prototype,"pixelType",void 0),s([n({json:{write:!0}})],yt.prototype,"lercVersion",void 0),s([a("lercVersion")],yt.prototype,"writeLercVersion",null),s([n({type:Number})],yt.prototype,"version",null),s([n({json:{write:!0}})],yt.prototype,"mosaicRule",null),s([n({json:{write:!0,name:"renderingRule"}})],yt.prototype,"rasterFunction",null),yt=s([o("esri.layers.mixins.ExportImageServiceParameters")],yt);const ht=e=>{let t=class extends e{constructor(){super(...arguments),this.make=null,this.model=null,this.focalLength=null,this.pixelSize=null,this.rows=null,this.cols=null}};return s([n({json:{write:!0}})],t.prototype,"make",void 0),s([n({json:{write:!0}})],t.prototype,"model",void 0),s([n({json:{write:!0}})],t.prototype,"focalLength",void 0),s([n({json:{write:!0}})],t.prototype,"pixelSize",void 0),s([n({json:{write:!0}})],t.prototype,"rows",void 0),s([n({json:{write:!0}})],t.prototype,"cols",void 0),t=s([o("esri.rest.support.CameraInfoMixin")],t),t};let gt=class extends(ht(l)){constructor(){super(...arguments),this.id=null,this.referenceUri=null,this.acquisitionDate=null,this.cameraID=null,this.center=null,this.perspectiveCenter=null,this.orientation=null}writeAcquisitionDate(e,t){t.acquisitionDate=e?.getTime()}};s([n({json:{write:!0}})],gt.prototype,"id",void 0),s([n({json:{name:"uri",write:!0}})],gt.prototype,"referenceUri",void 0),s([n({type:Date,json:{write:!0}})],gt.prototype,"acquisitionDate",void 0),s([a("acquisitionDate")],gt.prototype,"writeAcquisitionDate",null),s([n({json:{write:!0}})],gt.prototype,"cameraID",void 0),s([n({type:u,json:{write:!0}})],gt.prototype,"center",void 0),s([n({type:u,json:{write:!0}})],gt.prototype,"perspectiveCenter",void 0),s([n({json:{write:!0}})],gt.prototype,"orientation",void 0),gt=s([o("esri.rest.support.ImageInspectionInfo")],gt);const ft=gt;let wt=class extends l{constructor(){super(...arguments),this.images=null}};s([n({type:[ft],json:{write:!0}})],wt.prototype,"images",void 0),wt=s([o("esri.rest.support.FindImagesResult")],wt);const Rt=wt;let vt=class extends l{constructor(e){super(e),this.north=null,this.up=null,this.spatialReference=null}};s([n({type:Number,json:{write:!0}})],vt.prototype,"north",void 0),s([n({type:Number,json:{write:!0}})],vt.prototype,"up",void 0),s([n({type:p,json:{write:!0}})],vt.prototype,"spatialReference",void 0),vt=s([o("esri.rest.support.ImageAngleResult")],vt);const bt=vt;let St=class extends l{constructor(){super(...arguments),this.value=null,this.displayValue=null,this.uncertainty=null}};s([n({type:Number,json:{read:!0,write:!0}})],St.prototype,"value",void 0),s([n({type:String,json:{read:!0,write:!0}})],St.prototype,"displayValue",void 0),s([n({type:Number,json:{read:!0,write:!0}})],St.prototype,"uncertainty",void 0),St=s([o("esri.rest.support.ImageMeasureResultValue")],St);let xt=class extends St{constructor(){super(...arguments),this.unit=null}};s([n({type:String,json:{read:c.read,write:c.write}})],xt.prototype,"unit",void 0),xt=s([o("esri.rest.support.ImageMeasureResultLengthValue")],xt);let It=class extends St{constructor(){super(...arguments),this.unit=null}};s([n({type:String,json:{read:m.read,write:m.write}})],It.prototype,"unit",void 0),It=s([o("esri.rest.support.ImageMeasureResultAreaValue")],It);let Ft=class extends St{constructor(){super(...arguments),this.unit=null}};s([n({type:String,json:{read:d.read,write:d.write}})],Ft.prototype,"unit",void 0),Ft=s([o("esri.rest.support.ImageMeasureResultAngleValue")],Ft);let Dt=class extends l{constructor(){super(...arguments),this.name=null,this.sensorName=null}};s([n({type:String,json:{read:!0,write:!0}})],Dt.prototype,"name",void 0),s([n({type:String,json:{read:!0,write:!0}})],Dt.prototype,"sensorName",void 0),Dt=s([o("esri.rest.support.BaseImageMeasureResult")],Dt);let Tt=class extends Dt{constructor(){super(...arguments),this.area=null,this.perimeter=null}};s([n({type:It,json:{read:!0,write:!0}})],Tt.prototype,"area",void 0),s([n({type:xt,json:{read:!0,write:!0}})],Tt.prototype,"perimeter",void 0),Tt=s([o("esri.rest.support.ImageAreaResult")],Tt);const jt=Tt;let Pt=class extends l{constructor(){super(...arguments),this.area=null,this.geometry=null}readGeometry(e,t){return null==e?null:e.rings?h.fromJSON(e):g.fromJSON(e)}};s([n({type:Number,json:{write:!0}})],Pt.prototype,"area",void 0),s([n({json:{name:"shape",write:!0}})],Pt.prototype,"geometry",void 0),s([y("geometry")],Pt.prototype,"readGeometry",null),Pt=s([o("esri.rest.support.ImageBoundaryResult")],Pt);const Nt=Pt;let Ot=class extends Dt{constructor(){super(...arguments),this.distance=null,this.azimuthAngle=null,this.elevationAngle=null}};s([n({type:xt,json:{read:!0,write:!0}})],Ot.prototype,"distance",void 0),s([n({type:Ft,json:{read:!0,write:!0}})],Ot.prototype,"azimuthAngle",void 0),s([n({type:Ft,json:{read:!0,write:!0}})],Ot.prototype,"elevationAngle",void 0),Ot=s([o("esri.rest.support.ImageDistanceResult")],Ot);const _t=Ot;let Ct=class extends(ht(l)){constructor(){super(...arguments),this.id=null}};s([n({json:{write:!0}})],Ct.prototype,"id",void 0),Ct=s([o("esri.rest.support.CameraInfo")],Ct);const At=Ct;let Vt=class extends l{constructor(){super(...arguments),this.id=null,this.name=null,this.acquisitionDate=null,this.cameraID=null,this.center=null,this.gps=null,this.orientation=null}writeAcquisitionDate(e,t){t.acquisitionDate=e?.getTime()}};s([n({json:{write:!0}})],Vt.prototype,"id",void 0),s([n({json:{write:!0}})],Vt.prototype,"name",void 0),s([n({type:Date,json:{write:!0}})],Vt.prototype,"acquisitionDate",void 0),s([a("acquisitionDate")],Vt.prototype,"writeAcquisitionDate",null),s([n({json:{write:!0}})],Vt.prototype,"cameraID",void 0),s([n({type:u,json:{write:!0}})],Vt.prototype,"center",void 0),s([n({json:{write:!0}})],Vt.prototype,"gps",void 0),s([n({json:{write:!0}})],Vt.prototype,"orientation",void 0),Vt=s([o("esri.rest.support.ImageGPSInfo")],Vt);const Mt=Vt;let Jt=class extends l{constructor(){super(...arguments),this.images=null,this.cameras=null}};s([n({type:[Mt],json:{write:!0}})],Jt.prototype,"images",void 0),s([n({type:[At],json:{write:!0}})],Jt.prototype,"cameras",void 0),Jt=s([o("esri.rest.support.ImageGPSInfoResult")],Jt);const Et=Jt;let qt=class extends Dt{constructor(){super(...arguments),this.height=null}};s([n({type:xt,json:{read:!0,write:!0}})],qt.prototype,"height",void 0),qt=s([o("esri.rest.support.ImageHeightResult")],qt);const Gt=qt;let Lt=class extends l{constructor(){super(...arguments),this.catalogItemVisibilities=null,this.catalogItems=null,this.location=null,this.name=null,this.objectId=null,this.processedValues=null,this.properties=null,this.value=null}};s([n({json:{write:!0}})],Lt.prototype,"catalogItemVisibilities",void 0),s([n({type:f,json:{write:!0}})],Lt.prototype,"catalogItems",void 0),s([n({type:u,json:{write:!0}})],Lt.prototype,"location",void 0),s([n({json:{write:!0}})],Lt.prototype,"name",void 0),s([n({json:{write:!0}})],Lt.prototype,"objectId",void 0),s([n({json:{write:!0}})],Lt.prototype,"processedValues",void 0),s([n({json:{write:!0}})],Lt.prototype,"properties",void 0),s([n({json:{write:!0}})],Lt.prototype,"value",void 0),Lt=s([o("esri.rest.support.ImageIdentifyResult")],Lt);const zt=Lt;let Ut=class extends l{constructor(){super(...arguments),this.geometries=null}};s([n({json:{write:!0}})],Ut.prototype,"geometries",void 0),Ut=s([o("esri.rest.support.ImagePixelLocationResult")],Ut);const Ht=Ut;let Bt=class extends Dt{constructor(){super(...arguments),this.point=null}};s([n({type:u,json:{name:"point.value",read:!0,write:!0}})],Bt.prototype,"point",void 0),Bt=s([o("esri.rest.support.ImagePointResult")],Bt);const Qt=Bt;let kt=class extends l{constructor(){super(...arguments),this.attributes=null,this.location=null,this.locationId=null,this.rasterId=null,this.resolution=null,this.pixelValue=null}};s([n({json:{write:!0}})],kt.prototype,"attributes",void 0),s([n({type:u,json:{write:!0}})],kt.prototype,"location",void 0),s([n({json:{write:!0}})],kt.prototype,"locationId",void 0),s([n({json:{write:!0}})],kt.prototype,"rasterId",void 0),s([n({json:{write:!0}})],kt.prototype,"resolution",void 0),s([n({json:{write:!0}})],kt.prototype,"pixelValue",void 0),kt=s([o("esri.rest.support.ImageSample")],kt);const $t=kt;let Wt=class extends l{constructor(){super(...arguments),this.samples=null}};s([n({type:[$t],json:{write:!0}})],Wt.prototype,"samples",void 0),Wt=s([o("esri.rest.support.ImageSampleResult")],Wt);const Zt=Wt;let Kt=class extends l{constructor(){super(...arguments),this.url=null}};s([n({json:{name:"imageURL",write:!0}})],Kt.prototype,"url",void 0),Kt=s([o("esri.rest.support.ImageUrlResult")],Kt);const Xt=Kt;let Yt=class extends l{constructor(){super(...arguments),this.geometry=null,this.length=null,this.area=null,this.center=null}readCenter(e,t){return e.spatialReference||(e={...e,spatialReference:t.Shape.spatialReference}),u.fromJSON(e)}};s([n({types:w,json:{name:"Shape",read:R,write:!0}})],Yt.prototype,"geometry",void 0),s([n({json:{name:"Length",write:!0}})],Yt.prototype,"length",void 0),s([n({json:{name:"Area",write:!0}})],Yt.prototype,"area",void 0),s([n({json:{name:"Center",write:!0}})],Yt.prototype,"center",void 0),s([y("center")],Yt.prototype,"readCenter",null),Yt=s([o("esri.rest.support.MeasureAreaFromImageResult")],Yt);const ei=Yt;let ti=class extends l{constructor(){super(...arguments),this.geometry=null,this.length=null}};s([n({types:w,json:{name:"Shape",read:R,write:!0}})],ti.prototype,"geometry",void 0),s([n({json:{name:"Length",write:!0}})],ti.prototype,"length",void 0),ti=s([o("esri.rest.support.MeasureLengthFromImageResult")],ti);const ii=ti;function ri(e){const t=e?.time;if(t&&(null!=t.start||null!=t.end)){const i=[];null!=t.start&&i.push(t.start),null==t.end||i.includes(t.end)||i.push(t.end),e.time=i.join(",")}}async function si(e,t,i){const r=v(e),s=t.geometry?[t.geometry]:[],n=await I(s),a=t.toJSON();ri(a);const o=n?.[0];null!=o&&(a.geometry=li(o));const l=b({...r.query,f:"json",...a});return S(l,i)}async function ni(e,t,i){const r=v(e),s=t.geometry?[t.geometry]:[];return I(s).then((e=>{const s=t.toJSON(),n=e?.[0];null!=n&&(s.geometry=JSON.stringify(li(n)));const a=b({...r.query,f:"json",...s}),o=S(a,i);return x(r.path+"/identify",o)})).then((e=>zt.fromJSON(e.data)))}async function ai(e,t,i,r){const s=v(e),n=await I(i),a=t.toJSON();null!=n[0]&&(a.fromGeometry=JSON.stringify(li(n[0]))),null!=n[1]&&(a.toGeometry=JSON.stringify(li(n[1])));const o=b({...s.query,f:"json",...a}),l=S(o,r),{data:u}=await x(s.path+"/measure",l);return u}async function oi(e,t,i){const r=v(e),s=t.toJSON(),n=b({...r.query,f:"json",...s}),a=S(n,i),{data:o}=await x(r.path+"/measureFromImage",a);return o}function li(e){const t=e.toJSON();return e.spatialReference?.imageCoordinateSystem&&(t.spatialReference=ui(e.spatialReference)),t}function ui(e){const{imageCoordinateSystem:t}=e;if(t){const{id:e,referenceServiceName:i}=t;return null!=e?i?{icsid:e,icsns:i}:{icsid:e}:{ics:t}}return e.toJSON()}function pi(e,t){if(!e.imageCoordinateSystem)return F(e);const i=ui(e),{icsid:r,icsns:s}=i;return null==r||null!=s&&!t?.toLowerCase().includes("/"+s.toLowerCase()+"/")?JSON.stringify(i):`0:${r}`}let ci=class extends(D(l)){constructor(){super(...arguments),this.fromGeometry=null,this.toGeometry=null,this.objectIds=null,this.where=null,this.maxCount=null}};s([n({type:u,json:{read:!0}})],ci.prototype,"fromGeometry",void 0),s([n({type:u,json:{read:!0,write:!0}})],ci.prototype,"toGeometry",void 0),s([n({json:{write:!0}})],ci.prototype,"objectIds",void 0),s([n({type:String,json:{write:!0}})],ci.prototype,"where",void 0),s([n({type:Number,json:{write:!0}})],ci.prototype,"maxCount",void 0),ci=s([o("esri.rest.support.FindImagesParameters")],ci);const mi=ci;var di;let yi=di=class extends l{constructor(e){super(e),this.angleNames=null,this.point=null,this.spatialReference=null,this.rasterId=null}clone(){return new di(i({angleNames:this.angleNames,point:this.point,spatialReference:this.spatialReference,rasterId:this.rasterId}))}};s([n({type:[String],json:{name:"angleName",write:!0}})],yi.prototype,"angleNames",void 0),s([n({type:u,json:{write:!0}})],yi.prototype,"point",void 0),s([n({type:p,json:{write:!0}})],yi.prototype,"spatialReference",void 0),s([n({type:T,json:{write:!0}})],yi.prototype,"rasterId",void 0),yi=di=s([o("esri.rest.support.ImageAngleParameters")],yi);const hi=yi,gi=new j({esriMensurationPoint:"point",esriMensurationCentroid:"centroid",esriMensurationDistanceAndAngle:"distance-and-angle",esriMensurationAreaAndPerimeter:"area-and-perimeter",esriMensurationHeightFromBaseAndTop:"base-and-top",esriMensurationHeightFromBaseAndTopShadow:"base-and-top-shadow",esriMensurationHeightFromTopAndTopShadow:"top-and-top-shadow",esriMensurationPoint3D:"point-3D",esriMensurationCentroid3D:"centroid-3D",esriMensurationDistanceAndAngle3D:"distance-and-angle-3D",esriMensurationAreaAndPerimeter3D:"area-and-perimeter-3D"});let fi=class extends l{constructor(){super(...arguments),this.type=null,this.measureOperation=null,this.mosaicRule=null,this.pixelSize=null,this.raster=void 0}};var wi;s([n()],fi.prototype,"type",void 0),s([n({type:gi.apiValues,json:{read:gi.read,write:gi.write}})],fi.prototype,"measureOperation",void 0),s([n({type:ge,json:{write:!0}})],fi.prototype,"mosaicRule",void 0),s([n({type:u,json:{write:!0}})],fi.prototype,"pixelSize",void 0),s([n({json:{write:!0}})],fi.prototype,"raster",void 0),fi=s([o("esri.rest.support.BaseImageMeasureParameters")],fi);let Ri=wi=class extends fi{constructor(){super(...arguments),this.type="area-perimeter",this.geometry=null,this.is3D=!1,this.linearUnit="meters",this.areaUnit="square-meters"}writeGeometry(e,t,i){null!=e&&(t.geometryType=P(e),t[i]=e.toJSON())}get measureOperation(){return this.is3D?"area-and-perimeter-3D":"area-and-perimeter"}clone(){return new wi(i({geometry:this.geometry,is3D:this.is3D,linearUnit:this.linearUnit,areaUnit:this.areaUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};s([n({types:w,json:{name:"fromGeometry",read:!0,write:!0}})],Ri.prototype,"geometry",void 0),s([a("geometry")],Ri.prototype,"writeGeometry",null),s([n({type:gi.apiValues,json:{write:gi.write}})],Ri.prototype,"measureOperation",null),s([n({json:{read:!0}})],Ri.prototype,"is3D",void 0),s([n({type:String,json:{read:c.read,write:c.write}})],Ri.prototype,"linearUnit",void 0),s([n({type:String,json:{read:m.read,write:m.write}})],Ri.prototype,"areaUnit",void 0),Ri=wi=s([o("esri.rest.support.ImageAreaParameters")],Ri);const vi=Ri;let bi=class extends(D(l)){constructor(){super(...arguments),this.outSpatialReference=null}};s([n({type:p,json:{name:"outSR",write:!0}})],bi.prototype,"outSpatialReference",void 0),bi=s([o("esri.rest.support.ImageBoundaryParameters")],bi);const Si=bi;var xi;let Ii=xi=class extends fi{constructor(){super(...arguments),this.type="distance-angle",this.fromGeometry=null,this.toGeometry=null,this.is3D=!1,this.linearUnit="meters",this.angularUnit="degrees"}writeFromGeometry(e,t,i){null!=e&&(t.geometryType=P(e),t[i]=e.toJSON())}get measureOperation(){return this.is3D?"distance-and-angle-3D":"distance-and-angle"}clone(){return new xi(i({fromGeometry:this.fromGeometry,toGeometry:this.toGeometry,is3D:this.is3D,linearUnit:this.linearUnit,angularUnit:this.angularUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};s([n({type:u,json:{read:!0,write:!0}})],Ii.prototype,"fromGeometry",void 0),s([a("fromGeometry")],Ii.prototype,"writeFromGeometry",null),s([n({type:u,json:{read:!0,write:!0}})],Ii.prototype,"toGeometry",void 0),s([n({type:gi.apiValues,json:{write:gi.write}})],Ii.prototype,"measureOperation",null),s([n({json:{read:!0}})],Ii.prototype,"is3D",void 0),s([n({type:String,json:{read:c.read,write:c.write}})],Ii.prototype,"linearUnit",void 0),s([n({type:String,json:{read:d.read,write:d.write}})],Ii.prototype,"angularUnit",void 0),Ii=xi=s([o("esri.rest.support.ImageDistanceParameters")],Ii);const Fi=Ii;let Di=class extends(D(l)){constructor(){super(...arguments),this.geometry=null,this.objectIds=null,this.spatialRelationship="intersects",this.timeExtent=null,this.where=null}writeGeometry(e,t,i){null!=e&&(t.geometryType=P(e),t[i]=JSON.stringify(e.toJSON()))}};s([n({types:w,json:{read:R,write:!0}})],Di.prototype,"geometry",void 0),s([a("geometry")],Di.prototype,"writeGeometry",null),s([n({json:{write:!0}})],Di.prototype,"objectIds",void 0),s([N(O,{ignoreUnknown:!1,name:"spatialRel"})],Di.prototype,"spatialRelationship",void 0),s([n({type:_,json:{name:"time",write:!0}})],Di.prototype,"timeExtent",void 0),s([n({type:String,json:{write:!0}})],Di.prototype,"where",void 0),Di=s([o("esri.rest.support.ImageGPSInfoParameters")],Di);const Ti=Di;var ji;let Pi=ji=class extends fi{constructor(){super(...arguments),this.type="height",this.fromGeometry=null,this.toGeometry=null,this.operationType="base-and-top",this.linearUnit="meters"}writeFromGeometry(e,t,i){null!=e&&(t.geometryType=P(e),t[i]=e.toJSON())}get measureOperation(){return this.operationType}clone(){return new ji(i({fromGeometry:this.fromGeometry,toGeometry:this.toGeometry,operationType:this.operationType,linearUnit:this.linearUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};s([n({type:u,json:{read:!0}})],Pi.prototype,"fromGeometry",void 0),s([a("fromGeometry")],Pi.prototype,"writeFromGeometry",null),s([n({type:u,json:{read:!0,write:!0}})],Pi.prototype,"toGeometry",void 0),s([n({type:gi.apiValues,json:{write:gi.write}})],Pi.prototype,"measureOperation",null),s([n({json:{read:!0}})],Pi.prototype,"operationType",void 0),s([n({type:String,json:{read:c.read,write:c.write}})],Pi.prototype,"linearUnit",void 0),Pi=ji=s([o("esri.rest.support.ImageHeightParameters")],Pi);const Ni=Pi;var Oi;let _i=Oi=class extends l{constructor(){super(...arguments),this.geometry=null,this.rasterFunctions=null,this.pixelSize=null,this.returnGeometry=!0,this.returnCatalogItems=!0,this.returnPixelValues=!0,this.maxItemCount=null,this.timeExtent=null,this.raster=void 0,this.viewId=void 0,this.processAsMultidimensional=!1}writeGeometry(e,t,i){null!=e&&(t.geometryType=P(e),t[i]=JSON.stringify(e.toJSON()))}set mosaicRule(e){let t=e;t?.mosaicMethod&&(t=ge.fromJSON({...t.toJSON(),mosaicMethod:t.mosaicMethod,mosaicOperation:t.mosaicOperation})),this._set("mosaicRule",t)}writeMosaicRule(e,t,i){null!=e&&(t[i]=JSON.stringify(e.toJSON()))}get renderingRule(){return C(A.getLogger(this),"renderingRule",{replacement:"rasterFunction",version:"4.27",warnOnce:!0}),this._get("rasterFunction")}set renderingRule(e){C(A.getLogger(this),"renderingRule",{replacement:"rasterFunction",version:"4.27",warnOnce:!0}),this._set("rasterFunction",e)}get renderingRules(){return C(A.getLogger(this),"renderingRules",{replacement:"rasterFunctions",version:"4.27",warnOnce:!0}),this._get("rasterFunctions")}set renderingRules(e){C(A.getLogger(this),"renderingRules",{replacement:"rasterFunctions",version:"4.27",warnOnce:!0}),this._set("rasterFunctions",e)}set rasterFunction(e){let t=e;t?.rasterFunction&&(t=de.fromJSON({...t.toJSON(),rasterFunction:t.rasterFunction,rasterFunctionArguments:t.rasterFunctionArguments})),this._set("rasterFunction",t)}writeRasterFunction(e,t,i){null!=e&&(t[i]=JSON.stringify(e.toJSON())),e.rasterFunctionDefinition&&(t[i]=JSON.stringify(e.rasterFunctionDefinition))}writeRasterFunctions(e,t,i){null!=e&&(t[i]=JSON.stringify(e.map((e=>e.rasterFunctionDefinition||e.toJSON()))))}writePixelSize(e,t,i){null!=e&&(t[i]=JSON.stringify(e))}writeTimeExtent(e,t,i){if(null!=e){const r=null!=e.start?e.start.getTime():null,s=null!=e.end?e.end.getTime():null;t[i]=null!=r?null!=s?`${r},${s}`:`${r}`:null}}clone(){return new Oi(i({geometry:this.geometry,mosaicRule:this.mosaicRule,rasterFunction:this.rasterFunction,rasterFunctions:this.rasterFunctions,pixelSize:this.pixelSize,returnGeometry:this.returnGeometry,returnCatalogItems:this.returnCatalogItems,returnPixelValues:this.returnPixelValues,maxItemCount:this.maxItemCount,processAsMultidimensional:this.processAsMultidimensional,raster:this.raster,viewId:this.viewId,timeExtent:this.timeExtent}))}};s([n({json:{write:!0}})],_i.prototype,"geometry",void 0),s([a("geometry")],_i.prototype,"writeGeometry",null),s([n({type:ge,json:{write:!0}})],_i.prototype,"mosaicRule",null),s([a("mosaicRule")],_i.prototype,"writeMosaicRule",null),s([n({type:de})],_i.prototype,"renderingRule",null),s([n({type:[de]})],_i.prototype,"renderingRules",null),s([n({type:de,json:{write:!0,name:"renderingRule"}})],_i.prototype,"rasterFunction",null),s([a("rasterFunction")],_i.prototype,"writeRasterFunction",null),s([n({type:[de],json:{write:!0,name:"renderingRules"}})],_i.prototype,"rasterFunctions",void 0),s([a("rasterFunctions")],_i.prototype,"writeRasterFunctions",null),s([n({type:u,json:{write:!0}})],_i.prototype,"pixelSize",void 0),s([a("pixelSize")],_i.prototype,"writePixelSize",null),s([n({type:Boolean,json:{write:!0}})],_i.prototype,"returnGeometry",void 0),s([n({type:Boolean,json:{write:!0}})],_i.prototype,"returnCatalogItems",void 0),s([n({type:Boolean,json:{write:!0}})],_i.prototype,"returnPixelValues",void 0),s([n({type:Number,json:{write:!0}})],_i.prototype,"maxItemCount",void 0),s([n({type:_,json:{write:{target:"time"}}})],_i.prototype,"timeExtent",void 0),s([a("timeExtent")],_i.prototype,"writeTimeExtent",null),s([n({json:{write:!0}})],_i.prototype,"raster",void 0),s([n({json:{write:!0}})],_i.prototype,"viewId",void 0),s([n({type:Boolean,json:{write:!0}})],_i.prototype,"processAsMultidimensional",void 0),_i=Oi=s([o("esri.rest.support.ImageIdentifyParameters")],_i);const Ci=_i;var Ai;let Vi=Ai=class extends l{constructor(){super(...arguments),this.geometries=null,this.rasterId=null}writeGeometry(e,t,i){t.geometries={geometryType:"esriGeometryPoint",geometries:e.map((e=>e.toJSON()))}}clone(){return new Ai({geometries:this.geometries?.map((e=>e.clone()))??[],rasterId:this.rasterId})}};s([n({type:[u],json:{write:!0}})],Vi.prototype,"geometries",void 0),s([a("geometries")],Vi.prototype,"writeGeometry",null),s([n({type:T,json:{write:!0}})],Vi.prototype,"rasterId",void 0),Vi=Ai=s([o("esri.rest.support.ImagePixelLocationParameters")],Vi);const Mi=Vi;var Ji;let Ei=Ji=class extends fi{constructor(){super(...arguments),this.type="point",this.geometry=null,this.is3D=!1}writeGeometry(e,t,i){null!=e&&(t.geometryType=P(e),t[i]=e.toJSON())}get measureOperation(){const{is3D:e,geometry:t}=this;return"point"===t.type?e?"point-3D":"point":e?"centroid-3D":"centroid"}clone(){return new Ji(i({geometry:this.geometry,is3D:this.is3D,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};s([n({types:w,json:{name:"fromGeometry",read:R}})],Ei.prototype,"geometry",void 0),s([a("geometry")],Ei.prototype,"writeGeometry",null),s([n({type:gi.apiValues,json:{read:gi.read,write:gi.write}})],Ei.prototype,"measureOperation",null),s([n({json:{read:!0}})],Ei.prototype,"is3D",void 0),Ei=Ji=s([o("esri.rest.support.ImagePointParameters")],Ei);const qi=Ei;var Gi;let Li=Gi=class extends l{constructor(){super(...arguments),this.geometry=null,this.interpolation="nearest",this.mosaicRule=null,this.outFields=null,this.pixelSize=null,this.returnFirstValueOnly=!0,this.sampleDistance=null,this.sampleCount=null,this.sliceId=null,this.timeExtent=null}writeGeometry(e,t,i){null!=e&&(t.geometryType=P(e),t[i]=e.toJSON())}set locations(e){if(e?.length){const t=new V({spatialReference:e[0].spatialReference});t.points=e.map((e=>[e.x,e.y])),this._set("locations",e),this.geometry=t}}clone(){return new Gi(i({geometry:this.geometry,locations:this.locations,interpolation:this.interpolation,mosaicRule:this.mosaicRule,outFields:this.outFields,raster:this.raster,returnFirstValueOnly:this.returnFirstValueOnly,sampleDistance:this.sampleDistance,sampleCount:this.sampleCount,sliceId:this.sliceId,pixelSize:this.pixelSize,timeExtent:this.timeExtent}))}};s([n({types:w,json:{read:R}})],Li.prototype,"geometry",void 0),s([a("geometry")],Li.prototype,"writeGeometry",null),s([n()],Li.prototype,"locations",null),s([n({type:String,json:{type:ye.jsonValues,read:ye.read,write:ye.write}})],Li.prototype,"interpolation",void 0),s([n({type:ge,json:{write:!0}})],Li.prototype,"mosaicRule",void 0),s([n({type:[String],json:{write:!0}})],Li.prototype,"outFields",void 0),s([n({type:u,json:{write:!0}})],Li.prototype,"pixelSize",void 0),s([n({type:String,json:{write:!0}})],Li.prototype,"raster",void 0),s([n({type:Boolean,json:{write:!0}})],Li.prototype,"returnFirstValueOnly",void 0),s([n({type:Number,json:{write:!0}})],Li.prototype,"sampleDistance",void 0),s([n({type:Number,json:{write:!0}})],Li.prototype,"sampleCount",void 0),s([n({type:Number,json:{write:!0}})],Li.prototype,"sliceId",void 0),s([n({type:_,json:{read:{source:"time"},write:{target:"time"}}})],Li.prototype,"timeExtent",void 0),Li=Gi=s([o("esri.rest.support.ImageSampleParameters")],Li);const zi=Li;let Ui=class extends(D(l)){constructor(){super(...arguments),this.geometries=[],this.rasterIds=null,this.outSpatialReference=null}writeGeometries(e,t,i){t.geometries=e?.length?{geometryType:P(e[0]),geometries:e.map((e=>({...e.toJSON(),spatialReference:void 0})))}:null}};s([n({types:[w]})],Ui.prototype,"geometries",void 0),s([a("geometries")],Ui.prototype,"writeGeometries",null),s([n({type:[T],json:{write:!0}})],Ui.prototype,"rasterIds",void 0),s([n({type:p,json:{name:"outSR",write:!0}})],Ui.prototype,"outSpatialReference",void 0),Ui=s([o("esri.rest.support.ImageToMapMultirayParameters")],Ui);const Hi=Ui;let Bi=class extends(D(l)){constructor(){super(...arguments),this.geometry=null,this.rasterId=null,this.outSpatialReference=null,this.depthOffset=0,this.adjust=!1}writeGeometry(e,t,i){null!=e&&(t.geometryType=P(e),t[i]={...e.toJSON(),spatialReference:void 0})}};s([n({types:w,json:{read:R,write:!0}})],Bi.prototype,"geometry",void 0),s([a("geometry")],Bi.prototype,"writeGeometry",null),s([n({json:{write:!0}})],Bi.prototype,"rasterId",void 0),s([n({type:p,json:{name:"outSR",write:!0}})],Bi.prototype,"outSpatialReference",void 0),s([n({json:{name:"options.DOff",write:!0}})],Bi.prototype,"depthOffset",void 0),s([n({json:{name:"options.Adjust",write:!0}})],Bi.prototype,"adjust",void 0),Bi=s([o("esri.rest.support.ImageToMapParameters")],Bi);const Qi=Bi;let ki=class extends(D(l)){constructor(){super(...arguments),this.referenceUri=null}};s([n({type:String,json:{name:"uri",write:!0}})],ki.prototype,"referenceUri",void 0),ki=s([o("esri.rest.support.ImageUrlParameters")],ki);const $i=ki;let Wi=class extends(D(l)){constructor(){super(...arguments),this.geometry=null,this.rasterId=null,this.visibleOnly=!1}writeGeometry(e,t,i){null!=e&&(t.geometryType=P(e),t[i]=JSON.stringify(e))}};s([n({types:w,json:{read:R,write:!0}})],Wi.prototype,"geometry",void 0),s([a("geometry")],Wi.prototype,"writeGeometry",null),s([n({json:{write:!0}})],Wi.prototype,"rasterId",void 0),s([n({json:{name:"options.VisibleOnly",write:!0}})],Wi.prototype,"visibleOnly",void 0),Wi=s([o("esri.rest.support.MapToImageParameters")],Wi);const Zi=Wi;var Ki;let Xi=Ki=class extends l{constructor(){super(...arguments),this.geometry=null,this.rasterId=void 0}writeGeometry(e,t,i){null!=e&&(t.geometryType=P(e),t[i]={...e.toJSON(),spatialReference:void 0})}clone(){const e=i({geometry:this.geometry,rasterId:this.rasterId});return new Ki(e)}};s([n({types:w,json:{name:"fromGeometry",read:R,write:!0}})],Xi.prototype,"geometry",void 0),s([a("geometry")],Xi.prototype,"writeGeometry",null),s([n({json:{write:!0}})],Xi.prototype,"rasterId",void 0),Xi=Ki=s([o("esri.rest.support.MeasureFromImageParameters")],Xi);const Yi=Xi,er=new Set(["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff"]),tr=Q(k,{min:0,max:255}),ir=e=>{let t=class extends e{constructor(){super(...arguments),this._functionRasterInfos={},this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this._cachedRendererJson=null,this._serviceSupportsMosaicRule=null,this._rasterAttributeTableFieldPrefix="Raster.",this.adjustAspectRatio=null,this.bandIds=void 0,this.capabilities=null,this.compressionQuality=void 0,this.compressionTolerance=.01,this.copyright=null,this.defaultMosaicRule=null,this.definitionExpression=null,this.exportImageServiceParameters=null,this.rasterInfo=null,this.fields=null,this.fullExtent=null,this.hasMultidimensions=!1,this.imageMaxHeight=4100,this.imageMaxWidth=4100,this.interpolation=void 0,this.minScale=0,this.maxScale=0,this.multidimensionalInfo=null,this.multidimensionalSubset=null,this.noData=null,this.noDataInterpretation=void 0,this.objectIdField=null,this.geometryType="polygon",this.typeIdField=null,this.types=[],this.pixelFilter=null,this.raster=void 0,this.sourceType=null,this.viewId=void 0,this.symbolizer=null,this.rasterFunctionInfos=null,this.serviceDataType=null,this.spatialReference=null,this.pixelType=null,this.serviceRasterInfo=null,this.sourceJSON=null,this.url=null,this.version=void 0}initialize(){this._set("exportImageServiceParameters",new yt({layer:this}))}readServiceSupportsMosaicRule(e,t){return this._isMosaicRuleSupported(t)}get _rasterFunctionNamesIndex(){const e=new Map;return!this.rasterFunctionInfos||null!=this.rasterFunctionInfos&&this.rasterFunctionInfos.length<1||null!=this.rasterFunctionInfos&&this.rasterFunctionInfos.forEach((t=>{e.set(t.name.toLowerCase().replaceAll(/ /gi,"_"),t.name)})),e}readBandIds(e,t){if(Array.isArray(e)&&e.length>0&&e.every((e=>"number"==typeof e)))return e}readCapabilities(e,t){return this._readCapabilities(t)}writeCompressionQuality(e,t,i){null!=e&&"lerc"!==this.format&&(t[i]=e)}writeCompressionTolerance(e,t,i){"lerc"===this.format&&null!=e&&(t[i]=e)}readDefaultMosaicRule(e,t){return this._serviceSupportsMosaicRule?ge.fromJSON(t):null}get fieldsIndex(){return this.fields?new q(this.fields):null}set format(e){e&&er.has(e.toLowerCase())&&this._set("format",e.toLowerCase())}readFormat(e,t){return"esriImageServiceDataTypeVector-UV"===t.serviceDataType||"esriImageServiceDataTypeVector-MagDir"===t.serviceDataType||null!=this.pixelFilter?"lerc":"jpgpng"}readMinScale(e,t){return null!=t.minLOD&&null!=t.maxLOD?e:0}readMaxScale(e,t){return null!=t.minLOD&&null!=t.maxLOD?e:0}set mosaicRule(e){let t=e;t?.mosaicMethod&&(t=ge.fromJSON({...t.toJSON(),mosaicMethod:t.mosaicMethod,mosaicOperation:t.mosaicOperation})),this._set("mosaicRule",t)}readMosaicRule(e,t){const i=e||t.mosaicRule;return i?ge.fromJSON(i):this._isMosaicRuleSupported(t)?ge.fromJSON(t):null}writeMosaicRule(e,t,i){let r=this.mosaicRule;const s=this.definitionExpression;r?s&&s!==r.where&&(r=r.clone(),r.where=s):s&&(r=new ge({where:s})),this._isValidCustomizedMosaicRule(r)&&(t[i]=r.toJSON())}writeNoData(e,t,i){null!=e&&"number"==typeof e&&(t[i]=tr(e))}readObjectIdField(e,t){if(!e){const i=t.fields.find((e=>"esriFieldTypeOID"===e.type||"oid"===e.type));e=i?.name}return e}get parsedUrl(){return G(this.url)}readSourceType(e,t){return this._isMosaicDataset(t)?"mosaic-dataset":"raster-dataset"}set renderer(e){this.loaded&&(e=this._configRenderer(e)),this._set("renderer",e)}readRenderer(e,t,i){const r=t?.layerDefinition?.drawingInfo?.renderer,s=be(r,i);return null==s?null:("vector-field"===s.type&&t.symbolTileSize&&!r.symbolTileSize&&(s.symbolTileSize=t.symbolTileSize),rt(s)||A.getLogger(this).warn("ArcGISImageService","Imagery layer doesn't support given renderer type."),s)}writeRenderer(e,t,i){t.layerDefinition=t.layerDefinition||{},t.layerDefinition.drawingInfo=t.layerDefinition.drawingInfo||{},t.layerDefinition.drawingInfo.renderer=e.toJSON(),"vector-field"===e.type&&(t.symbolTileSize=e.symbolTileSize)}get rasterFields(){const e=this._rasterAttributeTableFieldPrefix,t=new M({name:"Raster.ItemPixelValue",alias:"Item Pixel Value",domain:null,editable:!1,length:50,type:"string"}),r=new M({name:"Raster.ServicePixelValue",alias:"Service Pixel Value",domain:null,editable:!1,length:50,type:"string"}),s=new M({name:"Raster.ServicePixelValue.Raw",alias:"Raw Service Pixel Value",domain:null,editable:!1,length:50,type:"string"});let n=this.fields?i(this.fields):[];n.push(r),this.capabilities?.operations.supportsQuery&&this.fields&&this.fields.length>0&&n.push(t),this.version>=10.4&&null!=this.rasterFunctionInfos&&this.rasterFunctionInfos.some((e=>"none"===e.name.toLowerCase()))&&n.push(s),null!=this.rasterFunctionInfos&&this.rasterFunctionInfos.filter((e=>"none"!==e.name.toLowerCase())).forEach((e=>{n.push(new M({name:"Raster.ServicePixelValue."+e.name,alias:e.name,domain:null,editable:!1,length:50,type:"string"}))})),this._isVectorDataSet()&&(n.push(new M({name:"Raster.Magnitude",alias:"Magnitude",domain:null,editable:!1,type:"double"})),n.push(new M({name:"Raster.Direction",alias:"Direction",domain:null,editable:!1,type:"double"})));const{attributeTable:a}=this.rasterInfo??{};if(null!=a){const t=a.fields.filter((e=>"esriFieldTypeOID"!==e.type&&"value"!==e.name.toLowerCase())).map((t=>{const r=i(t);return r.name=e+t.name,r}));n=n.concat(t)}return n}get renderingRule(){return C(A.getLogger(this),"renderingRule",{replacement:"rasterFunction",version:"4.27",warnOnce:!0}),this.rasterFunction}set renderingRule(e){C(A.getLogger(this),"renderingRule",{replacement:"rasterFunction",version:"4.27",warnOnce:!0}),this._set("rasterFunction",e)}set rasterFunction(e){let t=e;t?.rasterFunction&&(t=de.fromJSON({...t.toJSON(),rasterFunction:t.rasterFunction,rasterFunctionArguments:t.rasterFunctionArguments})),this._set("rasterFunction",t)}readRasterFunction(e,t){const i=t.rasterFunctionInfos;return t.renderingRule||i?.length&&"None"!==i[0].name?this._isRFTJson(t.renderingRule)?de.fromJSON({rasterFunctionDefinition:t.renderingRule}):de.fromJSON(t.renderingRule||{rasterFunctionInfos:t.rasterFunctionInfos}):null}readSpatialReference(e,t){const i=e||t.extent.spatialReference;return i?p.fromJSON(i):null}readPixelType(e){return ve.fromJSON(e)||e}writePixelType(e,t,i){null!=this.serviceRasterInfo&&this.pixelType===this.serviceRasterInfo.pixelType||(t[i]=ve.toJSON(e))}readVersion(e,t){let i=t.currentVersion;return i||(i=t.hasOwnProperty("fields")||t.hasOwnProperty("timeInfo")?10:9.3),i}applyFilter(e){let t=e;return this.pixelFilter&&(t=this._clonePixelData(e),this.pixelFilter(t)),t}async applyRenderer(e,t){let i=e;const{renderer:r,symbolizer:s,pixelFilter:n,bandIds:a}=this;if(!this._isPicture()&&r&&s&&!n){const n=JSON.stringify(this._cachedRendererJson)!==JSON.stringify(r.toJSON()),o=this._rasterJobHandler.instance;if(o){n&&(s.bind(),await o.updateSymbolizer(s,t),this._cachedRendererJson=r.toJSON());const l=await o.symbolize({bandIds:a,...e},t);i={extent:e.extent,pixelBlock:l}}else i={extent:e.extent,pixelBlock:s.symbolize({bandIds:a,...e})}}return i}destroy(){this._shutdownJobHandler()}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}async computeAngles(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsComputeAngles)throw new L("imagery-layer:compute-angles","this operation is not supported on the input image service");return e=z(hi,e).clone(),async function(e,t,i){const r=t.toJSON();null!=r.angleName&&(r.angleName=r.angleName.join(",")),t?.point?.spatialReference?.imageCoordinateSystem&&(r.point.spatialReference=ui(t.point.spatialReference)),t?.spatialReference?.imageCoordinateSystem&&(r.spatialReference=pi(t.spatialReference));const s=v(e),n=b({...s.query,f:"json",...r}),a=S(n,i),{data:o}=await x(`${s.path}/computeAngles`,a);return o.spatialReference=o.spatialReference?null!=o.spatialReference.geodataXform?new p({wkid:0,imageCoordinateSystem:o.spatialReference}):p.fromJSON(o.spatialReference):null,"NaN"===o.north&&(o.north=null),"NaN"===o.up&&(o.up=null),new bt(o)}(this.url,e,this._getRequestOptions(t))}async computePixelSpaceLocations(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsComputePixelLocation)throw new L("imagery-layer:compute-pixel-space-locations","this operation is not supported on the input image service");return e=z(Mi,e).clone(),async function(e,t,i){const r=t.toJSON(),{geometries:s}=t;if(s)for(let u=0;u<s.length;u++)s[u].spatialReference?.imageCoordinateSystem&&(r.geometries.geometries[u].spatialReference=ui(s[u].spatialReference));const n=v(e),a=b({...n.query,f:"json",...r}),o=S(a,i),{data:l}=await x(`${n.path}/computePixelLocation`,o);return Ht.fromJSON(l)}(this.url,e,this._getRequestOptions(t))}async computeHistograms(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsComputeHistograms)throw new L("imagery-layer:compute-histograms","this operation is not supported on the input image service");return e=z(Se,e).clone(),this._applyMosaicAndRenderingRules(e),async function(e,t,i){const r=await si(e,t,i),s=v(e),{data:n}=await x(`${s.path}/computeHistograms`,r);return{histograms:n.histograms}}(this.url,e,this._getRequestOptions(t))}async computeStatisticsHistograms(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsComputeStatisticsHistograms)throw new L("imagery-layer:compute-statistics-histograms","this operation is not supported on the input image service");return e=z(Se,e).clone(),this._applyMosaicAndRenderingRules(e),async function(e,t,i){const r=await si(e,t,i),s=v(e),{data:n}=await x(`${s.path}/computeStatisticsHistograms`,r),{statistics:a}=n;return a?.length&&a.forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),{statistics:a,histograms:n.histograms}}(this.url,e,this._getRequestOptions(t))}async measureHeight(e,t){const i=await this._fetchCapabilities(t?.signal);if(!("base-and-top"===e.operationType?i.mensuration.supportsHeightFromBaseAndTop:"base-and-top-shadow"===e.operationType?i.mensuration.supportsHeightFromBaseAndTopShadow:i.mensuration.supportsHeightFromTopAndTopShadow))throw new L("imagery-layer:measure-height","this operation is not supported on the input image service");return e=z(Ni,e).clone(),this._applyMosaicAndRenderingRules(e),async function(e,t,i){const r=await ai(e,t,[t.fromGeometry,t.toGeometry],i);return Gt.fromJSON(r)}(this.url,e,this._getRequestOptions(t))}async measureAreaAndPerimeter(e,t){const i=await this._fetchCapabilities(t?.signal);if(!i.mensuration.supportsAreaAndPerimeter||e.is3D&&!i.mensuration.supports3D)throw new L("imagery-layer:measure-area-and-perimeter","this operation is not supported on the input image service");return e=z(vi,e).clone(),this._applyMosaicAndRenderingRules(e),async function(e,t,i){const r=await ai(e,t,[t.geometry],i);return jt.fromJSON(r)}(this.url,e,this._getRequestOptions(t))}async measureDistanceAndAngle(e,t){const i=await this._fetchCapabilities(t?.signal);if(!i.mensuration.supportsDistanceAndAngle||e.is3D&&!i.mensuration.supports3D)throw new L("imagery-layer:measure-distance-and-angle","this operation is not supported on the input image service");return e=z(Fi,e).clone(),this._applyMosaicAndRenderingRules(e),async function(e,t,i){const r=await ai(e,t,[t.fromGeometry,t.toGeometry],i);return _t.fromJSON(r)}(this.url,e,this._getRequestOptions(t))}async measurePointOrCentroid(e,t){const i=await this._fetchCapabilities(t?.signal);if(!i.mensuration.supportsPointOrCentroid||e.is3D&&!i.mensuration.supports3D)throw new L("imagery-layer:measure-point-or-centroid","this operation is not supported on the input image service");return e=z(qi,e).clone(),this._applyMosaicAndRenderingRules(e),async function(e,t,i){const r=await ai(e,t,[t.geometry],i);return Qt.fromJSON(r)}(this.url,e,this._getRequestOptions(t))}async measureLengthFromImage(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsMeasureFromImage)throw new L("imagery-layer:measure-length-from-image","this operation is not supported on the input image service");if("polyline"!==e.geometry.type)throw new L("imagery-layer:measure-length-from-image","this input geometry must be a polyline");return e=z(Yi,e).clone(),async function(e,t,i){const r=await oi(e,t,i);return ii.fromJSON(r)}(this.url,e,this._getRequestOptions(t))}async measureAreaFromImage(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsMeasureFromImage)throw new L("imagery-layer:measure-area-from-image","this operation is not supported on the input image service");if("polygon"!==e.geometry.type)throw new L("imagery-layer:measure-area-from-image","this input geometry must be a polygon");return e=z(Yi,e).clone(),async function(e,t,i){const r=await oi(e,t,i);return ei.fromJSON(r)}(this.url,e,this._getRequestOptions(t))}getField(e){const{fieldsIndex:t}=this;return null!=t?t.get(e):void 0}getFieldDomain(e,t){const i=this.getField(e);return i?i.domain:null}async fetchImage(e,t,i,s={}){if(null==e||null==t||null==i)throw new L("imagery-layer:fetch-image","Insufficient parameters for requesting an image. A valid extent, width and height values are required.");if(this.renderer||this.symbolizer){const e=await this._generateRasterInfo(this.rasterFunction,{signal:s.signal});e&&(this.rasterInfo=e)}const n=this.getExportImageServiceParameters(e,t,i,s.timeExtent);if(null==n){if(s.requestAsImageElement&&this._canRequestImageElement(this.format)){const e=document.createElement("canvas");return e.width=t,e.height=i,s.returnImageBitmap?{imageBitmap:await We(e,`${r(this.parsedUrl)}/exportImage`,s.signal)}:{imageOrCanvasElement:e}}const{bandIds:n,rasterInfo:a}=this,o=(n?.length||a.bandCount)??0,l=t*i,u=a.pixelType,p=[];for(let e=0;e<o;e++)p.push(Me.createEmptyBand(u,l));return{pixelData:{pixelBlock:new Me({width:t,height:i,pixels:p,mask:new Uint8Array(l),pixelType:u}),extent:e}}}const a=!!s.requestAsImageElement&&!this.pixelFilter,o=a&&!!s.returnImageBitmap,l={imageServiceParameters:n,imageProps:{extent:e,width:t,height:i,format:this.format},requestAsImageElement:a,returnImageBitmap:o,signal:s.signal};return this._requestArrayBuffer(l)}fetchKeyProperties(e){return x(r(this.parsedUrl)+"/keyProperties",{query:this._getQueryParams({renderingRule:this.version>=10.3?e?.rasterFunction:null})}).then((e=>e.data))}fetchRasterAttributeTable(e){return this.version<10.1?Promise.reject(new L("#fetchRasterAttributeTable()","Failed to get rasterAttributeTable")):x(r(this.parsedUrl)+"/rasterAttributeTable",{query:this._getQueryParams({renderingRule:this.version>=10.3?e?.rasterFunction:null})}).then((e=>f.fromJSON(e.data)))}getCatalogItemRasterInfo(e,t){const i={...t,query:this._getQueryParams()};return async function(e,t,i){const r=v(e),s=b({...r?.query,f:"json"}),n=S(s,i),a=`${r?.path}/${t}/info`,o=x(`${a}`,n),l=x(`${a}/keyProperties`,n),p=await Promise.allSettled([o,l]),c="fulfilled"===p[0].status?p[0].value.data:null,m="fulfilled"===p[1].status?p[1].value.data:null;let d=null;c.statistics?.length&&(d=c.statistics.map((e=>({min:e[0],max:e[1],avg:e[2],stddev:e[3]}))));const y=g.fromJSON(c.extent),h=Math.ceil(y.width/c.pixelSizeX-.1),f=Math.ceil(y.height/c.pixelSizeY-.1),w=y.spatialReference,R=new u({x:c.pixelSizeX,y:c.pixelSizeY,spatialReference:w}),I=c.histograms?.length?c.histograms:null,F=new He({origin:c.origin,blockWidth:c.blockWidth,blockHeight:c.blockHeight,firstPyramidLevel:c.firstPyramidLevel,maximumPyramidLevel:c.maxPyramidLevel});return new Be({width:h,height:f,bandCount:c.bandCount,extent:y,spatialReference:w,pixelSize:R,pixelType:c.pixelType.toLowerCase(),statistics:d,histograms:I,keyProperties:m,storageInfo:F})}(r(this.parsedUrl),e,i)}async getCatalogItemICSInfo(e,t){const{data:i}=await x(r(this.parsedUrl)+"/"+e+"/info/ics",{query:this._getQueryParams(),...t}),s=i?.ics;if(!s)return;let n=null;try{n=(await x(r(this.parsedUrl)+"/"+e+"/info",{query:this._getQueryParams(),...t})).data.extent}catch{}if(!n||!n.spatialReference)return{ics:s,icsToPixelTransform:null,icsExtent:null,northDirection:null};const a=this.version>=10.7?x(r(this.parsedUrl)+"/"+e+"/info/icstopixel",{query:this._getQueryParams(),...t}).then((e=>e.data)).catch((()=>({}))):{},o=n.spatialReference,l={geometries:JSON.stringify({geometryType:"esriGeometryEnvelope",geometries:[n]}),inSR:F(o),outSR:"0:"+e},u=x(r(this.parsedUrl)+"/project",{query:this._getQueryParams(l),...t}).then((e=>e.data)).catch((()=>({}))),c=(n.xmin+n.xmax)/2,m=(n.ymax-n.ymin)/6,d=n.ymin+m,y=[];for(let r=0;r<5;r++)y.push({x:c,y:d+m*r});const h={geometries:JSON.stringify({geometryType:"esriGeometryPoint",geometries:y}),inSR:F(o),outSR:"0:"+e},f=x(r(this.parsedUrl)+"/project",{query:this._getQueryParams(h),...t}).then((e=>e.data)).catch((()=>({}))),w=await Promise.all([a,u,f]);let R=w[0].ipxf;if(null==R){const e=s.geodataXform?.xf_0;"topup"===e?.name?.toLowerCase()&&6===e?.coefficients?.length&&(R={affine:{name:"ics [sensor: Frame] to pixel (column, row) transformation",coefficients:e.coefficients,cellsizeRatio:0,type:"GeometricXform"}})}const v=g.fromJSON(w[1]?.geometries?.[0]);v&&(v.spatialReference=new p({wkid:0,imageCoordinateSystem:s}));const b=w[2].geometries?w[2].geometries.filter((e=>null!=e?.x&&null!=e.y&&"NaN"!==e.x&&"NaN"!==e.y)):[],S=b.length;if(S<3)return{ics:s,icsToPixelTransform:R,icsExtent:v,northDirection:null};let I=0,D=0,T=0,j=0;for(let r=0;r<S;r++)I+=b[r].x,D+=b[r].y,T+=b[r].x*b[r].x,j+=b[r].x*b[r].y;const P=(S*j-I*D)/(S*T-I*I);let N=0;const O=b[4].x>b[0].x,_=b[4].y>b[0].y;return P===1/0?N=_?90:270:0===P?N=O?0:180:P>0?N=O?180*Math.atan(P)/Math.PI:180*Math.atan(P)/Math.PI+180:P<0&&(N=_?180+180*Math.atan(P)/Math.PI:360+180*Math.atan(P)/Math.PI),{ics:s,icsToPixelTransform:R,icsExtent:v,northDirection:N}}async generateRasterInfo(e,t){if(e=z(de,e),this.serviceRasterInfo&&(!e||"none"===e.functionName?.toLowerCase()||this._isVectorFieldResampleFunction(e)))return this.serviceRasterInfo;const i=function(e){if(!e)return null;const t=JSON.stringify(e).match(/"rasterFunction":"(.*?")/gi),i=t?.map((e=>e.replace('"rasterFunction":"',"").replace('"',"")));return i?i.join("/"):null}(e);if(!i)throw new L("imagery-layer:generate-raster-info","the rendering rule is not supported");if(this._functionRasterInfos[i])return this._functionRasterInfos[i];const s={...t,query:this._getQueryParams()},n=xe(r(this.parsedUrl),e,s);this._functionRasterInfos[i]=n;try{return await n}catch(Xi){throw this._functionRasterInfos[i]=null,Xi}}getExportImageServiceParameters(e,t,i,s){const n=pi((e=e.clone().shiftCentralMeridian()).spatialReference,r(this.parsedUrl));this.pixelType!==this.serviceRasterInfo.pixelType&&(this.exportImageServiceParameters.pixelType=this.pixelType);const a=this.exportImageServiceParameters.toJSON(),{bandIds:o,noData:l}=a;let{renderingRule:u}=a;const p=this.rasterFunction?.rasterFunctionDefinition,c=!this.renderer||"raster-stretch"===this.renderer.type;if(o?.length&&this._hasRasterFunction(this.rasterFunction)&&!p&&c){const e={rasterFunction:"ExtractBand",rasterFunctionArguments:{BandIds:o}};if("Stretch"===u.rasterFunction)e.rasterFunctionArguments.Raster=u.rasterFunctionArguments.Raster,u.rasterFunctionArguments.Raster=e;else if("Colormap"===u.rasterFunction){const t=u.rasterFunctionArguments.Raster;"Stretch"===t?.rasterFunction?(e.rasterFunctionArguments.Raster=t.rasterFunctionArguments.Raster,t.rasterFunctionArguments.Raster=e):(e.rasterFunctionArguments.Raster=t,u.rasterFunctionArguments.Raster=e)}else e.rasterFunctionArguments.Raster=u,u=e;a.bandIds=void 0}else a.bandIds=o?.join(",");l instanceof Array&&l.length>0&&(a.noData=l.join(","));const m=this._processMultidimensionalIntersection(null,s,this.exportImageServiceParameters.mosaicRule);if(m.isOutSide)return null;a.mosaicRule=null!=m.mosaicRule?JSON.stringify(m.mosaicRule):null,s=m.timeExtent,a.renderingRule=this._getRenderingRuleString(de.fromJSON(u));const d={};if(null!=s){const{start:e,end:t}=s.toJSON();e&&t&&e===t?d.time=""+e:null==e&&null==t||(d.time=`${e??"null"},${t??"null"}`)}return{bbox:e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:n,imageSR:n,size:t+","+i,...a,...d}}async getSamples(e,t){const i=await this._fetchCapabilities(t?.signal);if(!i?.operations.supportsGetSamples)throw new L("imagery-layer:get-samples","getSamples operation is not supported on the input image service");e=z(zi,e).clone();const{raster:r}=this;return r&&null==e.raster&&(e.raster=r),async function(e,t,i){const r=t.toJSON();ri(r),r.outFields?.length&&(r.outFields=r.outFields.join(","));const s=await I(t.geometry),n=s?.[0];null!=n&&(r.geometry=li(n));const a=v(e),o=b({...a.query,f:"json",...r}),l=S(o,i),{data:u}=await x(`${a.path}/getSamples`,l),p=u?.samples?.map((e=>{const t="NaN"===e.value||""===e.value?null:e.value.split(" ").map((e=>Number(e)));return{...e,pixelValue:t}}));return Zt.fromJSON({samples:p})}(this.url,e,this._getRequestOptions(t))}async identify(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsIdentify)throw new L("imagery-layer:identify","identify operation is not supported on the input image service");e=z(Ci,e).clone(),this.version<10.91&&"extent"===e.geometry?.type&&(e.geometry=h.fromExtent(e.geometry));const i=this._processMultidimensionalIntersection(e.geometry,e.timeExtent,e.mosaicRule||this.mosaicRule);if(i.isOutSide)throw new L("imagery-layer:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");e.timeExtent=i.timeExtent,e.mosaicRule=i.mosaicRule;const{raster:r,rasterFunction:s}=this;return s&&null==e.rasterFunction&&(e.rasterFunction=s),r&&null==e.raster&&(e.raster=r),ni(this.url,e,this._getRequestOptions(t))}async imageToMap(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsImageToMap)throw new L("imagery-layer:image-to-map","imageToMap operation is not supported on the input image service");return e=z(Qi,e),async function(e,t,i){const r=t.toJSON();t.geometry.spatialReference.imageCoordinateSystem&&(r.geometry=li(t.geometry)),t.depthOffset&&t.adjust||delete r.options;const s=v(e),n=b({...s.query,f:"json",...r}),a=S(n,i),{data:o}=await x(`${s.path}/imageToMap`,a);return R(o)}(r(this.parsedUrl),e,this._getRequestOptions(t))}async imageToMapMultiray(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsImageToMapMultiray)throw new L("imagery-layer:image-to-map-multiray","imageToMapMultiray operation is not supported on the input image service");return e=z(Hi,e),async function(e,t,i){const r=t.toJSON();t.rasterIds?.length&&(r.rasterIds=t.rasterIds.join(","));const s=v(e),n=b({...s.query,f:"json",...r}),a=S(n,i),{data:o}=await x(`${s.path}/imageToMapMultiray`,a);return R(o)}(r(this.parsedUrl),e,this._getRequestOptions(t))}async mapToImage(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsMapToImage)throw new L("imagery-layer:map-to-image","mapToImage operation is not supported on the input image service");return e=z(Zi,e),async function(e,t,i){const r=t.toJSON(),s=await I(t.geometry),n=s?.[0];null!=n&&(r.geometry=li(n)),t.visibleOnly||delete r.options;const a=n?.spatialReference??t.geometry?.spatialReference;a&&(r.inSR=pi(a));const o=v(e),l=b({...o.query,f:"json",...r}),u=S(l,i),{data:p}=await x(`${o.path}/mapToImage`,u);return R(p)}(r(this.parsedUrl),e,this._getRequestOptions(t))}async findImages(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsFindImages)throw new L("imagery-layer:find-images","findImages operation is not supported on the input image service");return e=z(mi,e),async function(e,t,i){const r=t.toJSON(),s=await I([t.fromGeometry,t.toGeometry]);null!=s[0]&&(r.fromGeometry=li(s[0]),s[0].spatialReference&&(r.inSR=pi(s[0].spatialReference))),null!=s[1]&&(r.toGeometry=li(s[1])),t.objectIds?.length&&(r.objectIds=r.objectIds.join(","));const n=v(e),a=b({...n.query,f:"json",...r}),o=S(a,i),{data:l}=await x(`${n.path}/find`,o);return Rt.fromJSON(l)}(r(this.parsedUrl),e,this._getRequestOptions(t))}async getImageUrl(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsGetImageUrl)throw new L("imagery-layer:get-image-url","getImageUrl operation is not supported on the input image service");return e=z($i,e),async function(e,t,i){const r=t.toJSON(),s=v(e),n=b({...s.query,f:"json",...r}),a=S(n,i),{data:o}=await x(`${s.path}/getImageUrl`,a);return Xt.fromJSON(o)}(r(this.parsedUrl),e,this._getRequestOptions(t))}createQuery(){const e=new U;return e.outFields=["*"],e.returnGeometry=!0,e.where=this.definitionExpression||"1=1",e}async queryBoundary(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsQueryBoundary)throw new L("imagery-layer:query-boundary","queryBoundary operation is not supported on the input image service");return e=z(Si,e??{outSpatialReference:this.spatialReference}).clone(),async function(e,t,i){const r=v(e),s=t.toJSON();t.outSpatialReference&&(s.outSR=pi(t.outSpatialReference));const n=b({...r.query,f:"json",...s}),a=S(n,i),{data:o}=await x(r.path+"/queryBoundary",a);return Nt.fromJSON(o)}(r(this.parsedUrl),e,this._getRequestOptions(t))}async queryRasters(e,t){return({query:e,requestOptions:t}=await this._prepareForQuery(e,t)),Ze(this.url,e,t)}async queryObjectIds(e,t){return({query:e,requestOptions:t}=await this._prepareForQuery(e,t)),Ke(this.url,e,t)}async queryGPSInfo(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsQueryGPSInfo)throw new L("imagery-layer:query-gps-info","queryGPSInfo operation is not supported on the input image service");return e=z(Ti,e??{outSpatialReference:this.spatialReference}).clone(),async function(e,t,i){const r=t.toJSON();ri(r),r.objectIds?.length&&(r.objectIds=r.objectIds.join(",")),r.geometry||r.objectIds||r.time||r.where||(r.where="1=1");const s=await I(t.geometry),n=s?.[0];null!=n&&(r.geometry=li(n));const a=n?.spatialReference??t.geometry?.spatialReference;a&&(r.inSR=pi(a));const o=v(e),l=b({...o.query,f:"json",...r}),u=S(l,i),{data:p}=await x(`${o.path}/queryGPSInfo`,u);return Et.fromJSON(p)}(r(this.parsedUrl),e,this._getRequestOptions(t))}async queryRasterCount(e,t){return({query:e,requestOptions:t}=await this._prepareForQuery(e,t)),Xe(this.url,e,t)}async queryVisibleRasters(e,t){if(!e)throw new L("imagery-layer: query-visible-rasters","missing query parameter");await this.load();const{pixelSize:i,returnDomainValues:r,returnTopmostRaster:s,showNoDataRecords:n}=t||{pixelSize:null,returnDomainValues:!1,returnTopmostRaster:!1,showNoDataRecords:!1};let a=!1,o=null,l=null;const u="raster.servicepixelvalue",p=this._rasterFunctionNamesIndex;if(null!=e.outFields&&(a=e.outFields.some((e=>!e.toLowerCase().includes(u))),this.version>=10.4)){const t=e.outFields.filter((e=>e.toLowerCase().includes(u)&&e.length>24)).map((e=>{const t=e.slice(25);return[this._updateRenderingRulesFunctionName(t,p),t]}));o=t.map((e=>new de({functionName:e[0]}))),l=t.map((e=>e[1]));const{rasterFunction:i}=this;0===o.length?i?.functionName?(o.push(i),l.push(i.functionName)):o=null:i?.functionName&&!o.some((e=>e.functionName===i.functionName))&&(o.push(i),l.push(i.functionName))}const c=null==e.outSpatialReference||e.outSpatialReference.equals(this.spatialReference),{multidimensionalSubset:m}=this;let d=e.timeExtent||this.timeExtent;if(m){const{isOutside:t,intersection:i}=Oe(m,{geometry:e.geometry,timeExtent:e.timeExtent,multidimensionalDefinition:this.exportImageServiceParameters.mosaicRule?.multidimensionalDefinition});if(t)throw new L("imagery-layer:query-visible-rasters","the request cannot be fulfilled when falling outside of the multidimensional subset");null!=i?.timeExtent&&(d=i.timeExtent)}const y=this._combineMosaicRuleWithTimeExtent(this.exportImageServiceParameters.mosaicRule,d);let g=e.geometry;this.version<10.91&&"extent"===g?.type&&(g=h.fromExtent(g));const f=this._getQueryParams({geometry:g,timeExtent:d,mosaicRule:y,rasterFunction:this.version<10.4?this.rasterFunction:null,rasterFunctions:o,pixelSize:i,returnCatalogItems:a,returnGeometry:c,raster:this.raster,maxItemCount:s?1:null});delete f.f;const w=new Ci(f);try{await this._generateRasterInfo(this.rasterFunction);const i=await ni(this.url,w,{signal:t?.signal,query:{...this.customParameters}}),s=e.outFields,o=null!=i.value&&i.value.toLowerCase().includes("nodata");if(!a||c||!i?.catalogItems?.features.length||!n&&o)return this._processVisibleRastersResponse(i,{returnDomainValues:r,templateRRFunctionNames:l,showNoDataRecords:n,templateFields:s});const u=this.objectIdField||"ObjectId",p=i.catalogItems?.features??[],m=p.map((e=>e.attributes?.[u])),d=new U({objectIds:m,returnGeometry:!0,outSpatialReference:e.outSpatialReference,outFields:[u]}),y=await this.queryRasters(d);return y?.features?.length&&y.features.forEach((t=>{p.forEach((i=>{i.attributes[u]===t.attributes[u]&&(i.geometry=new h(t.geometry),null!=e.outSpatialReference&&(i.geometry.spatialReference=e.outSpatialReference))}))})),this._processVisibleRastersResponse(i,{returnDomainValues:r,templateRRFunctionNames:l,showNoDataRecords:n,templateFields:s})}catch{throw new L("imagery-layer:query-visible-rasters","encountered error when querying visible rasters")}}async fetchVariableStatisticsHistograms(e,t){const i=x(r(this.parsedUrl)+"/statistics",{query:this._getQueryParams({variable:e}),signal:t}).then((e=>e.data?.statistics)),s=x(r(this.parsedUrl)+"/histograms",{query:this._getQueryParams({variable:e}),signal:t}).then((e=>e.data?.histograms)),n=await Promise.all([i,s]);return n[0]&&n[0].forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),{statistics:n[0]||null,histograms:n[1]||null}}async createFlowMesh(e,t){const i=this._rasterJobHandler.instance;return i?i.createFlowMesh(e,t):Je(e.meshType,e.simulationSettings,e.flowData,null!=t.signal?t.signal:(new AbortController).signal)}getMultidimensionalSubsetVariables(e){const t=e??this.serviceRasterInfo.multidimensionalInfo;return _e(this.multidimensionalSubset,t)}async _fetchService(e){await this._fetchServiceInfo(e),this.rasterInfo||(this.rasterInfo=this.serviceRasterInfo);const t=this.sourceJSON,i=null!=this.serviceRasterInfo?Promise.resolve(this.serviceRasterInfo):Ie(r(this.parsedUrl),t,{signal:e,query:this._getQueryParams()}).then((e=>(this._set("serviceRasterInfo",e),this._set("multidimensionalInfo",e.multidimensionalInfo),Fe(e,t),e))),s=this._hasRasterFunction(this.rasterFunction)?this._generateRasterInfo(this.rasterFunction,{signal:e}):null,n=this._getRasterFunctionInfos();return Promise.all([i,s,n]).then((e=>{e[1]?this._set("rasterInfo",e[1]):this._set("rasterInfo",e[0]),e[2]&&this._set("rasterFunctionInfos",e[2]),this.renderer&&!this._isSupportedRenderer(this.renderer)&&(this._set("renderer",null),A.getLogger(this).warn("ArcGISImageService","Switching to the default renderer. Renderer applied is not valid for this Imagery Layer")),this._set("renderer",this._configRenderer(this.renderer)),this.addHandles([H((()=>this.rasterFunction),(e=>{(this.renderer||this.symbolizer||this.popupEnabled&&this.popupTemplate)&&this._generateRasterInfo(e).then((e=>{e&&(this.rasterInfo=e)}))}))]);const{serviceRasterInfo:t}=this;null!=t.multidimensionalInfo&&this._updateMultidimensionalDefinition(t)}))}_combineMosaicRuleWithTimeExtent(e,t){const i=this.timeInfo,{multidimensionalInfo:r}=this.serviceRasterInfo;if(null==e||null==r||null==t||null==i?.startField)return e;const{startField:s}=i,n=r.variables.some((e=>e.dimensions.some((e=>e.name===s))))?s:"StdTime";if(e=e.clone(),"mosaic-dataset"===this.sourceType)return e.multidimensionalDefinition=e.multidimensionalDefinition?.filter((e=>e.dimensionName!==n)),this._cleanupMultidimensionalDefinition(e);e.multidimensionalDefinition=e.multidimensionalDefinition||[];const a=e.multidimensionalDefinition.filter((e=>e.dimensionName===n)),o=null!=t.start?t.start.getTime():null,l=null!=t.end?t.end.getTime():null,u=null==o||null==l||o===l,p=u?[o||l]:[[o,l]],c=this.version>=10.8;if(a.length)a.forEach((e=>{e.dimensionName===n&&(c?(e.dimensionName=null,e.isSlice=!1,e.values=[]):(e.isSlice=u,e.values=p))}));else if(!c){const t=e.multidimensionalDefinition.filter((e=>null!=e.variableName&&null==e.dimensionName));t.length?t.forEach((e=>{e.dimensionName=n,e.isSlice=u,e.values=p})):e.multidimensionalDefinition.push(new Ce({variableName:"",dimensionName:n,isSlice:u,values:p}))}return this._cleanupMultidimensionalDefinition(e)}_cleanupMultidimensionalDefinition(e){return null==e?null:(e.multidimensionalDefinition&&(e.multidimensionalDefinition=e.multidimensionalDefinition.filter((e=>!(!e.variableName&&!e.dimensionName))),0===e.multidimensionalDefinition.length&&(e.multidimensionalDefinition=null)),"mosaic-dataset"!==this.sourceType&&null==e.multidimensionalDefinition?null:e)}async _prepareForQuery(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsQuery)throw new L("imagery-layer:query-rasters","query operation is not supported on the input image service");return e=null!=e?z(U,e):this.createQuery(),t=this._getRequestOptions(t),this.raster&&(t.query={...t.query,raster:this.raster}),{query:e,requestOptions:t}}async _initJobHandler(){if(null!=this._rasterJobHandler.connectionPromise)return this._rasterJobHandler.connectionPromise;const e=new Ne;this._rasterJobHandler.connectionPromise=e.initialize().then((()=>{this._rasterJobHandler.instance=e}),(()=>{})),await this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this._cachedRendererJson=null}_isSupportedRenderer(e){const{rasterInfo:t,rasterFunction:i}=this;return"unique-value"===e.type&&this._hasRasterFunction(i)&&1===t?.bandCount&&["u8","s8"].includes(t.pixelType)||null!=t&&null!=e&&De(t).includes(e.type)}async _fetchCapabilities(e){return this.capabilities||await this._fetchServiceInfo(e),this.capabilities}async _fetchServiceInfo(e){let t=this.sourceJSON;if(!t){const{data:i,ssl:s}=await x(r(this.parsedUrl),{query:this._getQueryParams(),signal:e});t=i,this.sourceJSON=t,s&&(this.url=this.url.replace(/^http:/i,"https:"))}if(t.capabilities?.toLowerCase().split(",").map((e=>e.trim())).indexOf("tilesonly")>-1)throw new L("imagery-layer:fetch-service-info","use ImageryTileLayer to open tiles-only image services");this.read(t,{origin:"service",url:this.parsedUrl})}_isMosaicDataset(e){return e.serviceSourceType?"esriImageServiceSourceTypeMosaicDataset"===e.serviceSourceType:e.fields?.length>0}_isMosaicRuleSupported(e){if(!e)return!1;const t=this._isMosaicDataset(e),i=e.currentVersion>=10.71&&e.hasMultidimensions&&!(e.fields?.length>1);return t||i}_isVectorFieldResampleFunction(e){if(null==e)return!1;const{functionName:t,functionArguments:i}=e,r="resample"===t?.toLowerCase(),s=i?.ResampleType||i?.resampleType;return r&&(7===s||10===s)}_isPicture(){return!this.format||this.format.includes("jpg")||this.format.includes("png")}_configRenderer(e){const t=this._isPicture(),{rasterInfo:i}=this;if(!t&&!this.pixelFilter||this._isVectorDataSet()){if(!this.bandIds&&i.bandCount>=3){const e=Te(i);!e||3===i.bandCount&&0===e[0]&&1===e[1]&&2===e[2]||(this.bandIds=e)}e||(e=je(i,{bandIds:this.bandIds,variableName:this.rasterFunction?null:this.mosaicRule?.multidimensionalDefinition?.[0].variableName}));const t=Pe(e.toJSON());this.symbolizer?(this.symbolizer.rendererJSON=t,this.symbolizer.rasterInfo=i):this.symbolizer=new Qe({rendererJSON:t,rasterInfo:i}),this.symbolizer.bind().success||(this.symbolizer=null)}return e}_clonePixelData(e){return null==e?e:{extent:e.extent&&e.extent.clone(),pixelBlock:null!=e.pixelBlock?e.pixelBlock.clone():null}}_getQueryParams(e){null!=e?.renderingRule&&"string"!=typeof e.renderingRule&&(e.renderingRule=this._getRenderingRuleString(e.renderingRule));const{raster:t,viewId:i}=this;return{raster:t,viewId:i,f:"json",...e,...this.customParameters}}_getRequestOptions(e){return{...e,query:{...e?.query,...this.customParameters}}}_decodePixelBlock(e,t,i){return this._rasterJobHandler.instance?this._rasterJobHandler.instance.decode({data:e,options:t}):ke(e,t,i)}async _getRasterFunctionInfos(e){const t=this.sourceJSON.rasterFunctionInfos;if(this.loaded)return t;if(t&&this.version>=10.3){if(1===t.length&&"none"===t[0].name.toLowerCase())return t;const i=await x(r(this.parsedUrl)+"/rasterFunctionInfos",{query:this._getQueryParams(),signal:e});return i.data?.rasterFunctionInfos}return null}_canRequestImageElement(e){return!this.pixelFilter&&(!e||e.includes("png"))}async _requestArrayBuffer(e){const{imageProps:t,requestAsImageElement:i,returnImageBitmap:s,signal:n}=e;if(i&&this._canRequestImageElement(t.format)){const i=`${r(this.parsedUrl)}/exportImage`,{data:a}=await x(i,{responseType:s?"blob":"image",query:this._getQueryParams({f:"image",...this.refreshParameters,...e.imageServiceParameters}),signal:n});return a instanceof Blob?{imageBitmap:await We(a,i,n),params:t}:{imageOrCanvasElement:a,params:t}}const a=this._initJobHandler(),o=x(r(this.parsedUrl)+"/exportImage",{responseType:"array-buffer",query:this._getQueryParams({f:"image",...e.imageServiceParameters}),signal:n}),l=(await Promise.all([o,a]))[0].data,u=t.format||"jpgpng";let p=u;if("bsq"!==p&&"bip"!==p&&(p=$e(l)),!p)throw new L("imagery-layer:fetch-image","unsupported format signature "+String.fromCharCode.apply(null,new Uint8Array(l)));const c={signal:n},m="gif"===u||"bmp"===u||u.includes("png")&&("png"===p||"jpg"===p)?ke(l,{useCanvas:!0,...t},c):this._decodePixelBlock(l,{width:t.width,height:t.height,planes:null,pixelType:null,noDataValue:null,format:u},c);return{pixelData:{pixelBlock:await m,extent:t.extent},params:t}}_generateRasterInfo(e,t){return this.generateRasterInfo(e,t).catch((()=>null))}_isValidCustomizedMosaicRule(e){return e&&JSON.stringify(e.toJSON())!==JSON.stringify(this.defaultMosaicRule?.toJSON())}_updateMultidimensionalDefinition(e){if(this._isValidCustomizedMosaicRule(this.mosaicRule))return;let t=Ae(e,{multidimensionalSubset:this.multidimensionalSubset});if(null!=t&&t.length>0){this.mosaicRule=this.mosaicRule||new ge;const e=this.mosaicRule.multidimensionalDefinition;!this.sourceJSON.defaultVariableName&&this.rasterFunction&&"none"!==this.rasterFunction.functionName?.toLowerCase()&&t.forEach((e=>e.variableName="")),t=t.filter((({variableName:e,dimensionName:t})=>e&&"*"!==e||t)),!e?.length&&t.length&&(this.mosaicRule.multidimensionalDefinition=t)}}_processVisibleRastersResponse(e,t){t=t||{};const i=e.value,{templateRRFunctionNames:r,showNoDataRecords:s,returnDomainValues:n,templateFields:a}=t,o=e.processedValues;let l=e.catalogItems?.features,u=e.properties?.Values?.map((e=>e.replaceAll(/ /gi,", ")))||[];const p=this.objectIdField||"ObjectId",c="string"==typeof i&&i.toLowerCase().includes("nodata"),m=[];if(i&&!l&&!c){const e={};e[p]=0,u=[i],l=[new B(this.fullExtent,null,e)]}if(!l)return[];let d,y,h;this._updateResponseFieldNames(l,a),c&&!s&&(l=[]);for(let g=0;g<l.length;g++){if(d=l[g],null!=i){if(y=u[g],h=this.rasterFunction&&o&&o.length>0&&r&&r.length>0&&r.includes(this.rasterFunction.functionName)?o[r.indexOf(this.rasterFunction.functionName)]:i,"nodata"===y.toLowerCase()&&!s)continue;const e="Raster.ItemPixelValue",t="Raster.ServicePixelValue";d.attributes[e]=y,d.attributes[t]=h,this._updateFeatureWithMagDirValues(d,y);const n=this.fields&&this.fields.length>0;let a=this.rasterFunction&&null!=this.serviceRasterInfo.attributeTable?n?y:i:h;this.rasterFunction||(a=n?y:i),this._updateFeatureWithRasterAttributeTableValues(d,a)}if(d.sourceLayer=d.layer=this,n&&this._updateFeatureWithDomainValues(d),r&&o&&r.length===o.length)for(let e=0;e<r.length;e++){const t="Raster.ServicePixelValue."+r[e];d.attributes[t]=o[e]}m.push(l[g])}return m}_processMultidimensionalIntersection(e,t,i){const{multidimensionalSubset:r}=this;if(!r)return{isOutSide:!1,timeExtent:t,mosaicRule:i=this._combineMosaicRuleWithTimeExtent(i,t)};if(r){const{isOutside:i,intersection:s}=Oe(r,{geometry:e,timeExtent:t});if(i)return{isOutSide:!0,timeExtent:null,mosaicRule:null};null!=s?.timeExtent&&(t=s.timeExtent)}if(i=this._combineMosaicRuleWithTimeExtent(i,t),i?.multidimensionalDefinition){const{isOutside:e}=Oe(r,{multidimensionalDefinition:i.multidimensionalDefinition});if(e)return{isOutSide:!0,timeExtent:null,mosaicRule:null}}return{isOutSide:!1,timeExtent:t,mosaicRule:i}}_updateFeatureWithRasterAttributeTableValues(e,t){const i=this.rasterInfo.attributeTable||this.serviceRasterInfo.attributeTable;if(null==i)return;const{features:r,fields:s}=i,n=s.map((e=>e.name)).find((e=>"value"===e.toLowerCase()));if(!n)return;const a=r.filter((e=>e.attributes[n]===(null!=t?parseInt(t,10):null)));a&&a[0]&&s.forEach((t=>{const i=this._rasterAttributeTableFieldPrefix+t.name;e.attributes[i]=a[0].attributes[t.name]}))}_updateFeatureWithMagDirValues(e,t){if(!this._isVectorDataSet())return;const i=t.split(/,\s*/).map((e=>parseFloat(e))),r=i.map((e=>[e])),s=i.map((e=>({minValue:e,maxValue:e,noDataValue:null}))),n=new Me({height:1,width:1,pixelType:"f32",pixels:r,statistics:s});null!=this.pixelFilter&&this.pixelFilter({pixelBlock:n,extent:new g(0,0,0,0,this.spatialReference)});const a="esriImageServiceDataTypeVector-MagDir"===this.serviceDataType?[n.pixels[0][0],n.pixels[1][0]]:Ee([n.pixels[0][0],n.pixels[1][0]]);e.attributes["Raster.Magnitude"]=a[0],e.attributes["Raster.Direction"]=a[1]}_updateFeatureWithDomainValues(e){const t=this.fields&&this.fields.filter((e=>e.domain&&"coded-value"===e.domain.type));null!=t&&t.forEach((t=>{const i=e.attributes[t.name];if(null!=i){const r=t.domain.codedValues.find((e=>e.code===i));r&&(e.attributes[t.name]=r.name)}}))}_updateResponseFieldNames(e,t){if(!t||t.length<1)return;const i=this.fieldsIndex;null!=i&&e.forEach((e=>{if(e?.attributes)for(const r of t){const t=i.get(r)?.name;t&&t!==r&&(e.attributes[r]=e.attributes[t],delete e.attributes[t])}}))}_getRenderingRuleString(e){if(e){let t=e.toJSON();return t=t.rasterFunctionDefinition??t,(t.thumbnail||t.thumbnailEx)&&(t.thumbnail=t.thumbnailEx=null),JSON.stringify(t)}return null}_hasRasterFunction(e){return null!=e?.functionName&&"none"!==e.functionName.toLowerCase()}_updateRenderingRulesFunctionName(e,t){if(!e||e.length<1)return;if("Raw"===e)return e.replace("Raw","None");const i=e.toLowerCase().replaceAll(/ /gi,"_");return t.has(i)?t.get(i):e}_isRFTJson(e){return e?.name&&e.arguments&&e.function&&e.hasOwnProperty("functionType")}_isVectorDataSet(){return"esriImageServiceDataTypeVector-UV"===this.serviceDataType||"esriImageServiceDataTypeVector-MagDir"===this.serviceDataType}_applyMosaicAndRenderingRules(e){const{raster:t,mosaicRule:i,rasterFunction:r}=this;r&&e instanceof Se&&null==e.rasterFunction&&(e.rasterFunction=r),i&&null==e.mosaicRule&&(e.mosaicRule=i),t&&null==e.raster&&(e.raster=t)}_readCapabilities(e){const t=e.capabilities?e.capabilities.toLowerCase().split(",").map((e=>e.trim())):["image","catalog"],{currentVersion:i,advancedQueryCapabilities:r,maxRecordCount:s}=e,n=t.includes("image"),a="esriImageServiceDataTypeElevation"===e.serviceDataType,o=!(!e.spatialReference&&!e.extent?.spatialReference),l=t.includes("edit"),u=t.includes("mensuration")&&o,p=null==e.mensurationCapabilities?[]:e.mensurationCapabilities.toLowerCase().split(",").map((e=>e.trim())),c=u&&p.includes("basic"),m=this._isMosaicDataset(e)&&t.includes("catalog"),d=t.includes("download");return{data:{supportsAttachment:!1},operations:{supportsComputeHistograms:n,supportsExportImage:n,supportsIdentify:n,supportsImageToMap:i>=11.2&&m,supportsImageToMapMultiray:i>=11.2&&m,supportsMapToImage:i>=11.2&&m,supportsFindImages:i>=11.2&&m,supportsGetImageUrl:i>=11.2&&d,supportsMeasure:u,supportsMeasureFromImage:i>=11.2,supportsDownload:d,supportsQuery:m&&e.fields&&e.fields.length>0,supportsGetSamples:i>=10.2&&n,supportsProject:i>=10.3&&n,supportsComputeStatisticsHistograms:i>=10.4&&n,supportsQueryBoundary:i>=10.6&&n,supportsCalculateVolume:i>=10.7&&a,supportsComputePixelLocation:i>=10.7&&m,supportsComputeAngles:i>=10.91,supportsQueryGPSInfo:i>=11.2&&m,supportsAdd:l,supportsDelete:l,supportsEditing:l,supportsUpdate:l,supportsCalculate:!1,supportsTruncate:!1,supportsValidateSql:!1,supportsChangeTracking:!1,supportsQueryAttachments:!1,supportsResizeAttachments:!1,supportsSync:!1,supportsExceedsLimitStatistics:!1,supportsQueryAnalytics:!1,supportsQueryTopFeatures:!1,supportsAsyncConvert3D:!1},query:{maxRecordCount:s,maxRecordCountFactor:void 0,supportsStatistics:!!r?.supportsStatistics,supportsOrderBy:!!r?.supportsOrderBy,supportsDistinct:!!r?.supportsDistinct,supportsPagination:!!r?.supportsPagination,supportsStandardizedQueriesOnly:!!r?.useStandardizedQueries,supportsPercentileStatistics:!!r?.supportsPercentileStatistics,supportsCentroid:!!r?.supportsReturningGeometryCentroid,supportsDistance:!!r?.supportsQueryWithDistance,supportsExtent:!!r?.supportsReturningQueryExtent,supportsGeometryProperties:!!r?.supportsReturningGeometryProperties,supportsHavingClause:!!r?.supportsHavingClause,supportsQuantization:!1,supportsQuantizationEditMode:!1,supportsQueryGeometry:!1,supportsResultType:!1,supportsMaxRecordCountFactor:!1,supportsSqlExpression:!1,supportsTopFeaturesQuery:!1,supportsQueryByAnonymous:!1,supportsQueryByOthers:!1,supportsHistoricMoment:!1,supportsFormatPBF:!1,supportsDisjointSpatialRelationship:!1,supportsCacheHint:!1,supportsSpatialAggregationStatistics:!1,supportedSpatialAggregationStatistics:{envelope:!1,centroid:!1,convexHull:!1},supportsDefaultSpatialReference:!!r?.supportsDefaultSR,supportsFullTextSearch:!1,supportsCompactGeometry:!1,standardMaxRecordCount:void 0,tileMaxRecordCount:void 0},mensuration:{supportsDistanceAndAngle:c,supportsAreaAndPerimeter:c,supportsPointOrCentroid:c,supportsHeightFromBaseAndTop:u&&p.includes("base-top height"),supportsHeightFromBaseAndTopShadow:u&&p.includes("base-top shadow height"),supportsHeightFromTopAndTopShadow:u&&p.includes("top-top shadow height"),supports3D:u&&p.includes("3d")}}}};function r(e){return e?.path??""}return s([n({clonable:!1})],t.prototype,"_functionRasterInfos",void 0),s([n({clonable:!1})],t.prototype,"_rasterJobHandler",void 0),s([n({clonable:!1})],t.prototype,"_cachedRendererJson",void 0),s([n({readOnly:!0})],t.prototype,"_serviceSupportsMosaicRule",void 0),s([y("_serviceSupportsMosaicRule",["currentVersion","fields"])],t.prototype,"readServiceSupportsMosaicRule",null),s([n({readOnly:!0})],t.prototype,"_rasterAttributeTableFieldPrefix",void 0),s([n({readOnly:!0})],t.prototype,"_rasterFunctionNamesIndex",null),s([n()],t.prototype,"adjustAspectRatio",void 0),s([n({type:[T],json:{write:!0}})],t.prototype,"bandIds",void 0),s([y("bandIds")],t.prototype,"readBandIds",null),s([n({readOnly:!0,json:{read:!1}})],t.prototype,"capabilities",void 0),s([y("service","capabilities",["capabilities","currentVersion","serviceDataType"])],t.prototype,"readCapabilities",null),s([n({type:Number})],t.prototype,"compressionQuality",void 0),s([a("compressionQuality")],t.prototype,"writeCompressionQuality",null),s([n({type:Number})],t.prototype,"compressionTolerance",void 0),s([a("compressionTolerance")],t.prototype,"writeCompressionTolerance",null),s([n({json:{read:{source:"copyrightText"}}})],t.prototype,"copyright",void 0),s([n({readOnly:!0,dependsOn:["_serviceSupportsMosaicRule"]})],t.prototype,"defaultMosaicRule",void 0),s([y("defaultMosaicRule",["defaultMosaicMethod"])],t.prototype,"readDefaultMosaicRule",null),s([n({type:String,json:{name:"layerDefinition.definitionExpression",write:{enabled:!0,allowNull:!0}}})],t.prototype,"definitionExpression",void 0),s([n({readOnly:!0,constructOnly:!0})],t.prototype,"exportImageServiceParameters",void 0),s([n()],t.prototype,"rasterInfo",void 0),s([n({readOnly:!0,type:[M]})],t.prototype,"fields",void 0),s([n({readOnly:!0})],t.prototype,"fieldsIndex",null),s([n({type:["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff"],json:{write:!0}})],t.prototype,"format",null),s([y("service","format",["serviceDataType"])],t.prototype,"readFormat",null),s([n({type:g})],t.prototype,"fullExtent",void 0),s([n({readOnly:!0})],t.prototype,"hasMultidimensions",void 0),s([n({json:{read:{source:"maxImageHeight"}}})],t.prototype,"imageMaxHeight",void 0),s([n({json:{read:{source:"maxImageWidth"}}})],t.prototype,"imageMaxWidth",void 0),s([n({type:String,json:{type:ye.jsonValues,read:ye.read,write:ye.write}})],t.prototype,"interpolation",void 0),s([n()],t.prototype,"minScale",void 0),s([y("service","minScale")],t.prototype,"readMinScale",null),s([n()],t.prototype,"maxScale",void 0),s([y("service","maxScale")],t.prototype,"readMaxScale",null),s([n({type:ge})],t.prototype,"mosaicRule",null),s([y("mosaicRule",["mosaicRule","defaultMosaicMethod"])],t.prototype,"readMosaicRule",null),s([a("mosaicRule")],t.prototype,"writeMosaicRule",null),s([n()],t.prototype,"multidimensionalInfo",void 0),s([n({type:fe,json:{write:!0}})],t.prototype,"multidimensionalSubset",void 0),s([n({json:{type:T}})],t.prototype,"noData",void 0),s([a("noData")],t.prototype,"writeNoData",null),s([n({type:String,json:{type:he.jsonValues,read:he.read,write:he.write}})],t.prototype,"noDataInterpretation",void 0),s([n({type:String,readOnly:!0,json:{read:{source:["fields"]}}})],t.prototype,"objectIdField",void 0),s([y("objectIdField")],t.prototype,"readObjectIdField",null),s([n({readOnly:!0})],t.prototype,"geometryType",void 0),s([n({})],t.prototype,"typeIdField",void 0),s([n({})],t.prototype,"types",void 0),s([n({readOnly:!0})],t.prototype,"parsedUrl",null),s([n({type:Function})],t.prototype,"pixelFilter",void 0),s([n()],t.prototype,"raster",void 0),s([n({readOnly:!0})],t.prototype,"sourceType",void 0),s([y("sourceType",["serviceSourceType","fields"])],t.prototype,"readSourceType",null),s([n()],t.prototype,"viewId",void 0),s([n({types:we,json:{name:"layerDefinition.drawingInfo.renderer",origins:{"web-scene":{types:Re,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&"vector-field"!==e.type&&"flow"!==e.type})}}}}})],t.prototype,"renderer",null),s([y("renderer")],t.prototype,"readRenderer",null),s([a("renderer")],t.prototype,"writeRenderer",null),s([n({clonable:!1})],t.prototype,"symbolizer",void 0),s([n(J)],t.prototype,"opacity",void 0),s([n({readOnly:!0})],t.prototype,"rasterFields",null),s([n({constructOnly:!0})],t.prototype,"rasterFunctionInfos",void 0),s([n({type:de})],t.prototype,"renderingRule",null),s([n({type:de,json:{name:"renderingRule"}})],t.prototype,"rasterFunction",null),s([y("rasterFunction",["renderingRule","rasterFunctionInfos"])],t.prototype,"readRasterFunction",null),s([n({readOnly:!0})],t.prototype,"serviceDataType",void 0),s([n({readOnly:!0,type:p})],t.prototype,"spatialReference",void 0),s([y("spatialReference",["spatialReference","extent"])],t.prototype,"readSpatialReference",null),s([n({json:{type:ve.jsonValues}})],t.prototype,"pixelType",void 0),s([y("pixelType")],t.prototype,"readPixelType",null),s([a("pixelType")],t.prototype,"writePixelType",null),s([n({constructOnly:!0,type:Be})],t.prototype,"serviceRasterInfo",void 0),s([n()],t.prototype,"sourceJSON",void 0),s([n(E)],t.prototype,"url",void 0),s([n({readOnly:!0})],t.prototype,"version",void 0),s([y("version",["currentVersion","fields","timeInfo"])],t.prototype,"readVersion",null),t=s([o("esri.layers.mixins.ArcGISImageService")],t),t};let rr=class extends($(W(Z(K(X(ir(Y(ee(te(ie(D(ce)))))))))))){constructor(...e){super(...e),this.isReference=null,this.operationalLayerType="ArcGISImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.type="imagery",this._debouncedSaveOperations=re((async(e,i,r)=>{const{save:s,saveAs:n}=await me((()=>t.import("./imageryUtils-legacy.js")),void 0,t.meta.url);switch(e){case ae.SAVE:return s(this,i);case ae.SAVE_AS:return n(this,r,i)}}))}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},e).catch(se).then((()=>this._fetchService(t)))),Promise.resolve(this)}get legendEnabled(){return!this._isPreviewLayer&&(this._get("legendEnabled")??!0)}set legendEnabled(e){this._set("legendEnabled",e)}get listMode(){return this._isPreviewLayer?"hide":this._get("listMode")}set listMode(e){this._set("listMode",e)}writeOperationalLayerType(e,t,i){const r="vector-field"===this.renderer?.type;t[i]=r?"ArcGISImageServiceVectorLayer":"ArcGISImageServiceLayer"}get defaultPopupTemplate(){return this.createPopupTemplate()}get _isPreviewLayer(){return!(!this.raster||!this.url?.toLowerCase().includes("/rasterrendering/imageserver"))}createPopupTemplate(e){const t=this.rasterFields,i=this.title,r=new Set;let s=!1,n=!1;this.capabilities&&(s=this.capabilities.operations.supportsQuery&&this.fields&&this.fields.length>0,n="esriImageServiceDataTypeVector-UV"===this.serviceDataType||"esriImageServiceDataTypeVector-MagDir"===this.serviceDataType);const a=new Set;s&&a.add("raster.itempixelvalue");for(const l of t){const e=l.name.toLowerCase();a.has(e)||e.includes("raster.servicepixelvalue.")||r.add(l.name)}n&&r.add("raster.magnitude").add("raster.direction");const o=ne({fields:t,title:i},{...e,visibleFieldNames:r});return o?.fieldInfos&&this.rasterInfo?.pixelType.startsWith("f")&&o.fieldInfos.forEach((({format:e,fieldName:t})=>{e&&/^raster\.(item|service)pixelvalue/i.test(t)&&(e.places=2)})),o}queryFeatures(e,t){return this.queryRasters(e,t).then((e=>{if(e?.features)for(const t of e.features)t.layer=t.sourceLayer=this;return e}))}queryFeatureCount(e,t){return this.queryRasterCount(e,t)}redraw(){this.emit("redraw")}async save(e){return this._debouncedSaveOperations(ae.SAVE,e)}async saveAs(e,t){return this._debouncedSaveOperations(ae.SAVE_AS,t,e)}serviceSupportsSpatialReference(e){return oe(this,e)}write(e,t){if(!this._isPreviewLayer)return super.write(e,t);if(t?.messages){const e=`${t.origin}/${t.layerContainerType||"operational-layers"}`;t.messages.push(new L("layer:unsupported",`Imagery preview layer (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${e}'`,{layer:this}))}return null}};s([n(le)],rr.prototype,"legendEnabled",null),s([n({type:["show","hide"]})],rr.prototype,"listMode",null),s([n({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],rr.prototype,"isReference",void 0),s([n({type:["ArcGISImageServiceLayer"],json:{origins:{"web-map":{type:["ArcGISImageServiceLayer","ArcGISImageServiceVectorLayer"],read:!1,write:{target:"layerType",ignoreOrigin:!0}}}}})],rr.prototype,"operationalLayerType",void 0),s([a("web-map","operationalLayerType")],rr.prototype,"writeOperationalLayerType",null),s([n(ue)],rr.prototype,"popupEnabled",void 0),s([n({type:pe,json:{read:{source:"popupInfo"},write:{target:"popupInfo"}}})],rr.prototype,"popupTemplate",void 0),s([n({readOnly:!0})],rr.prototype,"defaultPopupTemplate",null),s([n({readOnly:!0,json:{read:!1}})],rr.prototype,"type",void 0),s([n({readOnly:!0})],rr.prototype,"_isPreviewLayer",null),rr=s([o("esri.layers.ImageryLayer")],rr),e("default",rr)}}}));
