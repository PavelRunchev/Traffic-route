System.register(["./index-legacy.js","./QueryTask-legacy.js","./sublayerUtils-legacy.js"],(function(e,t){"use strict";var r,i,a,s,l,o,n,y,p,u,d,c,h,f,b,m,g,S,I,v,w,E,L,x,O,T,D,F,P,_,A,j,M,V,C,N,R,q,k,U,B,J,Q,$,W,G,H,z,K,Y,X,Z,ee,te,re,ie,ae,se,le;return{setters:[e=>{r=e.x,i=e.y,a=e.bD,s=e.aQ,l=e.dh,o=e.ff,n=e.bc,y=e.z,p=e.hf,u=e.hg,d=e.at,c=e.b1,h=e.bG,f=e.X,b=e.p,m=e.e7,g=e.dg,S=e.dc,I=e.s,v=e.ay,w=e.hh,E=e.cx,L=e.hi,x=e.ai,O=e.bQ,T=e.w,D=e.hj,F=e.ft,P=e.V,_=e.dY,A=e.fq,j=e.fa,M=e.az,V=e._,C=e.ax,N=e.hk,R=e.D,q=e.hl,k=e.d3,U=e.d2,B=e.hm,J=e.dO,Q=e.fc,$=e.dN,W=e.F,G=e.fg,H=e.fh,z=e.eF,K=e.bY,Y=e.d_,X=e.fw,Z=e.dv,ee=e.ex,te=e.T,re=e.C,ie=e.en,ae=e.hn},e=>{se=e.x},e=>{le=e.o}],execute:function(){var oe;function ne(e){return null!=e&&"esriSMS"===e.type}function ye(e,t,r){const i=this.originIdOf(t)>=Z(r.origin);return{ignoreOrigin:!0,allowNull:i,enabled:!!r&&"map-image"===r.layer?.type&&(r.writeSublayerStructure||i)}}function pe(e,t,r){return{enabled:!!r&&"tile"===r.layer?.type&&(r.origin&&this.originIdOf(t)>=Z(r.origin)||this._isOverridden(t))}}function ue(e,t,r){return{ignoreOrigin:!0,enabled:r&&r.writeSublayerStructure||!1}}function de(e,t,r){return{ignoreOrigin:!0,enabled:!!r&&(r.writeSublayerStructure||this.originIdOf(t)>=Z(r.origin))}}e("f",(e=>{let t=class extends e{constructor(){super(...arguments),this.capabilities=void 0,this.copyright=null,this.fullExtent=null,this.legendEnabled=!0,this.spatialReference=null,this.version=void 0,this._allLayersAndTablesMap=null}readCapabilities(e,t){const r=t.capabilities&&t.capabilities.split(",").map((e=>e.toLowerCase().trim()));if(!r)return{operations:{supportsExportMap:!1,supportsExportTiles:!1,supportsIdentify:!1,supportsQuery:!1,supportsTileMap:!1},exportMap:null,exportTiles:null};const i=this.type,a="tile"!==i&&!!t.supportsDynamicLayers,s=r.includes("query"),l=r.includes("map"),o=!!t.exportTilesAllowed,n=r.includes("tilemap"),y=r.includes("data"),u="tile"!==i&&(!t.tileInfo||a),d="tile"!==i&&(!t.tileInfo||a),c="tile"!==i,h=t.cimVersion&&p.parse(t.cimVersion),f=h?.since(1,4)??!1,b=h?.since(2,0)??!1;return{operations:{supportsExportMap:l,supportsExportTiles:o,supportsIdentify:s,supportsQuery:y,supportsTileMap:n},exportMap:l?{supportsArcadeExpressionForLabeling:f,supportsSublayersChanges:c,supportsDynamicLayers:a,supportsSublayerVisibility:u,supportsSublayerDefinitionExpression:d,supportsCIMSymbols:b}:null,exportTiles:o?{maxExportTilesCount:+t.maxExportTilesCount}:null}}readVersion(e,t){let r=t.currentVersion;return r||(r=t.hasOwnProperty("capabilities")||t.hasOwnProperty("tables")?10:t.hasOwnProperty("supportedImageFormatTypes")?9.31:9.3),r}async fetchRelatedService(e){const t=this.portalItem;if(!t||!u(t))return null;this._relatedFeatureServicePromise||(this._relatedFeatureServicePromise=t.fetchRelatedItems({relationshipType:"Service2Service",direction:"reverse"},e).then((e=>e.find((e=>"Feature Service"===e.type))??null),(()=>null)));const r=await this._relatedFeatureServicePromise;return d(e),r?{itemId:r.id,url:r.url}:null}async fetchSublayerInfo(e,t){const{source:r}=e;if(this?.portalItem&&"tile"===this.type&&"map-layer"===r?.type&&u(this.portalItem)&&e.originIdOf("url")<c.SERVICE){const i=await this.fetchRelatedService(t);i&&(e.url=h(i.url,r.mapLayerId.toString()),e.layerItemId=i.itemId)}const{url:i}=e;let a;if("data-layer"===r.type)a=(await f(i,{responseType:"json",query:{f:"json",...this.customParameters,token:this.apiKey},...t})).data;else if(i&&e.originIdOf("url")>c.SERVICE)try{const e=await this._fetchAllLayersAndTablesFromService(i),t=b(i)?.sublayer??r.mapLayerId;a=e.get(t)}catch{}else{let i=e.id;"map-layer"===r?.type&&(i=r.mapLayerId);try{a=(await this.fetchAllLayersAndTables(t)).get(i)}catch{}}return a}async fetchAllLayersAndTables(e){return this._fetchAllLayersAndTablesFromService(this.parsedUrl?.path,e)}async _fetchAllLayersAndTablesFromService(e,t){await this.load(t),this._allLayersAndTablesMap||=new Map;const r=b(e),i=m(this._allLayersAndTablesMap,r?.url.path,(()=>f(h(r?.url.path,"/layers"),{responseType:"json",query:{f:"json",...this.customParameters,token:this.apiKey}}).then((e=>{const t=new Map;for(const r of e.data.layers)t.set(r.id,r);return{result:t}}),(e=>({error:e}))))),a=await i;if(d(t),"result"in a)return a.result;throw a.error}};return r([i({readOnly:!0})],t.prototype,"capabilities",void 0),r([a("service","capabilities",["capabilities","exportTilesAllowed","maxExportTilesCount","supportsDynamicLayers","tileInfo"])],t.prototype,"readCapabilities",null),r([i({json:{read:{source:"copyrightText"}}})],t.prototype,"copyright",void 0),r([i({type:s})],t.prototype,"fullExtent",void 0),r([i(l)],t.prototype,"id",void 0),r([i({type:Boolean,json:{origins:{service:{read:{enabled:!1}}},read:{source:"showLegend"},write:{target:"showLegend"}}})],t.prototype,"legendEnabled",void 0),r([i(o)],t.prototype,"popupEnabled",void 0),r([i({type:n})],t.prototype,"spatialReference",void 0),r([i({readOnly:!0})],t.prototype,"version",void 0),r([a("version",["currentVersion","capabilities","tables","supportedImageFormatTypes"])],t.prototype,"readVersion",null),t=r([y("esri.layers.mixins.ArcGISMapService")],t),t}));let ce=0;const he=new Set;he.add("layer"),he.add("parent"),he.add("loaded"),he.add("loadStatus"),he.add("loadError"),he.add("loadWarnings");let fe=oe=class extends(g(S(ee))){constructor(e){super(e),this.capabilities=void 0,this.maxScaleRange={minScale:0,maxScale:0},this.fields=null,this.fullExtent=null,this.geometryType=null,this.globalIdField=null,this.legendEnabled=!0,this.objectIdField=null,this.parent=null,this.popupEnabled=!0,this.popupTemplate=null,this.sourceJSON=null,this.title=null,this.typeIdField=null,this.type="sublayer",this.types=null,this._lastParsedUrl=null}async load(e){return this.addResolvingPromise((async()=>{const{layer:t,url:r}=this;if(!t&&!r)throw new I("sublayer:missing-layer","Sublayer can't be loaded without being part of a layer",{sublayer:this});const i=t?await t.fetchSublayerInfo(this,e):(await f(r,{responseType:"json",query:{f:"json"},...e})).data;i&&(this.sourceJSON=i,this.read({layerDefinition:i},{origin:"service",layer:t,url:v(r)}))})()),this}readCapabilities(e,t){t=t.layerDefinition||t;const{operations:{supportsQuery:r,supportsQueryAttachments:i},query:{supportsFormatPBF:a},data:{supportsAttachment:s},queryRelated:l}=w(t,this.url);return{exportMap:{supportsModification:!!t.canModifyLayer},operations:{supportsQuery:r,supportsQueryAttachments:i},data:{supportsAttachment:s},query:{supportsFormatPBF:a},queryRelated:l}}get defaultPopupTemplate(){return this.createPopupTemplate()}set definitionExpression(e){this._setAndNotifyLayer("definitionExpression",e)}get effectiveScaleRange(){const{minScale:e,maxScale:t}=this;return{minScale:e,maxScale:t}}readMaxScaleRange(e,t){return{minScale:(t=t.layerDefinition||t).minScale??0,maxScale:t.maxScale??0}}get fieldsIndex(){return new E(this.fields||[])}set floorInfo(e){this._setAndNotifyLayer("floorInfo",e)}readGlobalIdFieldFromService(e,t){if((t=t.layerDefinition||t).globalIdField)return t.globalIdField;if(t.fields)for(const r of t.fields)if("esriFieldTypeGlobalID"===r.type)return r.name}get id(){return this._get("id")??ce++}set id(e){this._get("id")!==e&&(!1!==this.layer?.capabilities?.exportMap?.supportsDynamicLayers?this._set("id",e):this._logLockedError("id","capability not available 'layer.capabilities.exportMap.supportsDynamicLayers'"))}set labelingInfo(e){this._setAndNotifyLayer("labelingInfo",e)}writeLabelingInfo(e,t,r,i){e&&e.length&&(t.layerDefinition={drawingInfo:{labelingInfo:e.map((e=>e.write({},i)))}})}set labelsVisible(e){this._setAndNotifyLayer("labelsVisible",e)}set layer(e){this._set("layer",e),this.sublayers&&this.sublayers.forEach((t=>t.layer=e))}set listMode(e){this._set("listMode",e)}set minScale(e){this._setAndNotifyLayer("minScale",e)}readMinScale(e,t){return t.minScale||t.layerDefinition?.minScale||0}set maxScale(e){this._setAndNotifyLayer("maxScale",e)}readMaxScale(e,t){return t.maxScale||t.layerDefinition?.maxScale||0}readObjectIdFieldFromService(e,t){if((t=t.layerDefinition||t).objectIdField)return t.objectIdField;if(t.fields)for(const r of t.fields)if("esriFieldTypeOID"===r.type)return r.name}set opacity(e){this._setAndNotifyLayer("opacity",e)}readOpacity(e,t){const r=t.layerDefinition;return 1-.01*((null!=r?.transparency?r.transparency:r?.drawingInfo?.transparency)??0)}writeOpacity(e,t,r,i){t.layerDefinition={drawingInfo:{transparency:100-100*e}}}writeParent(e,t){this.parent&&this.parent!==this.layer?t.parentLayerId=L(this.parent.id):t.parentLayerId=-1}get queryTask(){if(!this.layer)return null;const{spatialReference:e}=this.layer,t="gdbVersion"in this.layer?this.layer.gdbVersion:void 0,{capabilities:r,fieldsIndex:i}=this,a=x("featurelayer-pbf")&&r?.query.supportsFormatPBF,s=r?.operations?.supportsQueryAttachments??!1;return new se({url:this.url,pbfSupported:a,fieldsIndex:i,gdbVersion:t,sourceSpatialReference:e,queryAttachmentsSupported:s})}set renderer(e){if(e)for(const t of e.getSymbols())if(O(t)){T.getLogger(this).warn("Sublayer renderer should use 2D symbols");break}this._setAndNotifyLayer("renderer",e)}get source(){return this._get("source")||new D({mapLayerId:this.id})}set source(e){this._setAndNotifyLayer("source",e)}set sublayers(e){this._handleSublayersChange(e,this._get("sublayers")),this._set("sublayers",e)}castSublayers(e){return F(P.ofType(oe),e)}writeSublayers(e,t,r){this.sublayers?.length&&(t[r]=this.sublayers.map((e=>e.id)).toArray().reverse())}readTitle(e,t){return t.layerDefinition?.name??t.name}readTypeIdField(e,t){let r=(t=t.layerDefinition||t).typeIdField;if(r&&t.fields){r=r.toLowerCase();const e=t.fields.find((e=>e.name.toLowerCase()===r));e&&(r=e.name)}return r}get url(){const e=this.layer?.parsedUrl??this._lastParsedUrl,t=this.source;if(!e)return null;if(this._lastParsedUrl=e,"map-layer"===t?.type)return`${e.path}/${t.mapLayerId}`;const r={layer:JSON.stringify({source:this.source})};return`${e.path}/dynamicLayer?${_(r)}`}set url(e){this._overrideIfSome("url",e)}set visible(e){this._setAndNotifyLayer("visible",e)}writeVisible(e,t,r,i){t[r]=this.getAtOrigin("defaultVisibility","service")||e}clone(){const{store:e}=A(this),t=new oe;return A(t).store=e.clone(he),this.commitProperty("url"),t._lastParsedUrl=this._lastParsedUrl,t}createPopupTemplate(e){return j(this,e)}createQuery(){return new M({returnGeometry:!0,where:this.definitionExpression||"1=1"})}async createFeatureLayer(){if(this.hasOwnProperty("sublayers"))return null;const e=(await V((()=>t.import("./index-legacy.js").then((e=>e.nf))),void 0,t.meta.url)).default,{layer:r,url:i}=this;let a;if(i&&this.originIdOf("url")>c.SERVICE)a=new e({url:i});else{if(!r?.parsedUrl)throw new I("createFeatureLayer:missing-information","Cannot create a FeatureLayer without a url or a parent layer");{const t=r.parsedUrl;a=new e({url:t.path}),t&&this.source&&("map-layer"===this.source.type?a.layerId=this.source.mapLayerId:a.dynamicDataSource=this.source)}}return null!=r?.refreshInterval&&(a.refreshInterval=r.refreshInterval),this.definitionExpression&&(a.definitionExpression=this.definitionExpression),this.floorInfo&&(a.floorInfo=C(this.floorInfo)),this.originIdOf("labelingInfo")>c.SERVICE&&(a.labelingInfo=C(this.labelingInfo)),this.originIdOf("labelsVisible")>c.DEFAULTS&&(a.labelsVisible=this.labelsVisible),this.originIdOf("legendEnabled")>c.DEFAULTS&&(a.legendEnabled=this.legendEnabled),this.originIdOf("visible")>c.DEFAULTS&&(a.visible=this.visible),this.originIdOf("minScale")>c.DEFAULTS&&(a.minScale=this.minScale),this.originIdOf("maxScale")>c.DEFAULTS&&(a.maxScale=this.maxScale),this.originIdOf("opacity")>c.DEFAULTS&&(a.opacity=this.opacity),this.originIdOf("popupTemplate")>c.DEFAULTS&&(a.popupTemplate=C(this.popupTemplate)),this.originIdOf("renderer")>c.SERVICE&&(a.renderer=C(this.renderer)),"data-layer"===this.source?.type&&(a.dynamicDataSource=this.source.clone()),this.originIdOf("title")>c.DEFAULTS&&(a.title=this.title),"map-image"===r?.type&&r.originIdOf("customParameters")>c.DEFAULTS&&(a.customParameters=r.customParameters),"tile"===r?.type&&r.originIdOf("customParameters")>c.DEFAULTS&&(a.customParameters=r.customParameters),a}getField(e){return this.fieldsIndex.get(e)}getFeatureType(e){const{typeIdField:t,types:r}=this;if(!t||!e)return null;const i=e.attributes?e.attributes[t]:void 0;if(null==i)return null;let a=null;return r?.some((e=>{const{id:t}=e;return null!=t&&(t.toString()===i.toString()&&(a=e),!!a)})),a}getFieldDomain(e,t){const r=t?.feature,i=this.getFeatureType(r);if(i){const t=i.domains&&i.domains[e];if(t&&"inherited"!==t.type)return t}return this._getLayerDomain(e)}async queryAttachments(e,t){await this.load(),e=N.from(e);const r=this.capabilities;if(!r?.data?.supportsAttachment)throw new I("queryAttachments:not-supported","this layer doesn't support attachments");const{attachmentTypes:i,objectIds:a,globalIds:s,num:l,size:o,start:n,where:y}=e;if(!r?.operations?.supportsQueryAttachments&&(i?.length>0||s?.length>0||o?.length>0||l||n||y))throw new I("queryAttachments:option-not-supported","when 'capabilities.operations.supportsQueryAttachments' is false, only objectIds is supported",e);if(!(a?.length||s?.length||y))throw new I("queryAttachments:invalid-query","'objectIds', 'globalIds', or 'where' are required to perform attachment query",e);return this.queryTask.executeAttachmentQuery(e,t)}async queryFeatures(e=this.createQuery(),t){if(await this.load(),!this.capabilities.operations.supportsQuery)throw new I("queryFeatures:not-supported","this layer doesn't support queries.");if(!this.url)throw new I("queryFeatures:not-supported","this layer has no url.");const r=await this.queryTask.execute(e,{...t,query:{...this.layer?.customParameters,token:this.layer?.apiKey}});if(r?.features)for(const i of r.features)i.sourceLayer=this;return r}toExportImageJSON(e){const t={id:this.id,source:this.source?.toJSON()||{mapLayerId:this.id,type:"mapLayer"}},r=R(e,this.definitionExpression);null!=r&&(t.definitionExpression=r);const i=["renderer","labelingInfo","opacity","labelsVisible"].reduce(((e,t)=>(e[t]=this.originIdOf(t),e)),{}),a=Object.keys(i).some((e=>i[e]>c.SERVICE));if(a){const e=t.drawingInfo={};if(i.renderer>c.SERVICE&&(e.renderer=this.renderer?this.renderer.toJSON():null),i.labelsVisible>c.SERVICE&&(e.showLabels=this.labelsVisible),this.labelsVisible&&i.labelingInfo>c.SERVICE)if(this.labelingInfo){!this.loaded&&this.labelingInfo?.some((e=>!e.labelPlacement))&&T.getLogger(this).warnOnce(`A Sublayer (title: ${this.title}, id: ${this.id}) has an undefined 'labelPlacement' and so labels cannot be displayed. Either define a valid 'labelPlacement' or call Sublayer.load() to use a default value based on geometry type.`,{sublayer:this});let t=this.labelingInfo;null!=this.geometryType&&(t=q(this.labelingInfo,k.toJSON(this.geometryType))),e.showLabels=!0,e.labelingInfo=t.filter((e=>e.labelPlacement)).map((e=>e.toJSON({origin:"service",layer:this.layer})))}else e.showLabels=!1;i.opacity>c.SERVICE&&(e.transparency=100-100*this.opacity),this._assignDefaultSymbolColors(e.renderer)}return t}_assignDefaultSymbolColors(e){this._forEachSimpleMarkerSymbols(e,(e=>{e.color||"esriSMSX"!==e.style&&"esriSMSCross"!==e.style||(e.outline?.color?e.color=e.outline.color:e.color=[0,0,0,0])}))}_forEachSimpleMarkerSymbols(e,t){if(e){const r=("uniqueValueInfos"in e?e.uniqueValueInfos:"classBreakInfos"in e?e.classBreakInfos:null)??[];for(const e of r)ne(e.symbol)&&t(e.symbol);"symbol"in e&&ne(e.symbol)&&t(e.symbol),"defaultSymbol"in e&&ne(e.defaultSymbol)&&t(e.defaultSymbol)}}_setAndNotifyLayer(e,t){const r=this.layer,i=this._get(e);let a,s;switch(e){case"definitionExpression":case"floorInfo":a="supportsSublayerDefinitionExpression";break;case"minScale":case"maxScale":case"visible":a="supportsSublayerVisibility";break;case"labelingInfo":case"labelsVisible":case"opacity":case"renderer":case"source":a="supportsDynamicLayers",s="supportsModification"}const l=A(this).getDefaultOrigin();if("service"!==l){if(a&&!1===this.layer?.capabilities?.exportMap?.[a])return void this._logLockedError(e,`capability not available 'layer.capabilities.exportMap.${a}'`);if(s&&!1===this.capabilities?.exportMap[s])return void this._logLockedError(e,`capability not available 'capabilities.exportMap.${s}'`)}"source"!==e||"not-loaded"===this.loadStatus?(this._set(e,t),"service"!==l&&i!==t&&r&&r.emit&&r.emit("sublayer-update",{propertyName:e,target:this})):this._logLockedError(e,"'source' can't be changed after calling sublayer.load()")}_handleSublayersChange(e,t){t&&(t.forEach((e=>{e.parent=null,e.layer=null})),this.removeAllHandles()),e&&(e.forEach((e=>{e.parent=this,e.layer=this.layer})),this.addHandles([e.on("after-add",(({item:e})=>{e.parent=this,e.layer=this.layer})),e.on("after-remove",(({item:e})=>{e.parent=null,e.layer=null})),e.on("before-changes",(e=>{const t=this.layer?.capabilities?.exportMap?.supportsSublayersChanges;null==t||t||(T.getLogger(this).error(new I("sublayer:sublayers-non-modifiable","Sublayer can't be added, moved, or removed from the layer's sublayers",{sublayer:this,layer:this.layer})),e.preventDefault())}))]))}_logLockedError(e,t){const{layer:r,declaredClass:i}=this;T.getLogger(i).error(new I("sublayer:locked",`Property '${String(e)}' can't be changed on Sublayer from the layer '${r?.id}'`,{reason:t,sublayer:this,layer:r}))}_getLayerDomain(e){const t=this.fieldsIndex.get(e);return t?t.domain:null}};fe.test={isMapImageLayerOverridePolicy:e=>e===ue||e===ye,isTileImageLayerOverridePolicy:e=>e===pe},r([i({readOnly:!0})],fe.prototype,"capabilities",void 0),r([a("service","capabilities",["layerDefinition.canModifyLayer","layerDefinition.capabilities"])],fe.prototype,"readCapabilities",null),r([i()],fe.prototype,"defaultPopupTemplate",null),r([i({type:String,value:null,json:{name:"layerDefinition.definitionExpression",write:{allowNull:!0,overridePolicy:ye}}})],fe.prototype,"definitionExpression",null),r([i({readOnly:!0})],fe.prototype,"effectiveScaleRange",null),r([a("service","maxScaleRange",["minScale","maxScale"])],fe.prototype,"readMaxScaleRange",null),r([i({type:[U],json:{origins:{service:{read:{source:"layerDefinition.fields"}}}}})],fe.prototype,"fields",void 0),r([i({readOnly:!0})],fe.prototype,"fieldsIndex",null),r([i({type:B,value:null,json:{name:"layerDefinition.floorInfo",read:{source:"layerDefinition.floorInfo"},write:{target:"layerDefinition.floorInfo",overridePolicy:ye},origins:{"web-scene":{read:!1,write:!1}}}})],fe.prototype,"floorInfo",null),r([i({type:s,json:{read:{source:"layerDefinition.extent"}}})],fe.prototype,"fullExtent",void 0),r([i({type:k.apiValues,json:{origins:{service:{name:"layerDefinition.geometryType",read:{reader:k.read}}}}})],fe.prototype,"geometryType",void 0),r([i({type:String})],fe.prototype,"globalIdField",void 0),r([a("service","globalIdField",["layerDefinition.globalIdField","layerDefinition.fields"])],fe.prototype,"readGlobalIdFieldFromService",null),r([i({type:J,json:{write:{ignoreOrigin:!0}}})],fe.prototype,"id",null),r([i({value:null,type:[Q],json:{read:{source:"layerDefinition.drawingInfo.labelingInfo"},write:{target:"layerDefinition.drawingInfo.labelingInfo",overridePolicy:ue}}})],fe.prototype,"labelingInfo",null),r([$("labelingInfo")],fe.prototype,"writeLabelingInfo",null),r([i({type:Boolean,value:!0,json:{read:{source:"layerDefinition.drawingInfo.showLabels"},write:{target:"layerDefinition.drawingInfo.showLabels",overridePolicy:ue}}})],fe.prototype,"labelsVisible",null),r([i({value:null})],fe.prototype,"layer",null),r([i({type:String,json:{write:{overridePolicy:pe}}})],fe.prototype,"layerItemId",void 0),r([i({type:Boolean,value:!0,json:{origins:{service:{read:{enabled:!1}}},read:{source:"showLegend"},write:{target:"showLegend",overridePolicy:de}}})],fe.prototype,"legendEnabled",void 0),r([i({type:["show","hide","hide-children"],value:"show",json:{read:!1,write:!1,origins:{"web-scene":{read:!0,write:!0}}}})],fe.prototype,"listMode",null),r([i({type:Number,value:0,json:{write:{overridePolicy:ue}}})],fe.prototype,"minScale",null),r([a("minScale",["minScale","layerDefinition.minScale"])],fe.prototype,"readMinScale",null),r([i({type:Number,value:0,json:{write:{overridePolicy:ue}}})],fe.prototype,"maxScale",null),r([a("maxScale",["maxScale","layerDefinition.maxScale"])],fe.prototype,"readMaxScale",null),r([i({type:String})],fe.prototype,"objectIdField",void 0),r([a("service","objectIdField",["layerDefinition.objectIdField","layerDefinition.fields"])],fe.prototype,"readObjectIdFieldFromService",null),r([i({type:Number,value:1,json:{write:{target:"layerDefinition.drawingInfo.transparency",overridePolicy:ue}}})],fe.prototype,"opacity",null),r([a("opacity",["layerDefinition.drawingInfo.transparency","layerDefinition.transparency"])],fe.prototype,"readOpacity",null),r([$("opacity")],fe.prototype,"writeOpacity",null),r([i({json:{type:J,write:{target:"parentLayerId",writerEnsuresNonNull:!0,overridePolicy:ue}}})],fe.prototype,"parent",void 0),r([$("parent")],fe.prototype,"writeParent",null),r([i({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(e,t)=>!t.disablePopup},write:{target:"disablePopup",overridePolicy:de,writer(e,t,r){t[r]=!e}}}})],fe.prototype,"popupEnabled",void 0),r([i({type:W,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy:de}}})],fe.prototype,"popupTemplate",void 0),r([i({readOnly:!0})],fe.prototype,"queryTask",null),r([i({types:G,value:null,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:ue},origins:{"web-scene":{types:H,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:ue}}}}})],fe.prototype,"renderer",null),r([i({types:{key:"type",base:null,typeMap:{"data-layer":z,"map-layer":D}},cast(e){if(e){if("mapLayerId"in e)return K(D,e);if("dataSource"in e)return K(z,e)}return e},json:{name:"layerDefinition.source",write:{overridePolicy:ue}}})],fe.prototype,"source",null),r([i()],fe.prototype,"sourceJSON",void 0),r([i({value:null,json:{type:[J],write:{target:"subLayerIds",allowNull:!0,overridePolicy:ue}}})],fe.prototype,"sublayers",null),r([Y("sublayers")],fe.prototype,"castSublayers",null),r([$("sublayers")],fe.prototype,"writeSublayers",null),r([i({type:String,json:{name:"name",write:{overridePolicy:de}}})],fe.prototype,"title",void 0),r([a("service","title",["name","layerDefinition.name"])],fe.prototype,"readTitle",null),r([i({type:String})],fe.prototype,"typeIdField",void 0),r([i({json:{read:!1},readOnly:!0,value:"sublayer"})],fe.prototype,"type",void 0),r([a("typeIdField",["layerDefinition.typeIdField"])],fe.prototype,"readTypeIdField",null),r([i({type:[X],json:{origins:{service:{read:{source:"layerDefinition.types"}}}}})],fe.prototype,"types",void 0),r([i({type:String,json:{name:"layerUrl",write:{overridePolicy:pe}}})],fe.prototype,"url",null),r([i({type:Boolean,value:!0,json:{read:{source:"defaultVisibility"},write:{target:"defaultVisibility",overridePolicy:ue}}})],fe.prototype,"visible",null),r([$("visible")],fe.prototype,"writeVisible",null),fe=oe=r([y("esri.layers.support.Sublayer")],fe);const be=e("Y",fe),me=P.ofType(be);function ge(e,t){e&&e.forEach((e=>{t(e),e.sublayers&&e.sublayers.length&&ge(e.sublayers,t)}))}e("m",(e=>{let t=class extends e{constructor(...e){super(...e),this.allSublayers=new te({getCollections:()=>[this.sublayers],getChildrenFunction:e=>e.sublayers}),this.sublayersSourceJSON={[c.SERVICE]:{},[c.PORTAL_ITEM]:{},[c.WEB_SCENE]:{},[c.WEB_MAP]:{}},this.addHandles(re((()=>this.sublayers),((e,t)=>this._handleSublayersChange(e,t)),ie))}destroy(){this.allSublayers.destroy()}readSublayers(e,t){if(!t||!e)return;const{sublayersSourceJSON:r}=this,i=Z(t.origin);if(i<c.SERVICE)return;if(r[i]={context:t,visibleLayers:e.visibleLayers||r[i].visibleLayers,layers:e.layers||r[i].layers},i>c.SERVICE)return;this._set("serviceSublayers",this.createSublayersForOrigin("service").sublayers);const{sublayers:a,origin:s}=this.createSublayersForOrigin("web-document"),l=A(this);l.setDefaultOrigin(s),this._set("sublayers",new me(a)),l.setDefaultOrigin("user")}findSublayerById(e){return this.allSublayers.find((t=>t.id===e))}createServiceSublayers(){return this.createSublayersForOrigin("service").sublayers}createSublayersForOrigin(e){const t=Z("web-document"===e?"web-map":e);let r=c.SERVICE,i=this.sublayersSourceJSON[c.SERVICE].layers,a=this.sublayersSourceJSON[c.SERVICE].context,s=null;const l=[c.PORTAL_ITEM,c.WEB_SCENE,c.WEB_MAP].filter((e=>e<=t));for(const d of l){const e=this.sublayersSourceJSON[d];le(e.layers)&&(r=d,i=e.layers,a=e.context,e.visibleLayers&&(s={visibleLayers:e.visibleLayers,context:e.context}))}const o=[c.PORTAL_ITEM,c.WEB_SCENE,c.WEB_MAP].filter((e=>e>r&&e<=t));let n=null;for(const d of o){const{layers:e,visibleLayers:t,context:r}=this.sublayersSourceJSON[d];e&&(n={layers:e,context:r}),t&&(s={visibleLayers:t,context:r})}const y=function(e,t){const r=[],i={};return e?(e.forEach((e=>{const a=new be;if(a.read(e,t),i[a.id]=a,null!=e.parentLayerId&&-1!==e.parentLayerId){const t=i[e.parentLayerId];t.sublayers||(t.sublayers=[]),t.sublayers.unshift(a)}else r.unshift(a)})),r):r}(i,a),p=new Map,u=new Set;if(n)for(const d of n.layers)p.set(d.id,d);if(s?.visibleLayers)for(const d of s.visibleLayers)u.add(d);return ge(y,(e=>{n&&e.read(p.get(e.id),n.context),s&&e.read({defaultVisibility:u.has(e.id)},s.context)})),{origin:ae(r),sublayers:new me({items:y})}}read(e,t){super.read(e,t),this.readSublayers(e,t)}_handleSublayersChange(e,t){t&&(t.forEach((e=>{e.parent=null,e.layer=null})),this.removeHandles("sublayers-owner")),e&&(e.forEach((e=>{e.parent=this,e.layer=this})),this.addHandles([e.on("after-add",(({item:e})=>{e.parent=this,e.layer=this})),e.on("after-remove",(({item:e})=>{e.parent=null,e.layer=null}))],"sublayers-owner"),"tile"===this.type&&this.addHandles(e.on("before-changes",(e=>{T.getLogger("esri.layers.TileLayer").error(new I("tilelayer:sublayers-non-modifiable","ISublayer can't be added, moved, or removed from the layer's sublayers",{layer:this})),e.preventDefault()})),"sublayers-owner"))}};return r([i({readOnly:!0})],t.prototype,"allSublayers",void 0),r([i({readOnly:!0,type:P.ofType(be)})],t.prototype,"serviceSublayers",void 0),r([i({value:null,type:me,json:{read:!1,write:{allowNull:!0,ignoreOrigin:!0}}})],t.prototype,"sublayers",void 0),r([i({readOnly:!0})],t.prototype,"sublayersSourceJSON",void 0),t=r([y("esri.layers.mixins.SublayersOwner")],t),t}))}}}));
