System.register(["./index-legacy.js","./associatedFeatureServiceUtils-legacy.js","./fetchService-legacy.js","./lazyLayerLoader-legacy.js"],(function(e,r){"use strict";var a,t,s,n,l,o,c,u,i,y,f;return{setters:[e=>{a=e._,t=e.p,s=e.s,n=e.by,l=e.bz,o=e.ao,c=e.bA},e=>{u=e.s},e=>{i=e.t},e=>{y=e.t,f=e.a}],execute:function(){e("fromUrl",(async function(e){const t=e.properties?.customParameters,s=await p(e.url,t),n={...e.properties,url:e.url};if(s.layers.length+s.tables.length===0)return null!=s.layerId&&(n.layerId=s.layerId),null!=s.sourceJSON&&(n.sourceJSON=s.sourceJSON),new s.Constructor(n);const l=new((await a((()=>r.import("./GroupLayer-legacy.js")),void 0,r.meta.url)).default)({title:s.parsedUrl.title});return await async function(e,r,a){function t(e,r,t,s){const n={...a,layerId:r,sublayerTitleMode:"service-name"};return null!=e&&(n.url=e),null!=t&&(n.sourceJSON=t),s(n)}const s=r.sublayerConstructorProvider;for(const{id:n,serverUrl:l}of r.layers){const a=d(r.sublayerInfos,n),o=(a&&s?.(a))??r.Constructor,c=t(l,n,a,(e=>new o(e)));e.add(c)}if(r.tables.length){const a=await w("FeatureLayer");r.tables.forEach((({id:s,serverUrl:n})=>{const l=t(n,s,d(r.tableInfos,s),(e=>new a(e)));e.tables.add(l)}))}}(l,s,n),l}));const m={FeatureLayer:!0,SceneLayer:!0};function d(e,r){return e?e.find((e=>e.id===r)):null}async function p(e,r){let a=t(e);if(null==a&&(a=await async function(e,r){const a=await y(e,{customParameters:r});let t=null,s=null;const c=a.type;if("Feature Layer"===c||"Table"===c?(t="FeatureServer",s=a.id??null):"indexedVector"===c?t="VectorTileServer":a.hasOwnProperty("mapName")?t="MapServer":a.hasOwnProperty("bandCount")&&a.hasOwnProperty("pixelSizeX")?t="ImageServer":a.hasOwnProperty("maxRecordCount")&&a.hasOwnProperty("allowGeometryUpdates")?t="FeatureServer":a.hasOwnProperty("streamUrls")?t="StreamServer":v(a)?(t="SceneServer",s=a.id):a.hasOwnProperty("layers")&&v(a.layers?.[0])&&(t="SceneServer"),!t)return null;const u=null!=s?n(e):null;return{title:null!=u&&a.name||l(e),serverType:t,sublayer:s,url:{path:null!=u?u.serviceUrl:o(e).path}}}(e,r)),null==a)throw new s("arcgis-layers:url-mismatch","The url '${url}' is not a valid arcgis resource",{url:e});const{serverType:u,sublayer:f}=a;let d;const p={FeatureServer:"FeatureLayer",StreamServer:"StreamLayer",VectorTileServer:"VectorTileLayer"},b="FeatureServer"===u,h="SceneServer"===u,I={parsedUrl:a,Constructor:null,layerId:b||h?f??void 0:void 0,layers:[],tables:[]};switch(u){case"MapServer":d=null!=f?"FeatureLayer":await async function(e,r){return(await y(e,{customParameters:r})).tileInfo}(e,r)?"TileLayer":"MapImageLayer";break;case"ImageServer":{const a=await y(e,{customParameters:r}),{tileInfo:t,cacheType:s}=a;d=t?"LERC"!==t?.format?.toUpperCase()||s&&"elevation"!==s.toLowerCase()?"ImageryTileLayer":"ElevationLayer":"ImageryLayer";break}case"SceneServer":{const e=await y(a.url.path,{customParameters:r});if(d="SceneLayer",e){const r=e?.layers;if("Voxel"===e?.layerType)d="VoxelLayer";else if(r?.length){const e=r[0]?.layerType;null!=e&&null!=c[e]&&(d=c[e])}}break}case"3DTilesServer":throw new s("arcgis-layers:unsupported","fromUrl() not supported for 3DTiles layers");case"FeatureServer":if(d="FeatureLayer",null!=f){const a=await y(e,{customParameters:r});I.sourceJSON=a,"Oriented Imagery Layer"===a.type&&(d="OrientedImageryLayer")}break;default:d=p[u]}if(m[d]&&null==f){const a=await async function(e,r,a){let t,s,n=!1;switch(r){case"FeatureServer":{const r=await i(e,{customParameters:a});n=!!r.layersJSON,t=r.layersJSON||r.serviceJSON;break}case"SceneServer":{const r=await S(e,a);t=r.serviceInfo,s=r.tableServerUrl;break}default:t=await y(e,{customParameters:a})}const l=t?.layers,o=t?.tables;return{layers:l?.map((e=>({id:e.id}))).reverse()||[],tables:o?.map((e=>({serverUrl:s,id:e.id}))).reverse()||[],layerInfos:n?l:[],tableInfos:n?o:[]}}(e,u,r);if(b&&(I.sublayerInfos=a.layerInfos,I.tableInfos=a.tableInfos),1!==a.layers.length+a.tables.length)I.layers=a.layers,I.tables=a.tables,b&&a.layerInfos?.length&&(I.sublayerConstructorProvider=await async function(e){const r=[],a=[];if(e.forEach((e=>{const{type:t}=e;"Oriented Imagery Layer"===t?(r.push(t),a.push(w("OrientedImageryLayer"))):(r.push(t),a.push(w("FeatureLayer")))})),!a.length)return;const t=await Promise.all(a),s=new Map;return r.forEach(((e,r)=>{s.set(e,t[r])})),e=>s.get(e.type)}(a.layerInfos));else if(b||h){const e=a.layerInfos?.[0]??a.tableInfos?.[0];I.layerId=a.layers[0]?.id??a.tables[0]?.id,I.sourceJSON=e,b&&"Oriented Imagery Layer"===e?.type&&(d="OrientedImageryLayer")}}return I.Constructor=await w(d),I}function v(e){return null!=e&&e.hasOwnProperty("store")&&e.hasOwnProperty("id")&&"number"==typeof e.id}async function S(e,r){const a=await y(e,{customParameters:r}),t=a.layers?.[0];if(!t)return{serviceInfo:a};try{const{serverUrl:t}=await u(e),s=await y(t,{customParameters:r}).catch((()=>null));return s&&(a.tables=s.tables),{serviceInfo:a,tableServerUrl:t}}catch{return{serviceInfo:a}}}async function w(e){return(0,f[e])()}}}}));
