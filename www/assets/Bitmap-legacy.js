System.register(["./index-legacy.js","./Container-legacy.js","./enums-legacy.js","./Texture-legacy.js"],(function(t,e){"use strict";var i,s,r,h,l,n,o,u,a,c,d,x,p,_,g,m;return{setters:[t=>{i=t.aC,s=t.eI,r=t.eJ,h=t.eK,l=t.eL,n=t.eM,o=t.eN,u=t.eO,a=t.eP,c=t.eQ},t=>{d=t.i},t=>{x=t.P,p=t.G,_=t.D},t=>{g=t.e,m=t.m}],execute:function(){t({f:B,g:w});class e{constructor(t,e,i){this.pixelBlock=t,this.extent=e,this.originalPixelBlock=i}get width(){return null!=this.pixelBlock?this.pixelBlock.width:0}get height(){return null!=this.pixelBlock?this.pixelBlock.height:0}render(t){const e=this.pixelBlock;if(null==e)return;const i=this.filter({extent:this.extent,pixelBlock:this.originalPixelBlock??e});if(null==i.pixelBlock)return;i.pixelBlock.maskIsAlpha&&(i.pixelBlock.premultiplyAlpha=!0);const s=i.pixelBlock.getAsRGBA(),r=t.createImageData(i.pixelBlock.width,i.pixelBlock.height);r.data.set(s),t.putImageData(r,0,0)}getRenderedRasterPixels(){const t=this.filter({extent:this.extent,pixelBlock:this.pixelBlock});return null==t.pixelBlock?null:(t.pixelBlock.maskIsAlpha&&(t.pixelBlock.premultiplyAlpha=!0),{width:t.pixelBlock.width,height:t.pixelBlock.height,renderedRasterPixels:new Uint8Array(t.pixelBlock.getAsRGBA().buffer)})}}function w(t){return t&&"render"in t}function B(t){const e=document.createElement("canvas");return e.width=t.width,e.height=t.height,t.render(e.getContext("2d")),e}t("l",e),t("b",class extends d{constructor(t=null,e=!1){super(),this.blendFunction="standard",this._sourceWidth=0,this._sourceHeight=0,this._textureInvalidated=!1,this._texture=null,this.stencilRef=0,this.coordScale=[1,1],this._height=void 0,this.pixelRatio=1,this.resolution=0,this.rotation=0,this._source=null,this._width=void 0,this.x=0,this.y=0,this.immutable=e,this.source=t,this.requestRender=this.requestRender.bind(this)}destroy(){this._texture&&(this._texture.dispose(),this._texture=null),null!=this._uploadStatus&&(this._uploadStatus.controller.abort(),this._uploadStatus=null)}get isSourceScaled(){return this.width!==this._sourceWidth||this.height!==this._sourceHeight}get height(){return void 0!==this._height?this._height:this._sourceHeight}set height(t){this._height=t}get source(){return this._source}set source(t){null==t&&null==this._source||(this._source=t,this.invalidateTexture(),this.requestRender())}get width(){return void 0!==this._width?this._width:this._sourceWidth}set width(t){this._width=t}beforeRender(t){super.beforeRender(t),this.updateTexture(t)}async setSourceAsync(t,e){null!=this._uploadStatus&&this._uploadStatus.controller.abort();const r=new AbortController,h=i();return s(e,(()=>r.abort())),s(r,(t=>h.reject(t))),this._uploadStatus={controller:r,resolver:h},this.source=t,h.promise}invalidateTexture(){this._textureInvalidated||(this._textureInvalidated=!0,this._source instanceof HTMLImageElement?(this._sourceHeight=this._source.naturalHeight,this._sourceWidth=this._source.naturalWidth):this._source&&(this._sourceHeight=this._source.height,this._sourceWidth=this._source.width))}updateTransitionProperties(t,e){t>=64&&(this.fadeTransitionEnabled=!1,this.inFadeTransition=!1),super.updateTransitionProperties(t,e)}setTransform(t){const e=r(this.transforms.displayViewScreenMat3),[i,s]=t.toScreenNoRotation([0,0],[this.x,this.y]),a=this.resolution/this.pixelRatio/t.resolution,c=a*this.width,d=a*this.height,x=Math.PI*this.rotation/180;h(e,e,l(i,s)),h(e,e,l(c/2,d/2)),n(e,e,-x),h(e,e,l(-c/2,-d/2)),o(e,e,l(c,d)),u(this.transforms.displayViewScreenMat3,t.displayViewMat3,e)}setSamplingProfile(t){this._texture&&(t.mips&&!this._texture.descriptor.hasMipmap&&this._texture.generateMipmap(),this._texture.setSamplingMode(t.samplingMode))}bind(t,e){this._texture&&t.bindTexture(this._texture,e)}async updateTexture({context:t,painter:i}){if(!this._textureInvalidated)return;if(this._textureInvalidated=!1,this._texture||(this._texture=this._createTexture(t)),!this.source)return void this._texture.setData(null);this._texture.resize(this._sourceWidth,this._sourceHeight);const s=function(t){return w(t)?t instanceof e?t.getRenderedRasterPixels()?.renderedRasterPixels:B(t):t}(this.source);try{if(null!=this._uploadStatus){const{controller:t,resolver:e}=this._uploadStatus,r={signal:t.signal},{width:h,height:l}=this,n=this._texture,o=i.textureUploadManager;await o.enqueueTextureUpdate({data:s,texture:n,width:h,height:l},r),e.resolve(),this._uploadStatus=null}else this._texture.setData(s);this.ready()}catch(r){a(r)}}onDetach(){this.destroy()}_createTransforms(){return{displayViewScreenMat3:c()}}_createTexture(t){const e=this.immutable,i=new g;return i.internalFormat=e?x.RGBA8:p.RGBA,i.wrapMode=_.CLAMP_TO_EDGE,i.isImmutable=e,i.width=this._sourceWidth,i.height=this._sourceHeight,new m(t,i)}})}}}));
