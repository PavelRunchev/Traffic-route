System.register(["./index-legacy.js","./SublayersOwner-legacy.js","./ExportImageParameters-legacy.js","./imageBitmapUtils-legacy.js","./sublayerUtils-legacy.js","./QueryTask-legacy.js","./infoFor3D-legacy.js","./executeForIds-legacy.js","./query-legacy.js","./pbfQueryUtils-legacy.js","./pbf-legacy.js","./OptimizedGeometry-legacy.js","./OptimizedFeatureSet-legacy.js","./executeQueryJSON-legacy.js","./executeQueryPBF-legacy.js","./featureConversionUtils-legacy.js","./floorFilterUtils-legacy.js"],(function(e,t){"use strict";var r,i,s,a,o,l,n,p,u,y,c,d,m,h,g,f,b,v,x,S,j,w,I,O,T,F,E,M,P,U,L,R,N,J,q,A,k;return{setters:[e=>{r=e.bs,i=e.dD,s=e.bt,a=e.dE,o=e.de,l=e.df,n=e.dg,p=e.dd,u=e.dF,y=e.dG,c=e.bx,d=e.dv,m=e.b1,h=e.dH,g=e.dI,f=e.X,b=e.aQ,v=e.dJ,x=e.dK,S=e.dL,j=e.s,w=e.o,I=e.x,O=e.y,T=e.dM,F=e.bD,E=e.dN,M=e.dj,P=e.z,U=e.bw,L=e.dO},e=>{R=e.m,N=e.f,J=e.Y},e=>{q=e.m},e=>{A=e.t},e=>{k=e.e},null,null,null,null,null,null,null,null,null,null,null,null],execute:function(){let t=class extends(r(i(s(R(N(a(o(l(n(p(u(y(U))))))))))))){constructor(...e){super(...e),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(c).then((()=>this._fetchService(t)))),Promise.resolve(this)}readImageFormat(e,t){const r=t.supportedImageFormatTypes;return r&&r.includes("PNG32")?"png32":"png24"}writeSublayers(e,t,r,i){if(!this.loaded||!e)return;const s=e.slice().reverse().flatten((({sublayers:e})=>e&&e.toArray().reverse())).toArray();let a=!1;if(this.capabilities?.operations.supportsExportMap&&this.capabilities?.exportMap?.supportsDynamicLayers){const e=d(i.origin);if(e===m.PORTAL_ITEM){const e=this.createSublayersForOrigin("service").sublayers;a=k(s,e,m.SERVICE)}else if(e>m.PORTAL_ITEM){const e=this.createSublayersForOrigin("portal-item");a=k(s,e.sublayers,d(e.origin))}}const o=[],l={writeSublayerStructure:a,...i};let n=a;s.forEach((e=>{const t=e.write({},l);o.push(t),n=n||"user"===e.originOf("visible")})),o.some((e=>Object.keys(e).length>1))&&(t.layers=o),n&&(t.visibleLayers=s.filter((e=>e.visible)).map((e=>e.id)))}createExportImageParameters(e,t,r,i){const s=i?.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const a=new q({layer:this,floors:i?.floors,scale:h({extent:e,width:t})*s}),o=a.toJSON();a.destroy();const l=!i?.rotation||this.version<10.3?{}:{rotation:-i.rotation},n=e?.spatialReference,p=g(n);o.dpi*=s;const u={};if(i?.timeExtent){const{start:e,end:t}=i.timeExtent.toJSON();u.time=e&&t&&e===t?""+e:`${e??"null"},${t??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(u.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:p,imageSR:p,size:t+","+r,...o,...l,...u}}async fetchImage(e,t,r,i){const{data:s}=await this._fetchImage("image",e,t,r,i);return s}async fetchImageBitmap(e,t,r,i){const{data:s,url:a}=await this._fetchImage("blob",e,t,r,i);return A(s,a,i?.signal)}async fetchRecomputedExtents(e={}){const t={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:r}=await f(this.url,t),{extent:i,fullExtent:s,timeExtent:a}=r,o=i||s;return{fullExtent:o&&b.fromJSON(o),timeExtent:a&&v.fromJSON({start:a[0],end:a[1]})}}loadAll(){return x(this,(e=>{e(this.allSublayers)}))}serviceSupportsSpatialReference(e){return S(this,e)}async _fetchImage(e,t,r,i,s){const o={responseType:e,signal:s?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(t,r,i,s),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(null!=o.query?.dynamicLayers&&!this.capabilities?.exportMap?.supportsDynamicLayers)throw new j("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:o.query});try{const{data:e}=await f(l,o);return{data:e,url:l}}catch(a){if(w(a))throw a;throw new j("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:a})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:t,ssl:r}=await f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});r&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=t,this.read(t,{origin:"service",url:this.parsedUrl})}};I([O(T("dateFieldsTimeReference"))],t.prototype,"dateFieldsTimeZone",void 0),I([O({type:Boolean})],t.prototype,"datesInUnknownTimezone",void 0),I([O()],t.prototype,"dpi",void 0),I([O()],t.prototype,"gdbVersion",void 0),I([O()],t.prototype,"imageFormat",void 0),I([F("imageFormat",["supportedImageFormatTypes"])],t.prototype,"readImageFormat",null),I([O({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],t.prototype,"imageMaxHeight",void 0),I([O({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],t.prototype,"imageMaxWidth",void 0),I([O()],t.prototype,"imageTransparency",void 0),I([O({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],t.prototype,"isReference",void 0),I([O({json:{read:!1,write:!1}})],t.prototype,"labelsVisible",void 0),I([O({type:["ArcGISMapServiceLayer"]})],t.prototype,"operationalLayerType",void 0),I([O({json:{read:!1,write:!1}})],t.prototype,"popupEnabled",void 0),I([O(T("preferredTimeReference"))],t.prototype,"preferredTimeZone",void 0),I([O()],t.prototype,"sourceJSON",void 0),I([O({json:{write:{ignoreOrigin:!0}}})],t.prototype,"sublayers",void 0),I([E("sublayers",{layers:{type:[J]},visibleLayers:{type:[L]}})],t.prototype,"writeSublayers",null),I([O({type:["show","hide","hide-children"]})],t.prototype,"listMode",void 0),I([O({json:{read:!1},readOnly:!0,value:"map-image"})],t.prototype,"type",void 0),I([O(M)],t.prototype,"url",void 0),t=I([P("esri.layers.MapImageLayer")],t),e("default",t)}}}));
