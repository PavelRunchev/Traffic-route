System.register(["./index-legacy.js","./clientSideDefaults-legacy.js","./QueryEngineCapabilities-legacy.js"],(function(e,t){"use strict";var i,r,o,s,n,a,l,u,d,c,y,h,p,f,g,m,v,w,S;return{setters:[e=>{i=e.x,r=e.y,o=e.z,s=e.ex,n=e.A,a=e.E,l=e.aQ,u=e.ed,d=e.ai,c=e.bD,y=e.ds,h=e.f5,p=e.dQ,f=e.bc,g=e.bx,m=e.ao,v=e.az,w=e.s},e=>{S=e.l},null],execute:function(){let t=class extends s{constructor(e){super(e),this.type="csv",this.refresh=n((async e=>{await this.load();const{extent:t,timeExtent:i}=await this._connection.invoke("refresh",e);return t&&(this.sourceJSON.extent=t),i&&(this.sourceJSON.timeInfo.timeExtent=[i.start,i.end]),{dataChanged:!0,updates:{extent:this.sourceJSON.extent,timeInfo:this.sourceJSON.timeInfo}}}))}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this._startWorker(t)),Promise.resolve(this)}destroy(){this._connection?.close(),this._connection=null}async openPorts(){return await this.load(),this._connection.openPorts()}async queryFeatures(e,t={}){await this.load(t);const i=await this._connection.invoke("queryFeatures",e?e.toJSON():null,t);return a.fromJSON(i)}async queryFeaturesJSON(e,t={}){return await this.load(t),this._connection.invoke("queryFeatures",e?e.toJSON():null,t)}async queryFeatureCount(e,t={}){return await this.load(t),this._connection.invoke("queryFeatureCount",e?e.toJSON():null,t)}async queryObjectIds(e,t={}){return await this.load(t),this._connection.invoke("queryObjectIds",e?e.toJSON():null,t)}async queryExtent(e,t={}){await this.load(t);const i=await this._connection.invoke("queryExtent",e?e.toJSON():null,t);return{count:i.count,extent:l.fromJSON(i.extent)}}async querySnapping(e,t={}){return await this.load(t),this._connection.invoke("querySnapping",e,t)}async _startWorker(e){this._connection=await u("CSVSourceWorker",{strategy:d("feature-layers-workers")?"dedicated":"local",signal:e,registryTarget:this});const{url:t,delimiter:i,fields:r,latitudeField:o,longitudeField:s,spatialReference:n,timeInfo:a}=this.loadOptions,l=await this._connection.invoke("load",{url:t,customParameters:this.customParameters,parsingOptions:{delimiter:i,fields:r?.map((e=>e.toJSON())),latitudeField:o,longitudeField:s,spatialReference:n?.toJSON(),timeInfo:a?.toJSON()}},{signal:e});this.locationInfo=l.locationInfo,this.sourceJSON=l.layerDefinition,this.delimiter=l.delimiter}};function O(e,t){throw new w(t,`CSVLayer (title: ${e.title}, id: ${e.id}) cannot be saved to a portal item`)}i([r()],t.prototype,"type",void 0),i([r()],t.prototype,"loadOptions",void 0),i([r()],t.prototype,"customParameters",void 0),i([r()],t.prototype,"locationInfo",void 0),i([r()],t.prototype,"sourceJSON",void 0),i([r()],t.prototype,"delimiter",void 0),t=i([o("esri.layers.graphics.sources.CSVSource")],t);let b=class extends p{constructor(...e){super(...e),this.geometryType="point",this.capabilities=S(!1,!1),this.delimiter=null,this.editingEnabled=!1,this.fields=null,this.latitudeField=null,this.locationType="coordinates",this.longitudeField=null,this.operationalLayerType="CSV",this.outFields=["*"],this.path=null,this.spatialReference=f.WGS84,this.source=null,this.type="csv"}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=null!=e?e.signal:null,i=this.loadFromPortal({supportedTypes:["CSV"],supportsData:!1},e).catch(g).then((async()=>this.initLayerProperties(await this.createGraphicsSource(t))));return this.addResolvingPromise(i),Promise.resolve(this)}get isTable(){return this.loaded&&null==this.geometryType}readWebMapLabelsVisible(e,t){return null!=t.showLabels?t.showLabels:!!t.layerDefinition?.drawingInfo?.labelingInfo}set url(e){if(!e)return void this._set("url",e);const t=m(e);this._set("url",t.path),t.query&&(this.customParameters={...this.customParameters,...t.query})}async createGraphicsSource(e){const i=new t({loadOptions:{delimiter:this.delimiter,fields:this.fields,latitudeField:this.latitudeField??void 0,longitudeField:this.longitudeField??void 0,spatialReference:this.spatialReference??void 0,timeInfo:this.timeInfo??void 0,url:this.url},customParameters:this.customParameters??void 0});return this._set("source",i),await i.load({signal:e}),this.read({locationInfo:i.locationInfo,columnDelimiter:i.delimiter},{origin:"service",url:this.parsedUrl}),i}queryFeatures(e,t){return this.load().then((()=>this.source.queryFeatures(v.from(e)||this.createQuery()))).then((e=>{if(e?.features)for(const t of e.features)t.layer=t.sourceLayer=this;return e}))}queryObjectIds(e,t){return this.load().then((()=>this.source.queryObjectIds(v.from(e)||this.createQuery())))}queryFeatureCount(e,t){return this.load().then((()=>this.source.queryFeatureCount(v.from(e)||this.createQuery())))}queryExtent(e,t){return this.load().then((()=>this.source.queryExtent(v.from(e)||this.createQuery())))}read(e,t){super.read(e,t),t&&"service"===t.origin&&this.revert(["latitudeField","longitudeField"],"service")}write(e,t){return super.write(e,{...t,writeLayerSchema:!0})}clone(){throw new w("csv-layer:clone",`CSVLayer (title: ${this.title}, id: ${this.id}) cannot be cloned`)}async save(e){return O(this,"csv-layer:save")}async saveAs(e,t){return O(this,"csv-layer:save-as")}async hasDataChanged(){try{const{dataChanged:e,updates:t}=await this.source.refresh(this.customParameters);return null!=t&&this.read(t,{origin:"service",url:this.parsedUrl,ignoreDefaults:!0}),e}catch{}return!1}_verifyFields(){}_verifySource(){}_hasMemorySource(){return!1}};i([r({readOnly:!0,json:{read:!1,write:!1}})],b.prototype,"capabilities",void 0),i([r({type:[","," ",";","|","\t"],json:{read:{source:"columnDelimiter"},write:{target:"columnDelimiter",ignoreOrigin:!0}}})],b.prototype,"delimiter",void 0),i([r({readOnly:!0,type:Boolean,json:{origins:{"web-scene":{read:!1,write:!1}}}})],b.prototype,"editingEnabled",void 0),i([r({json:{read:{source:"layerDefinition.fields"},write:{target:"layerDefinition.fields"}}})],b.prototype,"fields",void 0),i([r({type:Boolean,readOnly:!0})],b.prototype,"isTable",null),i([c("web-map","labelsVisible",["layerDefinition.drawingInfo.labelingInfo","showLabels"])],b.prototype,"readWebMapLabelsVisible",null),i([r({type:String,json:{read:{source:"locationInfo.latitudeFieldName"},write:{target:"locationInfo.latitudeFieldName",ignoreOrigin:!0}}})],b.prototype,"latitudeField",void 0),i([r({type:["show","hide"]})],b.prototype,"listMode",void 0),i([r({type:["coordinates"],json:{read:{source:"locationInfo.locationType"},write:{target:"locationInfo.locationType",ignoreOrigin:!0,isRequired:!0}}})],b.prototype,"locationType",void 0),i([r({type:String,json:{read:{source:"locationInfo.longitudeFieldName"},write:{target:"locationInfo.longitudeFieldName",ignoreOrigin:!0}}})],b.prototype,"longitudeField",void 0),i([r({type:["CSV"]})],b.prototype,"operationalLayerType",void 0),i([r()],b.prototype,"outFields",void 0),i([r({type:String,json:{origins:{"web-scene":{read:!1,write:!1}},read:!1,write:!1}})],b.prototype,"path",void 0),i([r({json:{read:!1},cast:null,type:t,readOnly:!0})],b.prototype,"source",void 0),i([r({json:{read:!1},value:"csv",readOnly:!0})],b.prototype,"type",void 0),i([r({json:{read:y,write:{isRequired:!0,ignoreOrigin:!0,writer:h}}})],b.prototype,"url",null),b=i([o("esri.layers.CSVLayer")],b),e("default",b)}}}));
