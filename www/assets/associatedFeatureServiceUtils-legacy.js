System.register(["./index-legacy.js"],(function(e,r){"use strict";var t,n,a,s,i,l,o;return{setters:[e=>{t=e.p,n=e.s,a=e.am,s=e.an,i=e.bx,l=e.X,o=e.be}],execute:function(){async function r(e){if(e.rootDocument)return e.rootDocument;const r={query:{f:"json",...e.customParameters,token:e.apiKey},responseType:"json",signal:e.signal};try{const t=await l(e.sceneServerUrl,r);e.rootDocument=t.data}catch{e.rootDocument={}}return e.rootDocument}async function c(e){const r=o?.findServerInfo(e.sceneServerUrl);if(r?.owningSystemUrl)return r.owningSystemUrl;const t=e.sceneServerUrl.replace(/(.*\/rest)\/.*/i,"$1")+"/info";try{const r=(await l(t,{query:{f:"json"},responseType:"json",signal:e.signal})).data.owningSystemUrl;if(r)return r}catch(n){i(n)}return null}async function u(e,a){const s=t(e);if(!s)throw new n("invalid-feature-service-url","Invalid feature service url");const i=s.url.path,o=a.layerId;if(null==o)return{serverUrl:i};const c=r(a),u=a.featureServiceItem?await a.featureServiceItem.fetchData("json"):null,y=(u?.layers?.[0]||u?.tables?.[0])?.customParameters,f=e=>{const r={query:{f:"json",...y},responseType:"json",authMode:e,signal:a.signal};return l(i,r)},d=f("anonymous").catch((()=>f("no-prompt"))),[v,m]=await Promise.all([d,c]),w=m?.layers,p=v.data&&v.data.layers;if(!Array.isArray(p))throw new Error("expected layers array");if(Array.isArray(w)){for(let r=0;r<Math.min(w.length,p.length);r++)if(w[r].id===o)return{serverUrl:i,layerId:p[r].id}}else if(null!=o&&o<p.length)return{serverUrl:i,layerId:p[o].id};throw new Error("could not find matching associated sublayer")}e("s",(async function(e,l){const y=t(e);if(!y)throw new n("invalid-url","Invalid scene service url");const f={...l,sceneServerUrl:y.url.path,layerId:y.sublayer??void 0};if(f.sceneLayerItem??=await async function(e){const t=(await r(e)).serviceItemId;if(!t)return null;const n=new a({id:t,apiKey:e.apiKey}),l=await c(e);null!=l&&(n.portal=new s({url:l}));try{return n.load({signal:e.signal})}catch(v){return i(v),null}}(f),null==f.sceneLayerItem)return u(f.sceneServerUrl.replace("/SceneServer","/FeatureServer"),f);const d=await async function({sceneLayerItem:e,signal:r}){if(!e)return null;try{const t=(await e.fetchRelatedItems({relationshipType:"Service2Service",direction:"reverse"},{signal:r})).find((e=>"Feature Service"===e.type))||null;if(!t)return null;const n=new a({portal:t.portal,id:t.id});return await n.load(),n}catch(o){return i(o),null}}(f);if(!d?.url)throw new n("related-service-not-found","Could not find feature service through portal item relationship");f.featureServiceItem=d;const v=await u(d.url,f);return v.portalItem=d,v}))}}}));
