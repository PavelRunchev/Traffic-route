System.register(["./index-legacy.js","./UpdateTracking2D-legacy.js","./definitions-legacy.js","./WGLContainer-legacy.js","./AttributeStore-legacy.js","./FeatureCommandQueue-legacy.js","./featureConversionUtils-legacy.js","./OptimizedGeometry-legacy.js","./normalizeUtilsSync-legacy.js","./timeSupport-legacy.js"],(function(e,t){"use strict";var s,i,r,o,a,n,h,c,d,l,u,p,m,y,_,g,f,b,w,I,S,v,x,R,T,M,G,C,z,U,j,O,k,P,q,A,E,F,V,D,$,H,L,W,Z,N,B,X,Q,Y,J,K,ee,te,se,ie,re,oe,ae,ne,he,ce,de;return{setters:[e=>{s=e.cC,i=e.iF,r=e.iG,o=e.aN,a=e.a9,n=e.iH,h=e.Y,c=e.ai,d=e.g9,l=e.iI,u=e.iJ,p=e.aa,m=e.ae,y=e.c3,_=e.dc,g=e.cx,f=e.C,b=e.q,w=e.iK,I=e.at,S=e.a2,v=e.iL,x=e.a1,R=e.iM,T=e.iN,M=e.iO,G=e.a7,C=e.x,z=e.y,U=e.z,j=e.bm},e=>{O=e.W,k=e.J,P=e.d,q=e.U,A=e.K,E=e.n},e=>{F=e.a,V=e.O},e=>{D=e.b},e=>{$=e.C,H=e.p,L=e.b,W=e.s,Z=e.a,N=e.n,B=e.c},e=>{X=e.r,Q=e.y,Y=e.a,J=e.z,K=e.p,ee=e.S,te=e.u,se=e.x,ie=e.b,re=e.t},e=>{oe=e.o,ae=e.a},e=>{ne=e.e},e=>{he=e.a},e=>{ce=e.x,de=e.j}],execute:function(){async function t(e,t,s){const i=[],r={scaleInfo:X(e),scaleExpression:null};for(const o of t)switch(o.type){case"marker":i.push(...te(s.instances.marker,o,se,r));break;case"fill":null==o.spriteRasterizationParam?i.push(...K(s.instances.fill,o,r)):i.push(...ee(s.instances.complexFill,o,!1,r));break;case"line":o.spriteRasterizationParam?i.push(...Y(s.instances.texturedLine,o,!1,r)):i.push(...J(s.instances.line,o,!1,r));break;case"text":i.push(...Q(s.instances.text,o,se,r))}return i}class le extends ${static from(e,t,s){return new le(e,t,s)}constructor(e,t,s){super(s),this._items=e,this._tile=t,this._index=-1,this._cachedGeometry=null;const i=t.lod;i.wrap&&(this._wrappingInfo={worldSizeX:i.worldSize[0]})}get _current(){return this._items[this._index]}getItem(){return this._current}getZOrder(){return this._current.zOrder}getMeshWriters(){return this._current.symbolResource?.symbolInfo.meshWriters??[]}hasField(e){return null!=this._current.attributes[e]}field(e){return this.readAttribute(e)}get geometryType(){const e=s(this._current.geometry);return"esriGeometryPoint"===e?"esriGeometryMultipoint":e}getCursor(){return this.copy()}copy(){const e=new le(this._items,this._tile,this.metadata);return this.copyInto(e),e}copyInto(e){super.copyInto(e),e._cachedGeometry=this._cachedGeometry,e._index=this._index}get fields(){throw new Error("Fields reading not supported to graphics.")}get hasFeatures(){return!!this._items.length}get hasNext(){return this._index+1<this._items.length}get exceededTransferLimit(){throw new Error("InternalError: exceededTransferLimit not implemented for graphics.")}get hasZ(){return!1}get hasM(){return!1}getInTransform(){return this._tile.transform}getSize(){return this._items.length}getAttributeHash(){let e="";for(const t in this._current.attributes)e+=this._current.attributes[t];return e}getObjectId(){return this._items[this._index].objectId}getDisplayId(){return this._current.displayId}setDisplayId(e){throw new Error("InternalError: Setting displayId not supported for graphics.")}setIndex(e){this._index=e}getIndex(){return this._index}next(){for(this._cachedGeometry=null;++this._index<this._items.length&&!this._getExists(););return this._index<this._items.length}readGeometryArea(){throw new Error("InternalError: readGeometryArea not supported for graphics.")}_readGeometry(){if(!this._cachedGeometry){const e=oe(this._current.projectedGeometry,this.hasZ,this.hasM);if(this._cachedGeometry=ae(new ne,e,this.hasZ,this.hasM,this.geometryType,this._tile.transform),!this._cachedGeometry)return null;this._wrapGeometry(this._cachedGeometry)}return this._cachedGeometry}_wrapGeometry(e){if(!this._wrappingInfo)return;const{worldSizeX:t}=this._wrappingInfo;if(e.isPoint)return 1===t?(e.coords.push(F,0),e.coords.push(2*-F,0),void e.lengths.push(3)):2===t?(e.coords.push(2*F,0),e.coords.push(4*-F,0),void e.lengths.push(3)):void this._wrapVertex(e.coords,0,2,t);if("esriGeometryMultipoint"!==this.geometryType);else{if(1===t){const t=e.coords.slice();t[0]-=512;const s=e.coords.slice();s[0]+=512,e.coords.push(...t,...s);const i=e.lengths[0];return void e.lengths.push(i,i)}this._wrapVertex(e.coords,0,2,t)}}_wrapVertex(e,t,s,i){const r=t*s,o=e[r];o<-F*(i-2)?e[r]=o+F*i:o>F*(i-1)&&(e[r]=o-F*i)}_readX(){const e=this._readGeometry();return null!=e?e.coords[0]:0}_readY(){const e=this._readGeometry();return null!=e?e.coords[1]:0}_readServerCentroid(){switch(this.geometryType){case"esriGeometryPolygon":{const e=r(this._current.projectedGeometry),t=new ne([],e);return ae(new ne,t,this.hasZ,this.hasM,this.geometryType,this._tile.transform)}case"esriGeometryPolyline":{const e=this._current.projectedGeometry,t=i(e.paths,this.hasZ),s=new ne([],t);return ae(new ne,s,this.hasZ,this.hasM,this.geometryType,this._tile.transform)}}return null}_readAttribute(e,t){const s=this._current.attributes[e];if(void 0!==s)return s;const i=e.toLowerCase();for(const r in this._current.attributes)if(r.toLowerCase()===i)return this._current.attributes[r]}_readAttributes(){return this._current.attributes}}function ue(e){if(!e)return null;const{xmin:t,ymin:s,xmax:i,ymax:r,spatialReference:a}=e;return new o({rings:[[[t,s],[t,r],[i,r],[i,s],[t,s]]],spatialReference:a})}let pe=class e{static fromGraphic(t,s,i,r){return new e(t.geometry,s,t.attributes,t.visible,t.uid,i,r)}constructor(e,t,s,i,r,o,n){this.geometry=e,this.symbol=t,this.attributes=s,this.visible=i,this.objectId=r,this.zOrder=o,this.displayId=n,this.bounds=a(),this.prevBounds=a(),this.size=[0,0,0,0]}get linearCIM(){return this.symbolResource?.symbolInfo.linearCIM}update(e,t,s){return(this.geometry!==e.geometry||this.attributes!==e.attributes||this.symbol!==t||this.zOrder!==s||this.visible!==e.visible)&&(this.prevBounds=this.bounds,this.bounds=a(),this.zOrder=s,this.geometry=e.geometry,this.attributes=e.attributes,this.symbol=t,this.visible=e.visible,this.symbolResource=null,this.projectedGeometry=null,!0)}async projectAndNormalize(e){let t=this.geometry;if(!t||!t.spatialReference||"mesh"===t.type)return;"extent"===t.type&&(t=ue(t)),await ce(t.spatialReference,e);const s=he(t);if(!s)return;const i=de(s,t.spatialReference,e);i&&n(i),this.projectedGeometry=h(i)?ue(i):i}};class me{constructor(e,t,s){this.added=e,this.updated=t,this.removed=s}hasAnyUpdate(){return!!(this.added.length||this.updated.length||this.removed.length)}}const ye=1e-5;function _e(e,t){return t.zOrder-e.zOrder}class ge{constructor(e,t,s,i,r){this._items=new Map,this._boundsDirty=!1,this._outSpatialReference=e,this._cimResourceManager=t,this._hittestDrawHelper=new O(t),this._tileInfoView=s,this._store=r;const o=s.getClosestInfoForScale(i);this._resolution=this._tileInfoView.getTileResolution(o.level)}items(){return this._items.values()}getItem(e){return this._items.get(e)}async update(e,t,s){const i=[],r=[],o=[],a=new Set,n=[];let h=0;for(const c of e.items){h++;const e=c.uid,o=this._items.get(e),d=t(c);if(a.add(e),o){o.update(c,d,h)&&(r.push(o),n.push(this._updateItem(o,s)));continue}const l=this._store.createDisplayIdForObjectId(e),u=pe.fromGraphic(c,d,h,l);n.push(this._updateItem(u,s)),this._items.set(u.objectId,u),i.push(u)}for(const[c,d]of this._items.entries())a.has(c)||(this._store.releaseDisplayIdForObjectId(c),this._items.delete(c),o.push(d));return await Promise.all(n),this._index=null,new me(i,r,o)}updateLevel(e){this._resolution!==e&&(this._index=null,this._boundsDirty=!0,this._resolution=e)}hitTest(e,t,s,i,r){const o=c("esri-mobile"),n=c(o?"hittest-2d-mobile-tolerance":"hittest-2d-desktop-tolerance"),h=n+(o?0:c("hittest-2d-small-symbol-tolerance"));e=d(e,this._tileInfoView.spatialReference);const u=i*window.devicePixelRatio*h,p=a();p[0]=e-u,p[1]=t-u,p[2]=e+u,p[3]=t+u;const m=i*window.devicePixelRatio*n,y=a();y[0]=e-m,y[1]=t-m,y[2]=e+m,y[3]=t+m;const _=.5*i*(h+50),g=this._searchIndex(e-_,t-_,e+_,t+_);if(!g||0===g.length)return[];const f=[],b=a(),w=a();for(const a of g){if(!a.visible)continue;const{projectedGeometry:e,symbolResource:t}=a;this._getSymbolBounds(b,t,e,w,r),w[3]=w[2]=w[1]=w[0]=0,l(b,p)&&f.push(a)}if(0===f.length)return[];const I=this._hittestDrawHelper,S=[];for(const a of f){const{projectedGeometry:e,symbolResource:t}=a;if(!t)continue;const{textInfo:s,symbolInfo:o}=t,n=o.cimSymbol;I.hitTest(y,n.symbol,e,s,r,i)&&S.push(a)}return S.sort(_e),S.map((e=>e.objectId))}queryItems(e){return 0===this._items.size?[]:this._searchForItems(e)}clear(){this._items.clear(),this._index=null}async _updateItem(e,t){await e.projectAndNormalize(this._outSpatialReference),await t(e);const{size:s}=e;s[0]=s[1]=s[2]=s[3]=0,this._getSymbolBounds(e.bounds,e.symbolResource,e.projectedGeometry,e.size,0)}_searchIndex(e,t,s,i){return this._boundsDirty&&(this._items.forEach((e=>this._getSymbolBounds(e.bounds,e.symbolResource,e.projectedGeometry,e.size,0))),this._boundsDirty=!1),this._index||(this._index=u(9,(e=>({minX:e.bounds[0],minY:e.bounds[1],maxX:e.bounds[2],maxY:e.bounds[3]}))),this._index.load(Array.from(this._items.values()))),this._index.search({minX:e,minY:t,maxX:s,maxY:i})}_searchForItems(e){const t=this._tileInfoView.spatialReference,s=e.bounds,i=p(t);if(i&&t.isWrappable){const[t,r]=i.valid,o=Math.abs(s[2]-r)<ye,n=Math.abs(s[0]-t)<ye;if((!o||!n)&&(o||n)){const i=e.resolution;let n;n=a(o?[t,s[1],t+50*i,s[3]]:[r-50*i,s[1],r,s[3]]);const h=this._searchIndex(s[0],s[1],s[2],s[3]),c=this._searchIndex(n[0],n[1],n[2],n[3]);return[...new Set([...h,...c])]}}return this._searchIndex(s[0],s[1],s[2],s[3])}_getSymbolBounds(e,t,s,i,r){if(!t||!t.symbolInfo.linearCIM||!s)return null;if(e||(e=a()),m(e,s),!i||0===i[0]&&0===i[1]&&0===i[2]&&0===i[3]){const{textInfo:e,symbolInfo:s}=t,o=s.cimSymbol;i||(i=[0,0,0,0]);const a=k.getSymbolInflateSize(i,o.symbol,this._cimResourceManager,r,e);i[0]=y(a[0]),i[1]=y(a[1]),i[2]=y(a[2]),i[3]=y(a[3])}const o=this._resolution,n=k.safeSize(i);return e[0]-=n*o,e[1]-=n*o,e[2]+=n*o,e[3]+=n*o,e}}class fe{static getOrCreate(e,t,s){let i=t.get(e.id);return i||(i=new fe(e,s),t.set(e.id,i)),i}static fromItems(e,t,s){const i=new fe(e,s);return i.addedOrModified.push(...t),i}constructor(e,t){this.tile=e,this.metadata=t,this.addedOrModified=[],this.removed=[]}get reader(){return this._reader||(this._reader=le.from(this.addedOrModified,this.tile,this.metadata)),this._reader}}let be=class extends(_(j)){constructor(e){super(e),this._attached=!1,this._tiles=new Map,this._controller=new AbortController,this._hashToSymbolInfo=new Map,this._lastCleanup=performance.now(),this._cleanupRequired=!0,this.lastUpdateId=-1,this.renderer=null,this._updateTracking=new P({debugName:"GraphicsView2D"}),this.updateRequested=!1,this.defaultPointSymbolEnabled=!0,this._commandQueue=new ie({process:e=>{switch(e.type){case"processed-edit":throw new Error("InternalError: Unsupported command");case"update":return this._update()}}}),this.graphicUpdateHandler=this.graphicUpdateHandler.bind(this)}destroy(){this.container.destroy(),this.view=null,this.renderer=null,this._set("graphics",null),this._controller.abort(),this._graphicStore.clear(),this._attributeStore=null,this._hashToSymbolInfo.clear(),this._updateTracking.destroy(),this._commandQueue.destroy()}_initAttributeStore(){this._storage=new H({spatialReference:this.view.spatialReference,fields:new g}),this._attributeStore=new L({isLocal:!0,update:async e=>{c("esri-2d-update-debug")&&console.debug(`[Id: ${this.layerId}] GraphicsView2D.AttributeStoreView.updateStart`,{message:e});const t=this.container.attributeView.requestUpdate(e);this.container.requestRender(),await t,c("esri-2d-update-debug")&&console.debug(`[Id: ${this.layerId}] GraphicsView2D.AttributeStoreView.updateEnd`,{message:e})}});const e=re(null,[]);this._attributeStore.update(e,this._storage,null),this.container.checkHighlight=()=>this._attributeStore.hasHighlight}initialize(){this._initAttributeStore(),this._metadata=W.create(this.view.spatialReference),this._resourceProxy=new Z({fetch:e=>Promise.all(e.map((e=>this.view.stage.textureManager.rasterizeItem(e)))),fetchDictionary:e=>{throw new Error("InternalError: Graphics do not support Dictionary requests")}}),this.addHandles([f((()=>this._effectiveRenderer),(()=>this._pushUpdate())),this.view.graphicsTileStore.on("update",this._onTileUpdate.bind(this)),this.container.on("attach",(()=>{this.addHandles([this.graphics.on("change",(()=>this._pushUpdate()))]),this._graphicStore=new ge(this.view.spatialReference,this._cimResourceManager,this.view.featuresTilingScheme,this.view.state.scale,this._attributeStore),this._attached=!0,this.requestUpdate(),this._pushUpdate()}))]),this._updateTracking.addUpdateTracking("CommandQueue",this._commandQueue.updateTracking);const e=this.view.graphicsTileStore.tiles;this._onTileUpdate({added:e,removed:[]})}get _effectiveRenderer(){return"function"==typeof this.renderer?this.renderer():this.renderer}get _cimResourceManager(){return this.view.stage.textureManager.resourceManager}get updating(){const e=!this._attached||this._updateTracking.updating;return c("esri-2d-log-updating")&&console.log(`Updating GraphicsView2D: ${e}\n  -> attaching ${!this._attached}\n  -> updateTracking ${this._updateTracking.updating}`),e}hitTest(e){if(!this.view||this.view.suspended)return[];const{resolution:t,rotation:s}=this.view.state,i=this._graphicStore.hitTest(e.x,e.y,2,t,s),r=new Set(i),o=this.graphics.items.reduce(((e,t)=>(r.has(t.uid)&&e.set(t.uid,t),e)),new Map);return i.map((e=>o.get(e))).filter(b)}requestUpdate(){this.updateRequested||(this.updateRequested=!0,this.requestUpdateCallback()),this.notifyChange("updating")}processUpdate(e){this.updateRequested&&(this.updateRequested=!1,this.update(e))}viewChange(){this.requestUpdate()}setHighlight(e){const t=[];for(const{objectId:s,highlightFlags:i}of e){const e=this._graphicStore.getItem(s)?.displayId;t.push({objectId:s,highlightFlags:i,displayId:e})}this._attributeStore.setHighlight(t,e),this._pushUpdate()}graphicUpdateHandler(e){this._pushUpdate()}update(e){this.updateRequested=!1,this._attached&&this._graphicStore.updateLevel(e.state.resolution)}_pushUpdate(){w(this._commandQueue.push({type:"update"}))}async _update(){try{c("esri-2d-update-debug")&&console.debug(`[Id: ${this.layerId}] GraphicsView._update start`);const e=await this._graphicStore.update(this.graphics,(e=>this._getSymbolForGraphic(e)),(e=>this._ensureSymbolResource(e)));if(!e.hasAnyUpdate())return void(await this._attributeStore.sendUpdates());e.removed.length&&(this._cleanupRequired=!0),c("esri-2d-update-debug")&&console.debug(`[Id: ${this.layerId}] GraphicsView updateMessage`,e);const t=this._createTileMessages(e);await this._fetchResources(t),this._write(t);for(const s of e.added)this._setFilterState(s);for(const s of e.updated)this._setFilterState(s);c("esri-2d-update-debug")&&console.debug(`[Id: ${this.layerId}] GraphicsView sendUpdate`,e),await this._attributeStore.sendUpdates(),c("esri-2d-update-debug")&&console.debug(`[Id: ${this.layerId}] GraphicsView sendUpdate.await`,e)}catch(ne){}this._cleanupSharedResources()}_createTileMessages(e){const t=new Map;for(const s of e.added){const e=this.view.graphicsTileStore.getIntersectingTiles(s.bounds);for(const i of e)fe.getOrCreate(i,t,this._metadata).addedOrModified.push(s)}for(const s of e.updated){const e=this.view.graphicsTileStore.getIntersectingTiles(s.prevBounds),i=this.view.graphicsTileStore.getIntersectingTiles(s.bounds);for(const r of e)fe.getOrCreate(r,t,this._metadata).removed.push(s.displayId);for(const r of i)fe.getOrCreate(r,t,this._metadata).addedOrModified.push(s)}for(const s of e.removed){const e=this.view.graphicsTileStore.getIntersectingTiles(s.bounds);for(const i of e)fe.getOrCreate(i,t,this._metadata).removed.push(s.displayId)}return Array.from(t.values())}async _fetchResources(e){for(const{tile:t,reader:s}of e){c("esri-2d-update-debug")&&console.debug(`Id[${this.layerId}] Tile[${t.id}] GraphicsView fetchResources`,e);const i=s.getCursor();for(;i.next();)for(const e of i.getMeshWriters())e.enqueueRequest(this._resourceProxy,i,t.createArcadeEvaluationOptions(this.view.timeZone))}await this._resourceProxy.fetchEnqueuedResources()}_write(e){for(const t of e){c("esri-2d-update-debug")&&console.debug(`Id[${this.layerId}] Tile[${t.tile.id}] GraphicsView write`,t);const e=this._writeMeshes(t);let s=this._tiles.get(t.tile.key);s||(s=this._createFeatureTile(t.tile.key)),c("esri-2d-update-debug")&&console.debug(`Id[${this.layerId}] Tile[${t.tile.id}] GraphicsView onTileData`,t),this.container.onTileData(s,{type:"update",modify:e,remove:t.removed,end:!1,attributeEpoch:this._attributeStore.epoch}),this.container.requestRender()}}_writeMeshes(e){const t=new N(e.tile.id),s=e.reader.getCursor();for(;s.next();){t.entityStart(s.getDisplayId(),s.getZOrder());for(const i of s.getMeshWriters())i.write(t,this._resourceProxy,s,e.tile.createArcadeEvaluationOptions(this.view.timeZone),e.tile.level);t.entityEnd()}return{...t.serialize().message,tileId:e.tile.id}}_setFilterState(e){const t=e.displayId,s=this._attributeStore.getHighlightFlags(e.objectId);this._attributeStore.setData(t,0,0,s|(e.visible?V:0))}_getSymbolForGraphic(e){return null!=e.symbol?e.symbol:null!=this._effectiveRenderer?this._effectiveRenderer.getSymbol(e):this._getNullSymbol(e)}async _ensureSymbolResource(e){if(!e.symbol)return;const t=await this._getSymbolInfo(e.symbol);if(!t)return;const s=t.linearCIM.filter((e=>"text"===e.type));if(s.length>0){const i=await this._getTextResources(e,s);e.symbolResource={symbolInfo:t,textInfo:i}}else e.symbolResource={symbolInfo:t}}_getSymbolInfo(e){const t=e.hash();return this._hashToSymbolInfo.has(t)||this._hashToSymbolInfo.set(t,this._createSymbolInfo(t,e).catch((e=>null))),this._hashToSymbolInfo.get(t)}async _createSymbolInfo(e,t){const s=await this._convertToCIMSymbol(t),i=await this._createLinearCIM(s);if("text"===t.type)for(const r of i)"text"===r.type&&(r.lineWidth=t.lineWidth);return{hash:e,cimSymbol:s,linearCIM:i,meshWriters:await this._createMeshWriters(s,i)}}async _convertToCIMSymbol(e){const t=q(e);return"web-style"===t.type?(await t.fetchCIMSymbol()).data:t}async _createLinearCIM(e){return await Promise.all(A.fetchResources(e.symbol,this._cimResourceManager,[])),this.view.stage.cimAnalyzer.analyzeSymbolReference(e,!1)}async _createMeshWriters(e,s){I(this._controller.signal);const i=this.container.instanceStore,r=await t(e,s,i);return Promise.all(r.map((e=>B(this._storage,this._resourceProxy,e.meshWriterName,E(e.id),e.options,{tileInfo:this.view.featuresTilingScheme.tileInfo},e.optionalAttributes))))}_onTileUpdate(e){if(e.added&&e.added.length>0)for(const t of e.added)this._updateTracking.addPromise(this._addTile(t));if(e.removed&&e.removed.length>0)for(const t of e.removed)this._removeTile(t.key)}_createFeatureTile(e){const t=this.view.featuresTilingScheme.getTileBounds(a(),e),s=this.view.featuresTilingScheme.getTileResolution(e.level),i=new D(e,s,t[0],t[3]);return this._tiles.set(e,i),this.container.addChild(i),i}async _addTile(e){if(!this._attached)return;const t=this._graphicStore.queryItems(e);if(!t.length)return;const s=this._createFeatureTile(e.key),i=fe.fromItems(e,t,this._metadata);await this._fetchResources([i]);const r=this._writeMeshes(i);s.onMessage({type:"append",append:r,clear:!1,end:!0,attributeEpoch:this._attributeStore.epoch})}_removeTile(e){if(!this._tiles.has(e))return;const t=this._tiles.get(e);this.container.removeChild(t),t.destroy(),this._tiles.delete(e)}_getNullSymbol(e){const t=e.geometry;return S(t)?v:x(t)||h(t)?R:this.defaultPointSymbolEnabled?T:null}async _getTextResources(e,t){const i=new Array,r=new Array;for(let h=0;h<t.length;h++){const o=t[h],{resource:a,overrides:n}=o.textRasterizationParam;if(n?.length>0){const t=M.resolveSymbolOverrides({type:"CIMSymbolReference",primitiveOverrides:n,symbol:{type:"CIMPointSymbol",symbolLayers:[{type:"CIMVectorMarker",enable:!0,size:a.symbol.height,anchorPointUnits:"Relative",frame:{xmin:-5,ymin:-5,xmax:5,ymax:5},markerGraphics:[{type:"CIMMarkerGraphic",geometry:{x:0,y:0},symbol:a.symbol,textString:a.textString}],scaleSymbolsProportionally:!0,respectFrame:!0}]}},e,this.view.spatialReference,null,s(e.projectedGeometry),null,null);t.then((e=>{const t=e.symbolLayers[0],{textString:s}=t.markerGraphics[0];r.push({type:"cim-rasterization-info",resource:{type:"text",textString:s||"",font:a.font}}),o.text=a.textString=s||""})),i.push(t)}else r.push({type:"cim-rasterization-info",resource:a})}i.length>0&&await Promise.all(i);const o=r.map((e=>this.view.stage.textureManager.rasterizeItem(e))),a=await Promise.all(o);G(a);const n=new Map;for(let s=0;s<t.length;s++){const e=t[s];n.set(e.textRasterizationParam.resource.symbol,{text:e.text,glyphMosaicItems:a[s]})}return n}_cleanupSharedResources(){if(!this._cleanupRequired)return;const e=performance.now();if(e-this._lastCleanup<5e3)return;this._cleanupRequired=!1,this._lastCleanup=e;const t=new Set;for(const i of this._graphicStore.items()){const e=i.symbolResource?.symbolInfo.hash;t.add(e)}const s=new Set(this._hashToSymbolInfo.keys());for(const i of s.values())t.has(i)||this._hashToSymbolInfo.delete(i)}};C([z()],be.prototype,"_effectiveRenderer",null),C([z({constructOnly:!0})],be.prototype,"layerId",void 0),C([z({constructOnly:!0})],be.prototype,"requestUpdateCallback",void 0),C([z()],be.prototype,"container",void 0),C([z({constructOnly:!0})],be.prototype,"graphics",void 0),C([z()],be.prototype,"renderer",void 0),C([z()],be.prototype,"_updateTracking",void 0),C([z()],be.prototype,"updating",null),C([z()],be.prototype,"view",void 0),C([z()],be.prototype,"updateRequested",void 0),C([z()],be.prototype,"defaultPointSymbolEnabled",void 0),be=C([U("esri.views.2d.layers.support.GraphicsView2D")],be),e("$",be)}}}));
