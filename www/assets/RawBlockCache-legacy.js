System.register(["./index-legacy.js","./rasterProjectionHelper-legacy.js"],(function(e,t){"use strict";var n,r,l,o;return{setters:[e=>{n=e.ar},e=>{r=e.J,l=e.C,o=e.r}],execute:function(){e({a:function(e,n){const r=t.get(e);r&&(r[n]=null,r.some((e=>null!=e))||t.delete(e))},g:function(e,t,c,s,a,u,h=null){const f=i(e,t);if(!f)return;const m=f.extent,{cache:d,rasterInfo:x}=f;if(m&&m.xmin===c.xmin&&m.xmax===c.xmax&&m.ymin===c.ymin&&m.ymax===c.ymax)return;s=s??0;const g=c.clone().normalize(),{spatialReference:_,transform:y}=x,k=new Set;for(let i=0;i<g.length;i++){const e=g[i];if(e.xmax-e.xmin<=s||e.ymax-e.ymin<=s)continue;let t=r(e,_,h);null!=y&&(t=y.inverseTransform(t));const c=new n({x:s,y:s,spatialReference:e.spatialReference});if(null==a&&!(a=l(c,_,e,h)))return;const{pyramidLevel:f,pyramidResolution:m,excessiveReading:d}=o(a,x,u||"closest");if(d)return;const{storageInfo:B}=x,{origin:p}=B,C={x:Math.max(0,Math.floor((t.xmin-p.x)/m.x)),y:Math.max(0,Math.floor((p.y-t.ymax)/m.y))},M=Math.ceil((t.xmax-t.xmin)/m.x-.1),R=Math.ceil((t.ymax-t.ymin)/m.y-.1),v=f>0?B.pyramidBlockWidth:B.blockWidth,z=f>0?B.pyramidBlockHeight:B.blockHeight,b=1,w=Math.max(0,Math.floor(C.x/v)-b),j=Math.max(0,Math.floor(C.y/z)-b),I=Math.floor((C.x+M-1)/v)+b,T=Math.floor((C.y+R-1)/z)+b;for(let n=j;n<=T;n++)for(let e=w;e<=I;e++)k.add(`${f}/${n}/${e}`)}d.forEach(((e,t)=>{if(!k.has(t)){const e=d.get(t);(null==e||e.isResolved||e.isRejected)&&d.delete(t)}})),f.extent={xmin:c.xmin,ymin:c.ymin,xmax:c.xmax,ymax:c.ymax}},h:function(e,n,r){const l=t.get(e);l?null!=n&&null!=l[n]?l[n]?.cache.delete(r):c.deleteBlock(e,r):null==n&&c.deleteBlock(e,r)},i:function(e,t){return null==t?e:`${e}?sliceId=${t}`},m:function(e,n,r){const l=t.get(e);if(!l)return null==n?c.getBlock(e,r):null;if(null==n||null==l[n]){for(let e=0;e<l.length;e++){const t=l[e]?.cache.get(r);if(t)return t.refCount++,t.block}return c.getBlock(e,r)}const o=l[n]?.cache.get(r);if(o)return o.refCount++,o.block;for(let t=0;t<l.length;t++){if(t===n||!l[t])continue;const e=l[t]?.cache,o=e?.get(r);if(e&&o)return o.refCount++,e.set(r,o),o.block}return null},s:function(e,n,r){const l=t.get(e);if(!l)return null==n?c.decreaseRefCount(e,r):0;if(null==n||null==l[n])return c.decreaseRefCount(e,r);const o=l[n]?.cache,i=o?.get(r);if(o&&i){if(i.refCount--,0===i.refCount){o.delete(r);for(let e=0;e<l.length;e++)l[e]?.cache.delete(r);i.controller&&i.controller.abort()}return i.refCount}return 0},u:function(e,n){const r={extent:null,rasterInfo:n,cache:new Map},l=t.get(e);return l?(l.push(r),l.length-1):(t.set(e,[r]),0)},x:function(e,n,r,l,o=null){const i=t.get(e);if(!i)return void(null==n&&c.putBlock(e,r,l,o));if(null==n||null==i[n])return void c.putBlock(e,r,l,o);const s={refCount:1,block:l,isResolved:!1,isRejected:!1,controller:o};l.then((()=>s.isResolved=!0)).catch((()=>s.isRejected=!0)),i[n]?.cache.set(r,s)}});const t=new Map,c=new class{constructor(e=15e3,t=5e3){this._timer=null,this._cachedBlocks=new Map,this._size=-1,this._duration=e,this._interval=Math.min(e,t)}decreaseRefCount(e,t){const n=e+"/"+t,r=this._cachedBlocks;if(r.has(n)){const e=r.get(n);return e.refCount--,e.refCount<=0&&(r.delete(n),e.controller&&e.controller.abort()),e.refCount}return 0}getBlock(e,t){const n=e+"/"+t,r=this._cachedBlocks;if(r.has(n)){const e=r.get(n);return e.ts=Date.now(),e.refCount++,r.delete(n),r.set(n,e),e.block}return null}putBlock(e,t,n,r){const l=this._cachedBlocks,o=e+"/"+t;if(l.has(o)){const e=l.get(o);e.ts=Date.now(),e.refCount++}else l.set(o,{block:n,ts:Date.now(),refCount:1,controller:r});this._trim(),this._updateTimer()}deleteBlock(e,t){const n=this._cachedBlocks,r=e+"/"+t;n.has(r)&&n.delete(r)}updateMaxSize(e){this._size=e,this._trim()}empty(){this._cachedBlocks.clear(),this._clearTimer()}getCurrentSize(){return this._cachedBlocks.size}_updateTimer(){if(null!=this._timer)return;const e=this._cachedBlocks;this._timer=setInterval((()=>{const t=Array.from(e),n=Date.now();for(let r=0;r<t.length&&t[r][1].ts<=n-this._duration;r++)e.delete(t[r][0]);0===e.size&&this._clearTimer()}),this._interval)}_trim(){const e=this._cachedBlocks;if(-1===this._size||this._size>=e.size)return;const t=Array.from(e);for(let n=0;n<t.length-this._size;n++)e.delete(t[n][0])}_clearTimer(){null!=this._timer&&(clearInterval(this._timer),this._timer=null)}};function i(e,n){const r=t.get(e);return r?r[n]??null:null}}}}));
